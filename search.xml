<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/08/30/C-%E4%BE%AF%E6%8D%B7C-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/08/30/C-%E4%BE%AF%E6%8D%B7C-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pyside2 for maya</title>
      <link href="/2023/08/29/PySide2-pyside2-for-maya/"/>
      <url>/2023/08/29/PySide2-pyside2-for-maya/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />教程链接：[https://www.bilibili.com/video/BV1dJ41157gV?p=2&vd_source=b1de3fe38e887eb40fc55a5485724480](https://www.bilibili.com/video/BV1dJ41157gV?p=2&vd_source=b1de3fe38e887eb40fc55a5485724480)<br />购买链接：[https://zurbrigg.com/tutorials/pyside2-for-maya](https://zurbrigg.com/tutorials/pyside2-for-maya)<a name="BKivW"></a># 创建一个新的界面的初始模板<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> maya.mel <span class="keyword">as</span> mel</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">from</span> PySide2.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">from</span> PySide.QtGui <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">from</span> PySide.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> shiboken <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;MAYA-2018&#x27;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        self.setWindowFlags(Qt.WindowType.Window)</span><br><span class="line">        window_name = <span class="string">&quot;WindowName&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cmds.window(window_name, exists=<span class="literal">True</span>):</span><br><span class="line">            cmds.deleteUI(window_name, window=<span class="literal">True</span>)</span><br><span class="line">        self.setObjectName(window_name)</span><br><span class="line">        self.setStyleSheet(<span class="string">&quot;font: 12pt &#x27;Arial&#x27;;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 信号与槽的连接 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> aa</span><br><span class="line">    app = qApp <span class="keyword">if</span> QApplication.instance() <span class="keyword">else</span> QApplication([])</span><br><span class="line">    aa = TestDialog()</span><br><span class="line">    aa.show()</span><br><span class="line">    app.exec_()</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="PlgPe"></a># 创建对话框<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent = maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;one dialog&#x27;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="noXJv"></a># 添加控件![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1660209348067-aab29e6c-8246-464d-8317-e7e652053ceb.png#averageHue=%235c5b5b&clientId=u766e0595-34d2-4&from=paste&height=239&id=Bz6mZ&originHeight=239&originWidth=216&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5305&status=done&style=none&taskId=ue78fdd29-f90b-4374-b166-ff10332b25f&title=&width=216)<br />教程中将控件和布局都分开放到函数里面了<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line">window_name = <span class="string">&quot;my_window&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cmds.window(window_name, exists=<span class="literal">True</span>):</span><br><span class="line">            cmds.deleteUI(window_name, window=<span class="literal">True</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit()</span><br><span class="line">        self.checkBox1 = QtWidgets.QCheckBox(<span class="string">&quot;Checkbox1&quot;</span>)</span><br><span class="line">        self.checkBox2 = QtWidgets.QCheckBox(<span class="string">&quot;Checkbox2&quot;</span>)</span><br><span class="line">        self.button1 = QtWidgets.QPushButton(<span class="string">&quot;Button 1&quot;</span>)</span><br><span class="line">        self.button2 = QtWidgets.QPushButton(<span class="string">&quot;Button 2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addWidget(self.lineEdit)</span><br><span class="line">        main_layout.addWidget(self.checkBox1)</span><br><span class="line">        main_layout.addWidget(self.checkBox2)</span><br><span class="line">        main_layout.addWidget(self.button1)</span><br><span class="line">        main_layout.addWidget(self.button2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="eu3dY"></a></p><h1 id="layout基础"><a href="#layout基础" class="headerlink" title="layout基础"></a>layout基础</h1><p>代码很优雅<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660211434381-4c844e6c-e74b-4585-9562-d7ee77a631e2.png#averageHue=%23676767&clientId=u766e0595-34d2-4&from=paste&height=151&id=ub9a89202&originHeight=151&originWidth=216&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4631&status=done&style=none&taskId=ubdcf75eb-e84f-4704-9bf7-3258c9fc134&title=&width=216" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        self.setMinimumWidth(<span class="number">200</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit()</span><br><span class="line">        self.checkBox1 = QtWidgets.QCheckBox()</span><br><span class="line">        self.checkBox2 = QtWidgets.QCheckBox()</span><br><span class="line">        self.ok_btn = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        self.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        form_layout = QtWidgets.QFormLayout()</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Name:&quot;</span>, self.lineEdit)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Hidden:&quot;</span>, self.checkBox1)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Locked:&quot;</span>, self.checkBox2)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.ok_btn)</span><br><span class="line">        button_layout.addWidget(self.cancel_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addLayout(form_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="pGV9c"></a></p><h1 id="删除对话框"><a href="#删除对话框" class="headerlink" title="删除对话框"></a>删除对话框</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br></pre></td></tr></table></figure><p><a name="rat7r"></a></p><h1 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        self.setMinimumWidth(<span class="number">200</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit()</span><br><span class="line">        self.checkBox1 = QtWidgets.QCheckBox()</span><br><span class="line">        self.checkBox2 = QtWidgets.QCheckBox()</span><br><span class="line">        self.ok_btn = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        self.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        form_layout = QtWidgets.QFormLayout()</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Name:&quot;</span>, self.lineEdit)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Hidden:&quot;</span>, self.checkBox1)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Locked:&quot;</span>, self.checkBox2)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.ok_btn)</span><br><span class="line">        button_layout.addWidget(self.cancel_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addLayout(form_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineEdit.editingFinished.connect(self.print_hello_name)</span><br><span class="line">        self.checkBox1.toggled.connect(self.print_is_hidden)</span><br><span class="line">        self.cancel_btn.clicked.connect(self.close)  <span class="comment"># self.close是自带的不需要自己写函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_hello_name</span>(<span class="params">self</span>):</span><br><span class="line">        name = self.lineEdit.text()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello &#123;&#125;!&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_is_hidden</span>(<span class="params">self</span>):</span><br><span class="line">        hidden = self.checkBox1.isChecked()</span><br><span class="line">        <span class="keyword">if</span> hidden:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hidden&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Visible&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="bjO1K"></a></p><h2 id="过载信号"><a href="#过载信号" class="headerlink" title="过载信号"></a>过载信号</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660271563886-f57ad54c-dc87-4574-ae27-6ebb78fec497.png#averageHue=%232a2c28&clientId=uc3617f6a-1057-4&from=paste&height=282&id=u7bd615cb&originHeight=282&originWidth=662&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127516&status=done&style=none&taskId=uf32b9790-1ea2-48e6-99ca-1dd7ea32f28&title=&width=662" alt="image.png"><br />通过@QtCore.Slot(int)和@QtCore.Slot(str)使信号传递的参数类型改变<br><a name="mVcMe"></a></p><h2 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671169445449-5e7ff7c9-4408-440d-9fe3-f4f6c73d7d88.png#averageHue=%23707070&clientId=u0295db91-fe64-4&from=paste&height=136&id=u0c1e930c&originHeight=122&originWidth=202&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3205&status=done&style=none&taskId=u09cc59b7-0282-4952-b90f-600b0e45c40&title=&width=224.4444503901919" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLineEdit</span>(QtWidgets.QLineEdit):</span><br><span class="line">    enter_pressed = QtCore.Signal(<span class="built_in">str</span>)  <span class="comment"># 新建自定义信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, e</span>):  <span class="comment"># 使用QLineEdit自带的事件，当按键按下时触发并发送数据</span></span><br><span class="line">        <span class="built_in">super</span>(MyLineEdit, self).keyPressEvent(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> e.key() == QtCore.Qt.Key_Enter:</span><br><span class="line">            self.enter_pressed.emit(<span class="string">&quot;Enter Key Pressed&quot;</span>)  <span class="comment"># 信号触发时发送的字符串</span></span><br><span class="line">        <span class="keyword">elif</span> e.key() == QtCore.Qt.Key_Return:</span><br><span class="line">            self.enter_pressed.emit(<span class="string">&quot;Enter Key Pressed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        self.setMinimumWidth(<span class="number">200</span>)</span><br><span class="line">        self.setMinimumHeight(<span class="number">90</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineEdit = MyLineEdit()  <span class="comment"># MyLineEdit 是自定义的继承QtWidgets.QLineEdit的类</span></span><br><span class="line">        self.ok_btn = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        self.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        form_layout = QtWidgets.QFormLayout()</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Name:&quot;</span>, self.lineEdit)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.ok_btn)</span><br><span class="line">        button_layout.addWidget(self.cancel_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addLayout(form_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineEdit.enter_pressed.connect(self.on_enter_pressed)</span><br><span class="line">        self.cancel_btn.clicked.connect(self.close)  <span class="comment"># self.close是自带的不需要自己写函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_enter_pressed</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="PJwXP"></a></p><h1 id="打开-导入-引用文件举例"><a href="#打开-导入-引用文件举例" class="headerlink" title="打开&#x2F;导入&#x2F;引用文件举例"></a>打开&#x2F;导入&#x2F;引用文件举例</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660486774209-460c6550-a87b-416f-b824-5837e80e3c46.png#averageHue=%23626161&clientId=ud565464f-f3f4-4&from=paste&height=171&id=u578a9f29&originHeight=171&originWidth=316&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7870&status=done&style=none&taskId=u1e460f4b-9d08-4527-b323-06e1b6f468d&title=&width=316" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    FILE_FILTERS = <span class="string">&quot;Maya(*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)&quot;</span>  <span class="comment"># 全部的过滤项</span></span><br><span class="line"></span><br><span class="line">    selected_filter = <span class="string">&quot;Maya (*.ma *.mb)&quot;</span>  <span class="comment"># 记录选择的过滤项，每次更改过滤项的同时会更改这个全局变量的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Open/Import/Reference&#x27;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.filepath_le = QtWidgets.QLineEdit()</span><br><span class="line">        self.select_file_path_btn = QtWidgets.QPushButton()</span><br><span class="line">        self.select_file_path_btn.setIcon(QtGui.QIcon(<span class="string">&#x27;:fileOpen.png&#x27;</span>))</span><br><span class="line">        self.select_file_path_btn.setToolTip(<span class="string">&quot;select File&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.open_rb = QtWidgets.QRadioButton(<span class="string">&quot;Open&quot;</span>)</span><br><span class="line">        self.open_rb.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.import_rb = QtWidgets.QRadioButton(<span class="string">&quot;Import&quot;</span>)</span><br><span class="line">        self.reference_rb = QtWidgets.QRadioButton(<span class="string">&quot;Reference&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.force_cb = QtWidgets.QCheckBox(<span class="string">&quot;Force&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.apply_btn = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        file_path_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        file_path_layout.addWidget(self.filepath_le)</span><br><span class="line">        file_path_layout.addWidget(self.select_file_path_btn)</span><br><span class="line"></span><br><span class="line">        radio_btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        radio_btn_layout.addWidget(self.open_rb)</span><br><span class="line">        radio_btn_layout.addWidget(self.import_rb)</span><br><span class="line">        radio_btn_layout.addWidget(self.reference_rb)</span><br><span class="line"></span><br><span class="line">        forme_layout = QtWidgets.QFormLayout()</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;File&quot;</span>, file_path_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, radio_btn_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, self.force_cb)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.apply_btn)</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.addLayout(forme_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.select_file_path_btn.clicked.connect(self.show_file_select_dialog)</span><br><span class="line"></span><br><span class="line">        self.open_rb.toggled.connect(self.update_force_visibility)</span><br><span class="line"></span><br><span class="line">        self.apply_btn.clicked.connect(self.load_file)</span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_file_select_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        file_path, self.selected_filter = QtWidgets.QFileDialog.getOpenFileName(self, <span class="string">&quot;Select File&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                                                self.FILE_FILTERS, self.selected_filter)</span><br><span class="line">        <span class="keyword">if</span> file_path:</span><br><span class="line">            self.filepath_le.setText(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_force_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.force_cb.setVisible(checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = self.filepath_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)  <span class="comment"># 得到文件的信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.exists():  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.open_rb.isChecked():</span><br><span class="line">            self.open_file(file_path)</span><br><span class="line">        <span class="keyword">if</span> self.import_rb.isChecked():</span><br><span class="line">            self.import_file(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.reference_file(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        force = self.force_cb.isChecked()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> cmds.file(q=<span class="literal">True</span>, modified=<span class="literal">True</span>):</span><br><span class="line">            result = QtWidgets.QMessageBox.question(self, <span class="string">&quot;Modified&quot;</span>, <span class="string">&quot;Current scene has unsaved changes. Continue?&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result == QtWidgets.QMessageBox.StandardButton.Yes:</span><br><span class="line">                force = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        cmds.file(file_path, <span class="built_in">open</span>=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>, force=force)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, i=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reference_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, r=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="RbM6Q"></a></p><h1 id="将插件放入到工具架上"><a href="#将插件放入到工具架上" class="headerlink" title="将插件放入到工具架上"></a>将插件放入到工具架上</h1><p><a name="HzMTb"></a></p><h2 id="主要功能模块"><a href="#主要功能模块" class="headerlink" title="主要功能模块"></a>主要功能模块</h2><p>首先这个是上一节使用的打开与导入对话框，区别是添加了show_dialog类方法来替代if name &#x3D;&#x3D; ‘<strong>main</strong>‘  。将这个py模块放到maya的script文件夹中后，然后通过另一组代码来调用类方法达到显示窗口的需求。好处是可以保存在窗口执行的操作，比如在文本框中输入了数据，关闭窗口再打开后数据依然保留。<br />然后新增加了两个函数show_event 和 close_event，这两个的作用是关闭窗口时记录窗口位置，打开窗口时设置窗口位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenImportDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    FILE_FILTERS = <span class="string">&quot;Maya(*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)&quot;</span>  <span class="comment"># 全部的过滤项</span></span><br><span class="line"></span><br><span class="line">    selected_filter = <span class="string">&quot;Maya (*.ma *.mb)&quot;</span>  <span class="comment"># 记录选择的过滤项，每次更改过滤项的同时会更改这个全局变量的值</span></span><br><span class="line"></span><br><span class="line">    dlg_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_dialog</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.dlg_instance:</span><br><span class="line">            cls.dlg_instance = OpenImportDialog()  <span class="comment"># 第一次使用函数会生成窗口实例给dlg_instance全局变量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cls.dlg_instance.isHidden():</span><br><span class="line">            cls.dlg_instance.show()  <span class="comment"># 如果窗口隐藏了就显示出来</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果窗口还在屏幕中就激活窗口并顶端显示</span></span><br><span class="line">            cls.dlg_instance.raise_()</span><br><span class="line">            cls.dlg_instance.activateWindow()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(OpenImportDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Open/Import/Reference&#x27;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        self.geometry = <span class="literal">None</span></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.filepath_le = QtWidgets.QLineEdit()</span><br><span class="line">        self.select_file_path_btn = QtWidgets.QPushButton()</span><br><span class="line">        self.select_file_path_btn.setIcon(QtGui.QIcon(<span class="string">&#x27;:fileOpen.png&#x27;</span>))</span><br><span class="line">        self.select_file_path_btn.setToolTip(<span class="string">&quot;select File&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.open_rb = QtWidgets.QRadioButton(<span class="string">&quot;Open&quot;</span>)</span><br><span class="line">        self.open_rb.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.import_rb = QtWidgets.QRadioButton(<span class="string">&quot;Import&quot;</span>)</span><br><span class="line">        self.reference_rb = QtWidgets.QRadioButton(<span class="string">&quot;Reference&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.force_cb = QtWidgets.QCheckBox(<span class="string">&quot;Force&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.apply_btn = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        file_path_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        file_path_layout.addWidget(self.filepath_le)</span><br><span class="line">        file_path_layout.addWidget(self.select_file_path_btn)</span><br><span class="line"></span><br><span class="line">        radio_btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        radio_btn_layout.addWidget(self.open_rb)</span><br><span class="line">        radio_btn_layout.addWidget(self.import_rb)</span><br><span class="line">        radio_btn_layout.addWidget(self.reference_rb)</span><br><span class="line"></span><br><span class="line">        forme_layout = QtWidgets.QFormLayout()</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;File&quot;</span>, file_path_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, radio_btn_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, self.force_cb)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.apply_btn)</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.addLayout(forme_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.select_file_path_btn.clicked.connect(self.show_file_select_dialog)</span><br><span class="line"></span><br><span class="line">        self.open_rb.toggled.connect(self.update_force_visibility)</span><br><span class="line"></span><br><span class="line">        self.apply_btn.clicked.connect(self.load_file)</span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_file_select_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        file_path, self.selected_filter = QtWidgets.QFileDialog.getOpenFileName(self, <span class="string">&quot;Select File&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                                                self.FILE_FILTERS, self.selected_filter)</span><br><span class="line">        <span class="keyword">if</span> file_path:</span><br><span class="line">            self.filepath_le.setText(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_force_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.force_cb.setVisible(checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = self.filepath_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)  <span class="comment"># 得到文件的信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.exists():  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.open_rb.isChecked():</span><br><span class="line">            self.open_file(file_path)</span><br><span class="line">        <span class="keyword">if</span> self.import_rb.isChecked():</span><br><span class="line">            self.import_file(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.reference_file(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        force = self.force_cb.isChecked()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> cmds.file(q=<span class="literal">True</span>, modified=<span class="literal">True</span>):</span><br><span class="line">            result = QtWidgets.QMessageBox.question(self, <span class="string">&quot;Modified&quot;</span>, <span class="string">&quot;Current scene has unsaved changes. Continue?&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result == QtWidgets.QMessageBox.StandardButton.Yes:</span><br><span class="line">                force = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        cmds.file(file_path, <span class="built_in">open</span>=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>, force=force)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, i=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reference_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, r=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(OpenImportDialog, self).showEvent(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.geometry:</span><br><span class="line">            self.restoreGeometry(self.geometry)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(OpenImportDialog, self).closeEvent(e)</span><br><span class="line"></span><br><span class="line">        self.geometry = self.saveGeometry()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="LGRqV"></a></p><h2 id="调用窗口显示的模块"><a href="#调用窗口显示的模块" class="headerlink" title="调用窗口显示的模块"></a>调用窗口显示的模块</h2><p>open_import_dialog为模块名(py程序名)<br />OpenImportDialog为模块中的类名<br />注意：前两行是当py文件有更改时运行的，当没有更改py文件时不要运行。因为运行前两行会重置窗口的实例数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> open_import_dialog</span><br><span class="line">reload(open_import_dialog)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> open_import_dialog <span class="keyword">import</span> OpenImportDialog</span><br><span class="line"></span><br><span class="line">OpenImportDialog.show_dialog()</span><br></pre></td></tr></table></figure><p><a name="FF1Ia"></a></p><h1 id="各种模式对话框"><a href="#各种模式对话框" class="headerlink" title="各种模式对话框"></a>各种模式对话框</h1><p><a name="HWSLO"></a></p><h2 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h2><p>这里有文件夹对话框，警告对话框，颜色选择对话框，自定义对话框<br />这里最主要学习的是自定义对话框<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671170114446-0a3d0bcd-baf4-42ee-aa68-4e09b5d92771.png#averageHue=%23655f5d&clientId=u0295db91-fe64-4&from=paste&height=594&id=ua0005fb4&originHeight=535&originWidth=1002&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52403&status=done&style=none&taskId=u9f31be18-e0e4-4adf-8e57-a662337af7a&title=&width=1113.3333628265955" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;Custom Dialog&quot;</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.lineedit = QtWidgets.QLineEdit()</span><br><span class="line">        self.ok_btn = QtWidgets.QPushButton(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        wdg_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        wdg_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Name: &quot;</span>))</span><br><span class="line">        wdg_layout.addWidget(self.lineedit)</span><br><span class="line"></span><br><span class="line">        btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        btn_layout.addStretch()</span><br><span class="line">        btn_layout.addWidget(self.ok_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.addLayout(wdg_layout)</span><br><span class="line">        main_layout.addLayout(btn_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.ok_btn.clicked.connect(self.accept)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_text</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.lineedit.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.initial_directory = cmds.internalVar(userPrefDir=<span class="literal">True</span>)  <span class="comment"># 默认文件窗口打开路径</span></span><br><span class="line">        self.initial_color = QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 默认颜色窗口初始选择的颜色</span></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.warning_btn = QtWidgets.QPushButton(<span class="string">&quot;Warning&quot;</span>)</span><br><span class="line">        self.folder_select_btn = QtWidgets.QPushButton(<span class="string">&quot;Folder Select&quot;</span>)</span><br><span class="line">        self.color_select_btn = QtWidgets.QPushButton(<span class="string">&quot;Color Select&quot;</span>)</span><br><span class="line">        self.custom_btn = QtWidgets.QPushButton(<span class="string">&quot;Modal (Custom)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QHBoxLayout(self)</span><br><span class="line">        main_layout.addWidget(self.warning_btn)</span><br><span class="line">        main_layout.addWidget(self.folder_select_btn)</span><br><span class="line">        main_layout.addWidget(self.color_select_btn)</span><br><span class="line">        main_layout.addWidget(self.custom_btn)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.warning_btn.clicked.connect(self.show_warning_dialog)</span><br><span class="line">        self.folder_select_btn.clicked.connect(self.show_folder_select)</span><br><span class="line">        self.color_select_btn.clicked.connect(self.show_color_select)</span><br><span class="line">        self.custom_btn.clicked.connect(self.show_custom_dialog)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_warning_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        QtWidgets.QMessageBox.warning(self, <span class="string">&quot;Object Not Found&quot;</span>, <span class="string">&quot;Camera &#x27;shotcam&#x27; not found.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_folder_select</span>(<span class="params">self</span>):</span><br><span class="line">        new_directory = QtWidgets.QFileDialog.getExistingDirectory(self, <span class="string">&quot;Select Folder&quot;</span>, self.initial_directory)</span><br><span class="line">        <span class="keyword">if</span> new_directory:</span><br><span class="line">            self.initial_directory = new_directory</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Selected Folder : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(new_directory))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_color_select</span>(<span class="params">self</span>):</span><br><span class="line">        self.initial_color = QtWidgets.QColorDialog.getColor(self.initial_color, self)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Red:&#123;&#125; Green:&#123;&#125; Blue:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.initial_color.red(),</span><br><span class="line">                                               self.initial_color.green(),</span><br><span class="line">                                               self.initial_color.blue()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_custom_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        custom_dialog = CustomDialog()</span><br><span class="line"></span><br><span class="line">        result = custom_dialog.exec_()  <span class="comment"># 自定义窗口模式 这个模式是打开后只能够在当前窗口操作，窗口关闭前不能执行窗口外的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> result == QtWidgets.QDialog.Accepted:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Name: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(custom_dialog.get_text()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="n7TgF"></a></p><h2 id="标准Qt对话框"><a href="#标准Qt对话框" class="headerlink" title="标准Qt对话框"></a>标准Qt对话框</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660703172622-7846ab65-52cb-4757-bcd4-e64748ce6b24.png#averageHue=%234c4c4c&clientId=u88fb9660-6e1f-4&from=paste&height=523&id=ucbd9754e&originHeight=523&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86237&status=done&style=none&taskId=ufec16794-3083-451f-87df-542146cd64f&title=&width=665" alt="image.png"><br />没找到源码，视频上也没显示全，就不放代码了。<br><a name="az5pO"></a></p><h1 id="QListWidget"><a href="#QListWidget" class="headerlink" title="QListWidget"></a>QListWidget</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660710501521-ea737a89-d60d-45aa-996b-a4db34ad19aa.png#averageHue=%23494948&clientId=u88fb9660-6e1f-4&from=paste&height=260&id=u4932fb14&originHeight=260&originWidth=236&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7610&status=done&style=none&taskId=ucf9c9473-c59c-498e-839f-60d0b31d97b&title=&width=236" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutputResolutionDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    <span class="comment"># 数值用带小数点的原因是要计算长宽比，长宽比是小数</span></span><br><span class="line">    RESOLUTION_ITEMS = [[<span class="string">&quot;1920X1080 (1080p)&quot;</span>, <span class="number">1920.0</span>, <span class="number">1080.0</span>],</span><br><span class="line">                        [<span class="string">&quot;1280X720 (720p)&quot;</span>, <span class="number">1280.0</span>, <span class="number">720.0</span>],</span><br><span class="line">                        [<span class="string">&quot;960X540 (540p)&quot;</span>, <span class="number">960.0</span>, <span class="number">540.0</span>],</span><br><span class="line">                        [<span class="string">&quot;640X480&quot;</span>, <span class="number">640.0</span>, <span class="number">480.0</span>],</span><br><span class="line">                        [<span class="string">&quot;320X240&quot;</span>, <span class="number">320.0</span>, <span class="number">240.0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(OutputResolutionDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Output Resolution&#x27;</span>)</span><br><span class="line">        self.setFixedWidth(<span class="number">220</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.resolution_list_wdg = QtWidgets.QListWidget()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> resolution_item <span class="keyword">in</span> self.RESOLUTION_ITEMS:</span><br><span class="line">            list_wdg_item = QtWidgets.QListWidgetItem(resolution_item[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># QtCore.Qt.UserRole可以理解为序号0,一个item可以拥有多个数据，因此可以通过QtCore.Qt.UserRole，QtCore.Qt.UserRole+1来设置数据的序号</span></span><br><span class="line">            list_wdg_item.setData(QtCore.Qt.UserRole,</span><br><span class="line">                                  [resolution_item[<span class="number">1</span>], resolution_item[<span class="number">2</span>]]) </span><br><span class="line">            self.resolution_list_wdg.addItem(list_wdg_item)</span><br><span class="line"></span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&#x27;Close&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 设置布局与窗口边界的距离</span></span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)  <span class="comment"># 设置布局中的控件之间的间隙</span></span><br><span class="line">        main_layout.addWidget(self.resolution_list_wdg)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.resolution_list_wdg.itemClicked.connect(self.set_output_resolution)</span><br><span class="line"></span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_output_resolution</span>(<span class="params">self, item</span>):</span><br><span class="line">        resolution = item.data(QtCore.Qt.UserRole)</span><br><span class="line"></span><br><span class="line">        cmds.setAttr(<span class="string">&quot;defaultResolution.width&quot;</span>, resolution[<span class="number">0</span>])</span><br><span class="line">        cmds.setAttr(<span class="string">&quot;defaultResolution.height&quot;</span>, resolution[<span class="number">1</span>])</span><br><span class="line">        cmds.setAttr(<span class="string">&quot;defaultResolution.deviceAspectRatio&quot;</span>, resolution[<span class="number">0</span>]/resolution[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = OutputResolutionDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="BM1yP"></a></p><h1 id="可以设置的选择模式"><a href="#可以设置的选择模式" class="headerlink" title="可以设置的选择模式"></a>可以设置的选择模式</h1><p>举例：<br />self.resolution_list_wdg &#x3D; QtWidgets.QListWidget()<br />self.resolution_list_wdg.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection) # 设置listWidget控件的选择模式为MultiSelection     <br />ExtendedSelection与MultiSelection的区别是第一个需要按住ctrl或者shift多选，第二个不需要</p><table><thead><tr><th>Constant</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>QAbstractItemView::SingleSelection</td><td>1</td><td>When the user selects an item, any already-selected item becomes unselected. It is possible for the user to deselect the selected item by pressing the Ctrl key when clicking the selected item.</td></tr><tr><td>QAbstractItemView::ContiguousSelection</td><td>4</td><td>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.</td></tr><tr><td>QAbstractItemView::ExtendedSelection</td><td>3</td><td>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</td></tr><tr><td>QAbstractItemView::MultiSelection</td><td>2</td><td>When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.</td></tr><tr><td>QAbstractItemView::NoSelection</td><td>0</td><td>Items cannot be selected.</td></tr></tbody></table><p><a name="LaZ0H"></a></p><h1 id="QTableDialog"><a href="#QTableDialog" class="headerlink" title="QTableDialog"></a>QTableDialog</h1><p><a name="PgPfM"></a></p><h2 id="显示大纲模型名字以及变换信息窗口"><a href="#显示大纲模型名字以及变换信息窗口" class="headerlink" title="显示大纲模型名字以及变换信息窗口"></a>显示大纲模型名字以及变换信息窗口</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660717613536-9bd230fa-ce6a-43ed-8188-b428b498e914.png#averageHue=%23595755&clientId=u88fb9660-6e1f-4&from=paste&height=356&id=ue9e1df1d&originHeight=356&originWidth=691&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76846&status=done&style=none&taskId=ua6156b97-b453-4274-a681-bd2645ee798&title=&width=691" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TableExampleDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    ATTR_ROLE = QtCore.Qt.UserRole</span><br><span class="line">    VALUE_ROLE = QtCore.Qt.UserRole + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Table Example&#x27;</span>)</span><br><span class="line">        self.setFixedWidth(<span class="number">500</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.table_wdg = QtWidgets.QTableWidget()</span><br><span class="line">        self.table_wdg.setColumnCount(<span class="number">5</span>)</span><br><span class="line">        self.table_wdg.setColumnWidth(<span class="number">0</span>, <span class="number">22</span>)</span><br><span class="line">        self.table_wdg.setColumnWidth(<span class="number">2</span>, <span class="number">70</span>)</span><br><span class="line">        self.table_wdg.setColumnWidth(<span class="number">3</span>, <span class="number">70</span>)</span><br><span class="line">        self.table_wdg.setColumnWidth(<span class="number">4</span>, <span class="number">70</span>)</span><br><span class="line">        self.table_wdg.setHorizontalHeaderLabels([<span class="string">&quot;&quot;</span>, <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;TransX&quot;</span>, <span class="string">&quot;TransY&quot;</span>, <span class="string">&quot;TransZ&quot;</span>])</span><br><span class="line">        header_view = self.table_wdg.horizontalHeader()</span><br><span class="line">        header_view.setSectionResizeMode(<span class="number">1</span>, QtWidgets.QHeaderView.Stretch)  <span class="comment"># 设置标题栏为自动填充窗口</span></span><br><span class="line"></span><br><span class="line">        self.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.refresh_btn)</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(self.table_wdg)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.set_cell_changed_connection_enabled(<span class="literal">True</span>)</span><br><span class="line">        self.refresh_btn.clicked.connect(self.refresh_table)</span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_cell_changed_connection_enabled</span>(<span class="params">self, enabled</span>):  <span class="comment"># 设置单元格信号与槽的连接状态  目的是使执行refresh时不执行槽函数</span></span><br><span class="line">        <span class="keyword">if</span> enabled:</span><br><span class="line">            self.table_wdg.cellChanged.connect(self.on_cell_changed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.table_wdg.cellChanged.disconnect(self.on_cell_changed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, self).showEvent(e)  <span class="comment"># 当启动窗口时执行这个函数</span></span><br><span class="line">        self.refresh_table()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, self).keyPressEvent(e)</span><br><span class="line">        e.accept()  <span class="comment"># 当在工具窗口中使用键盘时不会影响到maya主窗口的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_table</span>(<span class="params">self</span>):</span><br><span class="line">        self.set_cell_changed_connection_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        self.table_wdg.setRowCount(<span class="number">0</span>)  <span class="comment"># 将tableWidget 的所有项清空</span></span><br><span class="line"></span><br><span class="line">        meshes = cmds.ls(typ=<span class="string">&quot;mesh&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(meshes)):</span><br><span class="line">            transform_name = cmds.listRelatives(meshes[i], parent=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">            translation = cmds.getAttr(<span class="string">&quot;&#123;&#125;.translate&quot;</span>.<span class="built_in">format</span>(transform_name))[<span class="number">0</span>]</span><br><span class="line">            visible = cmds.getAttr(<span class="string">&quot;&#123;&#125;.visibility&quot;</span>.<span class="built_in">format</span>(transform_name))</span><br><span class="line"></span><br><span class="line">            self.table_wdg.insertRow(i)</span><br><span class="line">            self.insert_item(i, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;visibility&quot;</span>, visible, <span class="literal">True</span>)</span><br><span class="line">            self.insert_item(i, <span class="number">1</span>, transform_name, <span class="literal">None</span>, transform_name, <span class="literal">False</span>)</span><br><span class="line">            self.insert_item(i, <span class="number">2</span>, self.float_to_string(translation[<span class="number">0</span>]), <span class="string">&quot;tx&quot;</span>, translation[<span class="number">0</span>], <span class="literal">False</span>)</span><br><span class="line">            self.insert_item(i, <span class="number">3</span>, self.float_to_string(translation[<span class="number">1</span>]), <span class="string">&quot;ty&quot;</span>, translation[<span class="number">0</span>], <span class="literal">False</span>)</span><br><span class="line">            self.insert_item(i, <span class="number">4</span>, self.float_to_string(translation[<span class="number">2</span>]), <span class="string">&quot;tz&quot;</span>, translation[<span class="number">0</span>], <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        self.set_cell_changed_connection_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_item</span>(<span class="params">self, row, column, text, attr, value, is_boolean</span>):</span><br><span class="line">        item = QtWidgets.QTableWidgetItem(text)</span><br><span class="line">        self.set_item_attr(item, attr)</span><br><span class="line">        self.set_item_value(item, value)</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            item.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)  <span class="comment"># 设置复选框</span></span><br><span class="line">            self.set_item_checked(item, value)</span><br><span class="line"></span><br><span class="line">        self.table_wdg.setItem(row, column, item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_cell_changed</span>(<span class="params">self, row, column</span>):</span><br><span class="line">        <span class="comment"># 单元格进行改变时先将信号与槽断开连接，当rename执行完成以后再连接起来</span></span><br><span class="line">        <span class="comment"># 控制信号与槽连接状态的目的就是控制什么时候改变单元格的信息时执行槽函数</span></span><br><span class="line">        self.set_cell_changed_connection_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        item = self.table_wdg.item(row, column)</span><br><span class="line">        <span class="keyword">if</span> column == <span class="number">1</span>:</span><br><span class="line">            self.rename(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_boolean = column == <span class="number">0</span></span><br><span class="line">            self.update_attr(self.get_full_attr_name(row, item), item, is_boolean)</span><br><span class="line"></span><br><span class="line">        self.set_cell_changed_connection_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rename</span>(<span class="params">self, item</span>):</span><br><span class="line">        old_name = self.get_item_value(item)</span><br><span class="line">        new_name = self.get_item_text(item)</span><br><span class="line">        <span class="keyword">if</span> old_name != new_name:</span><br><span class="line">            actual_new_name = cmds.rename(old_name, new_name)</span><br><span class="line">            <span class="keyword">if</span> actual_new_name != new_name:</span><br><span class="line">                self.set_item_text(item, actual_new_name)</span><br><span class="line">            self.set_item_value(item, actual_new_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_attr</span>(<span class="params">self, attr_name, item, is_boolean</span>):</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            value = self.is_item_checked(item)</span><br><span class="line">            self.set_item_text(item, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text = self.get_item_text(item)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = <span class="built_in">float</span>(text)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                self.revert_original_value(item, is_boolean)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmds.setAttr(attr_name, value)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.revert_original_value(item, is_boolean)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        new_value = cmds.getAttr(attr_name)</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            self.set_item_checked(item, new_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_item_text(item, self.float_to_string(new_value))</span><br><span class="line">        self.set_item_value(item, new_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_text</span>(<span class="params">self, item, text</span>):</span><br><span class="line">        item.setText(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_text</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_checked</span>(<span class="params">self, item, checked</span>):</span><br><span class="line">        <span class="keyword">if</span> checked:</span><br><span class="line">            item.setCheckState(QtCore.Qt.Checked)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item.setCheckState(QtCore.Qt.Unchecked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_item_checked</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.checkState() == QtCore.Qt.Checked</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_attr</span>(<span class="params">self, item, attr</span>):</span><br><span class="line">        item.setData(self.ATTR_ROLE, attr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_attr</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.data(self.ATTR_ROLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_value</span>(<span class="params">self, item, value</span>):</span><br><span class="line">        item.setData(self.VALUE_ROLE, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_full_attr_name</span>(<span class="params">self, row, item</span>):</span><br><span class="line">        node_name = self.table_wdg.item(row, <span class="number">1</span>).data(self.VALUE_ROLE)</span><br><span class="line">        attr_name = self.get_item_attr(item)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(node_name, attr_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_value</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.data(self.VALUE_ROLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">float_to_string</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0:.4f&#125;&quot;</span>.<span class="built_in">format</span>(value)  <span class="comment"># 令浮点数变成保留四位数的字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">revert_original_value</span>(<span class="params">self, item, is_boolean</span>):</span><br><span class="line">        original_value = self.get_item_value(item)</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            self.set_item_checked(item, original_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_item_text(item, self.flate_to_string(original_value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TableExampleDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="lWuF1"></a></p><h2 id="在表格控件中添加其他控件"><a href="#在表格控件中添加其他控件" class="headerlink" title="在表格控件中添加其他控件"></a>在表格控件中添加其他控件</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661410775956-afb1b836-aa01-412e-846a-397b927d705f.png#averageHue=%23505050&clientId=u9eaa8f12-95dd-4&from=paste&height=260&id=uabb0d097&originHeight=260&originWidth=316&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7437&status=done&style=none&taskId=ua2bdaaf9-3ef7-4efe-9e3c-cdbc5f38ed8&title=&width=316" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TableExampleDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Table Example&#x27;</span>)</span><br><span class="line">        self.setFixedWidth(<span class="number">300</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.table_wdg = QtWidgets.QTableWidget()</span><br><span class="line">        self.table_wdg.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        self.table_wdg.setHorizontalHeaderLabels([<span class="string">&quot;QPushButton&quot;</span>, <span class="string">&quot;QSpinBox&quot;</span>, <span class="string">&quot;QComboBox&quot;</span>])</span><br><span class="line">        header_view = self.table_wdg.horizontalHeader()</span><br><span class="line">        header_view.setSectionResizeMode(<span class="number">1</span>, QtWidgets.QHeaderView.Stretch)  <span class="comment"># 设置标题栏为自动填充窗口</span></span><br><span class="line"></span><br><span class="line">        self.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.refresh_btn)</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(self.table_wdg)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.refresh_btn.clicked.connect(self.refresh_table)</span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, self).showEvent(e)  <span class="comment"># 当启动窗口时执行这个函数</span></span><br><span class="line">        self.refresh_table()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_table</span>(<span class="params">self</span>):</span><br><span class="line">        self.table_wdg.setRowCount(<span class="number">0</span>)</span><br><span class="line">        self.table_wdg.insertRow(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        btn = QtWidgets.QPushButton(<span class="string">&quot;Button&quot;</span>)</span><br><span class="line">        btn.clicked.connect(self.on_button_pressed)</span><br><span class="line">        self.table_wdg.setCellWidget(<span class="number">0</span>, <span class="number">0</span>, btn)</span><br><span class="line"></span><br><span class="line">        spin_box = QtWidgets.QSpinBox()</span><br><span class="line">        spin_box.valueChanged.connect(self.on_value_changed)</span><br><span class="line">        self.table_wdg.setCellWidget(<span class="number">0</span>, <span class="number">1</span>, spin_box)</span><br><span class="line"></span><br><span class="line">        combo_box = QtWidgets.QComboBox()</span><br><span class="line">        combo_box.addItems([<span class="string">&quot;Item 1&quot;</span>, <span class="string">&quot;Item2&quot;</span>, <span class="string">&quot;Item3&quot;</span>])</span><br><span class="line">        combo_box.currentTextChanged.connect(self.on_current_text_changed)</span><br><span class="line">        self.table_wdg.setCellWidget(<span class="number">0</span>, <span class="number">2</span>, combo_box)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_button_pressed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button was pressed&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_value_changed</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;SpinBox value changed: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_current_text_changed</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ComboBox text changed: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TableExampleDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="tbVxe"></a></p><h1 id="QSpinBox与QDoubleSpinBox"><a href="#QSpinBox与QDoubleSpinBox" class="headerlink" title="QSpinBox与QDoubleSpinBox"></a>QSpinBox与QDoubleSpinBox</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661412226518-48951f98-411f-4fd4-9fc4-9b8306dfb70e.png#averageHue=%23737271&clientId=u9eaa8f12-95dd-4&from=paste&height=106&id=uf4e77954&originHeight=106&originWidth=211&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5030&status=done&style=none&taskId=u71974899-6a25-4801-b784-e71cbac61fa&title=&width=211" alt="image.png"><br />可以通过鼠标滚轮滑动来更改数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpinBoxDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(SpinBoxDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Spin Box Dialog&#x27;</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.spin_box = QtWidgets.QSpinBox()</span><br><span class="line">        self.spin_box.setFixedWidth(<span class="number">80</span>)</span><br><span class="line">        self.spin_box.setMinimum(-<span class="number">100</span>)</span><br><span class="line">        self.spin_box.setMaximum(<span class="number">100</span>)</span><br><span class="line">        self.spin_box.setSingleStep(<span class="number">5</span>)</span><br><span class="line">        self.spin_box.setPrefix(<span class="string">&quot;$ &quot;</span>)  <span class="comment"># 设置显示的前缀 但是不会当值来交互，仅仅是显示</span></span><br><span class="line">        self.spin_box.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)  <span class="comment"># 取消显示上下按钮框</span></span><br><span class="line"></span><br><span class="line">        self.double_spin_box = QtWidgets.QDoubleSpinBox()</span><br><span class="line">        self.double_spin_box.setFixedWidth(<span class="number">80</span>)</span><br><span class="line">        self.double_spin_box.setRange(-<span class="number">50.0</span>, <span class="number">50.0</span>)</span><br><span class="line">        self.double_spin_box.setSuffix(<span class="string">&quot; m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QFormLayout(self)</span><br><span class="line">        main_layout.addRow(<span class="string">&quot;Spin Box:&quot;</span>, self.spin_box)</span><br><span class="line">        main_layout.addRow(<span class="string">&quot;Double Spin Box:&quot;</span>, self.double_spin_box)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.spin_box.valueChanged.connect(self.print_value)</span><br><span class="line">        self.double_spin_box.valueChanged.connect(self.print_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_value</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Value: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = SpinBoxDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="L2Pcc"></a></p><h1 id="启动maya图标资源管理器"><a href="#启动maya图标资源管理器" class="headerlink" title="启动maya图标资源管理器"></a>启动maya图标资源管理器</h1><p>import maya.app.general.resourceBrowser as resourceBrowser<br />resourceBrowser.resourceBrowser().run()<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661419111759-00e4785c-b7ec-4dbf-bc59-ef400fa10604.png#averageHue=%23514f4e&clientId=uc6467607-8068-4&from=paste&height=296&id=ubbdb2553&originHeight=296&originWidth=351&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14092&status=done&style=none&taskId=ue1cf3996-139b-4ae6-9efa-f1f57dc83aa&title=&width=351" alt="image.png"><br />在这里可以预览窗口的图标和名字<br><a name="uYFCq"></a></p><h1 id="QTreeView-File-Explorer"><a href="#QTreeView-File-Explorer" class="headerlink" title="QTreeView File Explorer"></a>QTreeView File Explorer</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661422262493-6e04ef7d-e127-46ac-8ba1-ef98557b76b2.png#averageHue=%233d3d3c&clientId=uc6467607-8068-4&from=paste&height=439&id=u3bf9a10f&originHeight=439&originWidth=516&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12708&status=done&style=none&taskId=ua705bd21-cea0-4f6f-ac3c-1470a3bd245&title=&width=516" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeViewDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Tree View Dialog&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TreeViewDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        self.setMinimumSize(<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        root_path = <span class="string">&quot;&#123;&#125;scripts&quot;</span>.<span class="built_in">format</span>(cmds.internalVar(userAppDir=<span class="literal">True</span>))  <span class="comment"># 得到maya脚本目录</span></span><br><span class="line"></span><br><span class="line">        self.model = QtWidgets.QFileSystemModel() <span class="comment"># 获得一个FileSystem模式</span></span><br><span class="line">        self.model.setRootPath(root_path)</span><br><span class="line"></span><br><span class="line">        self.tree_view = QtWidgets.QTreeView() <span class="comment"># 创建QTreeView控件</span></span><br><span class="line">        self.tree_view.setModel(self.model) <span class="comment"># 为控件添加模式</span></span><br><span class="line">        self.tree_view.setRootIndex(self.model.index(root_path))</span><br><span class="line">        self.tree_view.hideColumn(<span class="number">1</span>)</span><br><span class="line">        self.tree_view.setColumnWidth(<span class="number">0</span>, <span class="number">240</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.model.setFilter(QtCore.QDir.Dirs | QtCore.QDir.NoDotAndDotDot)</span></span><br><span class="line"></span><br><span class="line">        self.model.setNameFilters([<span class="string">&quot;*.py&quot;</span>])  <span class="comment"># 使只能选中.py后缀的文件</span></span><br><span class="line">        self.model.setNameFilterDisables(<span class="literal">False</span>)  <span class="comment"># 将不能选中的文件进行隐藏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(self.tree_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.tree_view.doubleClicked.connect(self.on_double_clicked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_double_clicked</span>(<span class="params">self, index</span>):</span><br><span class="line">        path = self.model.filePath(index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.model.isDir(index):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Directory selected: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Directory selected: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TreeViewDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ornOr"></a></p><h1 id="制作简单的大纲"><a href="#制作简单的大纲" class="headerlink" title="制作简单的大纲"></a>制作简单的大纲</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661497459146-e8a29ae1-0130-4554-abcd-245750f64cfa.png#averageHue=%23494848&clientId=u7b21ee06-bbc2-4&from=paste&height=345&id=ub97e2f98&originHeight=345&originWidth=384&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20501&status=done&style=none&taskId=u9b265fd3-2f15-494b-aa9b-c4a7a3b5274&title=&width=384" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleOutliner</span>(QtWidgets.QDialog):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Simple Outliner&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleOutliner, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        self.setMinimumWidth(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        self.transform_icon = QtGui.QIcon(<span class="string">&quot;:transform.svg&quot;</span>)</span><br><span class="line">        self.camera_icon = QtGui.QIcon(<span class="string">&quot;:Camera.png&quot;</span>)</span><br><span class="line">        self.mesh_icon = QtGui.QIcon(<span class="string">&quot;:mesh.svg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.create_actions()</span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)  <span class="comment"># 使能显示上下文菜单</span></span><br><span class="line">        self.customContextMenuRequested.connect(self.show_context_menu)  <span class="comment"># 设置上下文菜单的ui</span></span><br><span class="line"></span><br><span class="line">        self.refresh_tree_widget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        self.about_action = QtWidgets.QAction(<span class="string">&quot;About&quot;</span>, self)</span><br><span class="line"></span><br><span class="line">        self.display_shape_action = QtWidgets.QAction(<span class="string">&quot;Shapes&quot;</span>, self)</span><br><span class="line">        self.display_shape_action.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        self.display_shape_action.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.display_shape_action.setShortcut(QtGui.QKeySequence(<span class="string">&quot;Ctrl+Shift+H&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.menu_bar = QtWidgets.QMenuBar()</span><br><span class="line">        display_menu = self.menu_bar.addMenu(<span class="string">&quot;Display&quot;</span>)</span><br><span class="line">        display_menu.addAction(self.display_shape_action)</span><br><span class="line">        help_menu = self.menu_bar.addMenu(<span class="string">&quot;Help&quot;</span>)</span><br><span class="line">        help_menu.addAction(self.about_action)</span><br><span class="line"></span><br><span class="line">        self.tree_widget = QtWidgets.QTreeWidget()</span><br><span class="line">        self.tree_widget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)</span><br><span class="line">        self.tree_widget.setHeaderHidden(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># header = self.tree_widget.headerItem()</span></span><br><span class="line">        <span class="comment"># header.setText(0, &quot;Column 0 Text&quot;)</span></span><br><span class="line"></span><br><span class="line">        self.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.refresh_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 设置左上右下的边距</span></span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.setMenuBar(self.menu_bar)</span><br><span class="line">        main_layout.addWidget(self.tree_widget)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.about_action.triggered.connect(self.about)</span><br><span class="line">        self.display_shape_action.toggled.connect(self.set_shape_nodes_visible)</span><br><span class="line"></span><br><span class="line">        self.tree_widget.itemCollapsed.connect(self.update_icon)</span><br><span class="line">        self.tree_widget.itemExpanded.connect(self.update_icon)</span><br><span class="line">        self.tree_widget.itemSelectionChanged.connect(self.select_items)</span><br><span class="line"></span><br><span class="line">        self.refresh_btn.clicked.connect(self.refresh_tree_widget)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_tree_widget</span>(<span class="params">self</span>):</span><br><span class="line">        self.shape_nodes = cmds.ls(shapes=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.tree_widget.clear()</span><br><span class="line"></span><br><span class="line">        top_level_object_names = cmds.ls(assemblies=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> top_level_object_names:</span><br><span class="line">            item = self.create_item(name)</span><br><span class="line">            self.tree_widget.addTopLevelItem(item)</span><br><span class="line"></span><br><span class="line">        self.update_selection()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">self, name</span>):</span><br><span class="line">        item = QtWidgets.QTreeWidgetItem([name])</span><br><span class="line">        self.add_children(item)</span><br><span class="line">        self.update_icon(item)</span><br><span class="line"></span><br><span class="line">        is_shape = name <span class="keyword">in</span> self.shape_nodes</span><br><span class="line">        item.setData(<span class="number">0</span>, QtCore.Qt.UserRole, is_shape)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_children</span>(<span class="params">self, item</span>):</span><br><span class="line">        children = cmds.listRelatives(item.text(<span class="number">0</span>), children=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> children:</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">                child_item = self.create_item(child)</span><br><span class="line">                item.addChild(child_item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_icon</span>(<span class="params">self, item</span>):</span><br><span class="line">        object_type = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> item.isExpanded():  <span class="comment"># 如果item被展开</span></span><br><span class="line">            object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child_count = item.childCount()</span><br><span class="line">            <span class="keyword">if</span> child_count == <span class="number">0</span>:</span><br><span class="line">                object_type = cmds.objectType(item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> child_count == <span class="number">1</span>:</span><br><span class="line">                child_item = item.child(<span class="number">0</span>)</span><br><span class="line">                object_type = cmds.objectType(child_item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line">        <span class="keyword">if</span> object_type == <span class="string">&quot;transform&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, self.transform_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;camera&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, self.camera_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;mesh&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, self.mesh_icon)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_items</span>(<span class="params">self</span>):</span><br><span class="line">        items = self.tree_widget.selectedItems()</span><br><span class="line">        names = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            names.append(item.text(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        cmds.select(names, replace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">self</span>):</span><br><span class="line">        QtWidgets.QMessageBox.about(self, <span class="string">&quot;About Simple Outliner&quot;</span>, <span class="string">&quot;Add About Text Here&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_shape_nodes_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(self.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_shape = item.data(<span class="number">0</span>, QtCore.Qt.UserRole)</span><br><span class="line">            <span class="keyword">if</span> is_shape:</span><br><span class="line">                item.setHidden(<span class="keyword">not</span> visible)</span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, point</span>):</span><br><span class="line">        context_menu = QtWidgets.QMenu()</span><br><span class="line">        context_menu.addAction(self.display_shape_action)</span><br><span class="line">        context_menu.addSeparator()  <span class="comment"># 分割线</span></span><br><span class="line">        context_menu.addAction(self.about_action)</span><br><span class="line"></span><br><span class="line">        context_menu.exec_(self.mapToGlobal(point))  <span class="comment"># 右键显示菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_selection</span>(<span class="params">self</span>):</span><br><span class="line">        selection = cmds.ls(selection=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(self.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_selected = item.text(<span class="number">0</span>) <span class="keyword">in</span> selection</span><br><span class="line">            item.setSelected(is_selected)</span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_script_job_enabled</span>(<span class="params">self, enabled</span>):</span><br><span class="line">        <span class="keyword">if</span> enabled <span class="keyword">and</span> self.script_job_number &lt; <span class="number">0</span>:</span><br><span class="line">            self.script_job_number = cmds.scriptJob(event=[<span class="string">&quot;SelectionChanged&quot;</span>, partial(self.update_selection)], protected=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> enabled <span class="keyword">and</span> self.script_job_number &gt;= <span class="number">0</span>:</span><br><span class="line">            cmds.scriptJob(kill=self.script_job_number, force=<span class="literal">True</span>)</span><br><span class="line">            self.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleOutliner, self).showEvent(e)</span><br><span class="line">        self.set_script_job_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(self, SimpleOutliner):</span><br><span class="line">            <span class="built_in">super</span>(SimpleOutliner, self).closeEvent(e)</span><br><span class="line">            self.set_script_job_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.set_script_job_enabled(<span class="literal">False</span>)</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = SimpleOutliner()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="i75Bg"></a></p><h1 id="制作进度条"><a href="#制作进度条" class="headerlink" title="制作进度条"></a>制作进度条</h1><p><a name="QCRZm"></a></p><h2 id="不同对话框"><a href="#不同对话框" class="headerlink" title="不同对话框"></a>不同对话框</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661740738923-bdd5fa24-618f-4436-b04c-b92f416af8ff.png#averageHue=%23636262&clientId=u8655e55d-37ca-4&from=paste&height=183&id=uf5be9777&originHeight=183&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10984&status=done&style=none&taskId=u4732af8d-49c4-43a5-a08f-52902460a05&title=&width=602" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressTestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Progress Test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(ProgressTestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.progress_bar_button = QtWidgets.QPushButton(<span class="string">&quot;Do It!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.progress_bar_button)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.progress_bar_button.clicked.connect(self.run_progress_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_progress_test</span>(<span class="params">self</span>):</span><br><span class="line">        number_of_operations = <span class="number">10</span>  <span class="comment"># 循环的数量</span></span><br><span class="line"></span><br><span class="line">        progress_dialog = QtWidgets.QProgressDialog(<span class="string">&quot;Waiting to process...&quot;</span>, <span class="string">&quot;Cancel&quot;</span>, <span class="number">0</span>, number_of_operations, self)</span><br><span class="line">        progress_dialog.setWindowTitle(<span class="string">&quot;Progress...&quot;</span>)</span><br><span class="line">        progress_dialog.setValue(<span class="number">0</span>)</span><br><span class="line">        progress_dialog.setWindowModality(QtCore.Qt.WindowModal)  <span class="comment"># 设置为进度条窗口出现时，代码依然能够执行，但是不能使用除对话框之外的操作</span></span><br><span class="line">        progress_dialog.show()</span><br><span class="line"></span><br><span class="line">        QtCore.QCoreApplication.processEvents()  <span class="comment"># 在执行代码之前显示对话框</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, number_of_operations + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> progress_dialog.wasCanceled():  <span class="comment"># 当按了cancel按钮后中止代码</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            progress_dialog.setLabelText(<span class="string">&quot;Processing operation: &#123;0&#125; (fo &#123;1&#125;)&quot;</span>.<span class="built_in">format</span>(i, number_of_operations))</span><br><span class="line">            progress_dialog.setValue(i)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">            QtCore.QCoreApplication.processEvents()  <span class="comment"># 显示对话框的内容</span></span><br><span class="line"></span><br><span class="line">        progress_dialog.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = ProgressTestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>换一个函数举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_progress_test</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    mesh_list = cmds.ls(assemblies=<span class="literal">True</span>)</span><br><span class="line">    number_of_operations = <span class="built_in">len</span>(mesh_list)</span><br><span class="line"></span><br><span class="line">    progress_dialog = QtWidgets.QProgressDialog(<span class="string">&quot;Waiting to process...&quot;</span>, <span class="string">&quot;Cancel&quot;</span>, <span class="number">0</span>, number_of_operations, self)</span><br><span class="line">    progress_dialog.setWindowTitle(<span class="string">&quot;Progress...&quot;</span>)</span><br><span class="line">    progress_dialog.setValue(<span class="number">0</span>)</span><br><span class="line">    progress_dialog.setWindowModality(QtCore.Qt.WindowModal)  <span class="comment"># 设置为进度条窗口出现时，代码依然能够执行，但是不能使用除对话框之外的操作</span></span><br><span class="line">    progress_dialog.show()</span><br><span class="line"></span><br><span class="line">    QtCore.QCoreApplication.processEvents()  <span class="comment"># 在执行代码之前显示对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(mesh_list):</span><br><span class="line">        <span class="keyword">if</span> progress_dialog.wasCanceled():  <span class="comment"># 当按了cancel按钮后中止代码</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        progress_dialog.setLabelText(<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        progress_dialog.setValue(num)</span><br><span class="line">        <span class="built_in">print</span> i</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        QtCore.QCoreApplication.processEvents()  <span class="comment"># 显示对话框的内容</span></span><br><span class="line"></span><br><span class="line">    progress_dialog.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="gP9wT"></a></p><h2 id="同一个对话框"><a href="#同一个对话框" class="headerlink" title="同一个对话框"></a>同一个对话框</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661744051767-0810ebd0-b8ae-434d-ac81-c539eb784adf.png#averageHue=%23696969&clientId=u8655e55d-37ca-4&from=paste&height=139&id=u6ef4cc63&originHeight=139&originWidth=316&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3399&status=done&style=none&taskId=ud246af90-c02d-4c8b-a77b-e03625aadad&title=&width=316" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661744057610-f2773001-1ecb-4c07-b68f-8eabdd426779.png#averageHue=%23696968&clientId=u8655e55d-37ca-4&from=paste&height=139&id=u9287f141&originHeight=139&originWidth=316&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5246&status=done&style=none&taskId=u7482b385-c5c1-46f8-aa0e-a9604252dce&title=&width=316" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressTestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Progress Test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(ProgressTestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        self.test_in_progress = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.progress_bar_label = QtWidgets.QLabel(<span class="string">&quot;Operation Progress&quot;</span>)</span><br><span class="line">        self.progress_bar = QtWidgets.QProgressBar()</span><br><span class="line"></span><br><span class="line">        self.progress_bar_button = QtWidgets.QPushButton(<span class="string">&quot;Do It!&quot;</span>)</span><br><span class="line">        self.cancel_button = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.update_visibility()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        progress_layout = QtWidgets.QVBoxLayout()</span><br><span class="line">        progress_layout.addWidget(self.progress_bar_label)</span><br><span class="line">        progress_layout.addWidget(self.progress_bar)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.progress_bar_button)</span><br><span class="line">        button_layout.addWidget(self.cancel_button)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 设置左上右下的边距</span></span><br><span class="line">        main_layout.addLayout(progress_layout)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.progress_bar_button.clicked.connect(self.run_progress_test)</span><br><span class="line">        self.cancel_button.clicked.connect(self.cancel_progress_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_visibility</span>(<span class="params">self</span>):</span><br><span class="line">        self.progress_bar_label.setVisible(self.test_in_progress)</span><br><span class="line">        self.progress_bar.setVisible(self.test_in_progress)</span><br><span class="line"></span><br><span class="line">        self.cancel_button.setVisible(self.test_in_progress)</span><br><span class="line">        self.progress_bar_button.setHidden(self.test_in_progress)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_progress_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.test_in_progress:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        number_of_operation = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        self.progress_bar.setRange(<span class="number">0</span>, number_of_operation)</span><br><span class="line">        self.progress_bar.setValue(<span class="number">0</span>)</span><br><span class="line">        self.progress_bar_label.setText(<span class="string">&quot;Operation Progress&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.test_in_progress = <span class="literal">True</span></span><br><span class="line">        self.update_visibility()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, number_of_operation + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.test_in_progress:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            self.progress_bar_label.setText(<span class="string">&quot;Processing operation: &#123;0&#125; (of &#123;1&#125;)&quot;</span>.<span class="built_in">format</span>(i, number_of_operation))</span><br><span class="line">            self.progress_bar.setValue(i)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">            QtCore.QCoreApplication.processEvents()</span><br><span class="line"></span><br><span class="line">        self.test_in_progress = <span class="literal">False</span></span><br><span class="line">        self.update_visibility()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cancel_progress_test</span>(<span class="params">self</span>):</span><br><span class="line">        self.test_in_progress = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = ProgressTestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="oQ0bx"></a></p><h1 id="QWidget-vs-QDialog"><a href="#QWidget-vs-QDialog" class="headerlink" title="QWidget vs QDialog"></a>QWidget vs QDialog</h1><p><a name="GiDDj"></a></p><h2 id="QWidget与QDialog的显示区别"><a href="#QWidget与QDialog的显示区别" class="headerlink" title="QWidget与QDialog的显示区别"></a>QWidget与QDialog的显示区别</h2><p>首先一个区别就是这两个<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662026474082-19caa88c-f472-4130-9f16-c0d88eee7657.png#averageHue=%23494949&clientId=u283bb055-7ea9-4&from=paste&height=337&id=u7f86f38f&originHeight=337&originWidth=918&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45973&status=done&style=none&taskId=ub15c8f00-9cf4-4090-ae90-0b144a8e8c6&title=&width=918" alt="image.png"><br />但是如果想要使用QWidget窗口的话可能会出现窗口不能独立显示出画面中，可能会内嵌到maya主窗口中，要想使用QWidget需要解决这个问题。<br />导致QWidget窗口内嵌到maya主窗口中的原因是因为之前都一直设置的将maya主窗口设置为我们的工具UI的parent，因此QWidget会内嵌到maya主窗口中。<br />要想解决QWidget窗口内嵌到maya主窗口，这里给出一个QWidget的案例<br />主要解决代码为：self.setWindowFlags(QtCore.Qt.WindowType.Window)<br /><strong>这行代码也可以直接用在QDialog的案例上面，可以直接将QDialog中的窗口类型改为Window。使QDialog窗口也能够显示最小化最大化窗口按钮</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QWidget):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Window Test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.ok_button = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        self.ok_button.setMinimumWidth(<span class="number">80</span>)</span><br><span class="line">        self.cancel_button = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line">        self.cancel_button.setMinimumWidth(<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.ok_button)</span><br><span class="line">        button_layout.addWidget(self.cancel_button)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br></pre></td></tr></table></figure><p><a name="hAiut"></a></p><h1 id="添加图片（QImage，QPixmap）"><a href="#添加图片（QImage，QPixmap）" class="headerlink" title="添加图片（QImage，QPixmap）"></a>添加图片（QImage，QPixmap）</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662358835263-488379c3-ddef-4112-9de1-9efe02044a60.png#averageHue=%23ceb079&clientId=u4f2d97de-80f8-4&from=paste&height=259&id=u9f6dd67f&originHeight=259&originWidth=619&originalType=binary&ratio=1&rotation=0&showTitle=false&size=112997&status=done&style=none&taskId=u3f249d07-3316-4b17-8bfe-078053fe98f&title=&width=619" alt="image.png">左边是使用平滑模式，右边没有使用。<br />image &#x3D; image.scaled(280, 100, QtCore.Qt.IgnoreAspectRatio, QtCore.Qt.SmoothTransformation)  # 使用平滑模式，使缩小图片时不会丢失细节。<br />QPushButton 使用setIcon方法<br />QLabel 使用setPixmap方法<br />设置pixmap对象时需要为pixmap指定一个image对象，调整图片就调整image。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    FILE_FILTERS = <span class="string">&quot;Maya(*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)&quot;</span>  <span class="comment"># 全部的过滤项</span></span><br><span class="line"></span><br><span class="line">    selected_filter = <span class="string">&quot;Maya (*.ma *.mb)&quot;</span>  <span class="comment"># 记录选择的过滤项，每次更改过滤项的同时会更改这个全局变量的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Open/Import/Reference&#x27;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.create_title_label()</span><br><span class="line"></span><br><span class="line">        self.filepath_le = QtWidgets.QLineEdit()</span><br><span class="line">        self.select_file_path_btn = QtWidgets.QPushButton()</span><br><span class="line">        self.select_file_path_btn.setIcon(QtGui.QIcon(<span class="string">&#x27;:fileOpen.png&#x27;</span>))</span><br><span class="line">        self.select_file_path_btn.setToolTip(<span class="string">&quot;select File&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.open_rb = QtWidgets.QRadioButton(<span class="string">&quot;Open&quot;</span>)</span><br><span class="line">        self.open_rb.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.import_rb = QtWidgets.QRadioButton(<span class="string">&quot;Import&quot;</span>)</span><br><span class="line">        self.reference_rb = QtWidgets.QRadioButton(<span class="string">&quot;Reference&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.force_cb = QtWidgets.QCheckBox(<span class="string">&quot;Force&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.apply_btn = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_title_label</span>(<span class="params">self</span>):</span><br><span class="line">        image_path = <span class="string">&quot;D:/ZhangRuiChen/image/test_image.jpg&quot;</span></span><br><span class="line">        image = QtGui.QImage(image_path)</span><br><span class="line">        image = image.scaled(<span class="number">280</span>, <span class="number">100</span>, QtCore.Qt.IgnoreAspectRatio, QtCore.Qt.SmoothTransformation)</span><br><span class="line"></span><br><span class="line">        pixmap = QtGui.QPixmap()</span><br><span class="line">        pixmap.convertFromImage(image)</span><br><span class="line"></span><br><span class="line">        self.title_label = QtWidgets.QLabel(<span class="string">&quot;My Awesome Utility&quot;</span>)</span><br><span class="line">        self.title_label.setPixmap(pixmap)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        file_path_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        file_path_layout.addWidget(self.filepath_le)</span><br><span class="line">        file_path_layout.addWidget(self.select_file_path_btn)</span><br><span class="line"></span><br><span class="line">        radio_btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        radio_btn_layout.addWidget(self.open_rb)</span><br><span class="line">        radio_btn_layout.addWidget(self.import_rb)</span><br><span class="line">        radio_btn_layout.addWidget(self.reference_rb)</span><br><span class="line"></span><br><span class="line">        forme_layout = QtWidgets.QFormLayout()</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;File&quot;</span>, file_path_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, radio_btn_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, self.force_cb)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.apply_btn)</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.addWidget(self.title_label)</span><br><span class="line">        main_layout.addLayout(forme_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.select_file_path_btn.clicked.connect(self.show_file_select_dialog)</span><br><span class="line"></span><br><span class="line">        self.open_rb.toggled.connect(self.update_force_visibility)</span><br><span class="line"></span><br><span class="line">        self.apply_btn.clicked.connect(self.load_file)</span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_file_select_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        file_path, self.selected_filter = QtWidgets.QFileDialog.getOpenFileName(self, <span class="string">&quot;Select File&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                                                self.FILE_FILTERS, self.selected_filter)</span><br><span class="line">        <span class="keyword">if</span> file_path:</span><br><span class="line">            self.filepath_le.setText(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_force_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.force_cb.setVisible(checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = self.filepath_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)  <span class="comment"># 得到文件的信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.exists():  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.open_rb.isChecked():</span><br><span class="line">            self.open_file(file_path)</span><br><span class="line">        <span class="keyword">if</span> self.import_rb.isChecked():</span><br><span class="line">            self.import_file(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.reference_file(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        force = self.force_cb.isChecked()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> cmds.file(q=<span class="literal">True</span>, modified=<span class="literal">True</span>):</span><br><span class="line">            result = QtWidgets.QMessageBox.question(self, <span class="string">&quot;Modified&quot;</span>, <span class="string">&quot;Current scene has unsaved changes. Continue?&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result == QtWidgets.QMessageBox.StandardButton.Yes:</span><br><span class="line">                force = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        cmds.file(file_path, <span class="built_in">open</span>=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>, force=force)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, i=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reference_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, r=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="jN8Ha"></a></p><h1 id="遍历文件夹列出树结构"><a href="#遍历文件夹列出树结构" class="headerlink" title="遍历文件夹列出树结构"></a>遍历文件夹列出树结构</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671160357979-d432cf28-a6dd-4089-a185-1fca578d8897.png#averageHue=%23484847&clientId=u0295db91-fe64-4&from=paste&height=309&id=u14a78c68&originHeight=278&originWidth=262&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6045&status=done&style=none&taskId=u0d81fb05-71d8-41c8-817f-2df86fdee7e&title=&width=291.11111882292215" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 以树状结构显示指定路径下的所有内容，并且可以通过右键打开资源管理器并进入路径</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileExplorerDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;File Explorer&quot;</span></span><br><span class="line"></span><br><span class="line">    DIRECTOR_PATH = <span class="string">&quot;&#123;0&#125;scripts&quot;</span>.<span class="built_in">format</span>(cmds.internalVar(userAppDir=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(FileExplorerDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            self.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        self.create_actions()</span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">        self.tree_wdg.setContextMenuPolicy(QtCore.Qt.CustomContextMenu) <span class="comment"># 使Context菜单只针对tree_wdg</span></span><br><span class="line">        self.tree_wdg.customContextMenuRequested.connect(self.show_context_menu) <span class="comment"># 使Context菜单为自定义的并给出菜单</span></span><br><span class="line"></span><br><span class="line">        self.refresh_list()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        self.show_in_folder_action = QtWidgets.QAction(<span class="string">&quot;Show in Folder&quot;</span>, self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.path_label = QtWidgets.QLabel(self.DIRECTOR_PATH)</span><br><span class="line"></span><br><span class="line">        self.tree_wdg = QtWidgets.QTreeWidget()</span><br><span class="line">        self.tree_wdg.setHeaderHidden(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 设置左上右下的边距</span></span><br><span class="line">        main_layout.addWidget(self.path_label)</span><br><span class="line">        main_layout.addWidget(self.tree_wdg)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.close_btn.clicked.connect(self.close)</span><br><span class="line">        self.show_in_folder_action.triggered.connect(self.show_in_folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 显示文件树状结构 &quot;&quot;&quot;</span></span><br><span class="line">        self.tree_wdg.clear()</span><br><span class="line"></span><br><span class="line">        self.add_children(<span class="literal">None</span>, self.DIRECTOR_PATH)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_children</span>(<span class="params">self, parent_item, dir_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加所有的子节点 &quot;&quot;&quot;</span></span><br><span class="line">        directory = QtCore.QDir(dir_path) <span class="comment"># 创建目录为dir_path的QDir对象</span></span><br><span class="line">        <span class="comment"># entryList作用是得到目录下的所有文件的字符串列表，参数第一个是设置过滤器，这里是要所有项并且没有.和..   第二个是设置排列，目录在最上方并且不区分大小写</span></span><br><span class="line">        files_in_directory = directory.entryList(QtCore.QDir.NoDotAndDotDot | QtCore.QDir.AllEntries, QtCore.QDir.DirsFirst | QtCore.QDir.IgnoreCase) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> files_in_directory:</span><br><span class="line">            self.add_child(parent_item, dir_path, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_child</span>(<span class="params">self, parent_item, dir_path, file_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 实现添加子节点 &quot;&quot;&quot;</span></span><br><span class="line">        file_path = <span class="string">&quot;&#123;0&#125;/&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(dir_path, file_name)</span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file_info.suffix().lower() == <span class="string">&quot;pyc&quot;</span>: <span class="comment"># 过滤后缀为pyc的文件</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        item = QtWidgets.QTreeWidgetItem(parent_item, [file_name])</span><br><span class="line">        item.setData(<span class="number">0</span>, QtCore.Qt.UserRole, file_path) <span class="comment"># QtCore.Qt.UserRole可以理解为序号0,一个item可以拥有多个数据，因此可以通过QtCore.Qt.UserRole，QtCore.Qt.UserRole+1来设置数据的序号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file_info.isDir():</span><br><span class="line">            <span class="string">&quot;&quot;&quot; 如果是文件夹就用add_children方法 &quot;&quot;&quot;</span></span><br><span class="line">            self.add_children(item, file_info.absoluteFilePath())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parent_item:</span><br><span class="line">            <span class="string">&quot;&quot;&quot; 将item添加到最顶层树结构中 &quot;&quot;&quot;</span></span><br><span class="line">            self.tree_wdg.addTopLevelItem(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, pos</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 自定义菜单 &quot;&quot;&quot;</span></span><br><span class="line">        item = self.tree_wdg.itemAt(pos) <span class="comment"># 鼠标位置处的item</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> item:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        file_path = item.data(<span class="number">0</span>, QtCore.Qt.UserRole) <span class="comment"># 得到item里的数据</span></span><br><span class="line">        self.show_in_folder_action.setData(file_path) <span class="comment"># 设置action对应的数据</span></span><br><span class="line"></span><br><span class="line">        context_menu = QtWidgets.QMenu() <span class="comment"># 创建一个菜单</span></span><br><span class="line">        context_menu.addAction(self.show_in_folder_action) <span class="comment"># 将action添加到菜单下</span></span><br><span class="line">        context_menu.exec_(self.tree_wdg.mapToGlobal(pos)) <span class="comment"># 在鼠标位置处右键显示菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_in_folder</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = self.show_in_folder_action.data()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cmds.about(windows=<span class="literal">True</span>): <span class="comment"># 如果是windows系统就使用windows系统的方法打开资源管理器</span></span><br><span class="line">            <span class="keyword">if</span> self.open_in_explorer(file_path): </span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>): <span class="comment"># 如果是mac系统就使用mac系统的方法打开资源管理器</span></span><br><span class="line">            <span class="keyword">if</span> self.open_in_finder(file_path):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 两个方法都不可以的情况下，使用Qt自带的方法打开，缺点是不能自动选择对应的文件</span></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)</span><br><span class="line">        <span class="keyword">if</span> file_info.isDir(): <span class="comment"># 如果是路径是目录就直接使用</span></span><br><span class="line">            QtGui.QDesktopServices.openUrl(file_path)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 如果是文件就通过file_info.path方法得到目录路径</span></span><br><span class="line">            QtGui.QDesktopServices.openUrl(file_info.path())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_in_explorer</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Windows打开资源管理器 &quot;&quot;&quot;</span></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.isDir(): <span class="comment"># 如果不是目录就选择路径对应的文件</span></span><br><span class="line">            args.append(<span class="string">&quot;/select,&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        args.append(QtCore.QDir.toNativeSeparators(file_path))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> QtCore.QProcess.startDetached(<span class="string">&quot;explorer&quot;</span>, args):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_in_finder</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        args = []</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;tell application &quot;Finder&quot;&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;activate&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;select POSIX file &quot;&#123;0&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;end tell&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;return&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(QtCore.QPrecess.startDetached(<span class="string">&quot;/usr/bin/osascript&quot;</span>, args)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        my_dialog.close()  </span><br><span class="line">        my_dialog.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    my_dialog = FileExplorerDialog()</span><br><span class="line">    my_dialog.show()</span><br><span class="line">    </span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><a name="NIYFB"></a></p><h1 id="灯光面板"><a href="#灯光面板" class="headerlink" title="灯光面板"></a>灯光面板</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1672827738289-ccf9c154-f02e-4b86-9323-dde79302d9bb.png#averageHue=%23595958&clientId=u1b81c09d-af2e-4&from=paste&height=324&id=u58ec6abd&originHeight=292&originWidth=502&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13895&status=done&style=none&taskId=uf8b0edb7-09fb-4b48-a1c4-4ca5add6f0d&title=&width=557.7777925538431" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 灯光面板举例</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomColorButton</span>(QtWidgets.QWidget): <span class="comment"># 自定义颜色按钮</span></span><br><span class="line"></span><br><span class="line">    color_changed = QtCore.Signal(QtGui.QColor) <span class="comment"># 自定义信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color=QtCore.Qt.white, parent=<span class="literal">None</span></span>): <span class="comment"># 表示可以类接收一个颜色参数,默认是白色</span></span><br><span class="line">        <span class="built_in">super</span>(CustomColorButton, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setObjectName(<span class="string">&quot;CustomColorButton&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.create_control()</span><br><span class="line"></span><br><span class="line">        self.set_size(<span class="number">50</span>, <span class="number">14</span>)</span><br><span class="line">        self.set_color(color) <span class="comment"># 设置初始颜色,如果对象有传过来颜色设置则为对象的颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 1. 创建colorSliderGrp &quot;&quot;&quot;</span></span><br><span class="line">        window = cmds.window()</span><br><span class="line">        self._name = cmds.colorSliderGrp()</span><br><span class="line">        <span class="comment"># print(&quot;original name: &#123;0&#125;&quot;.format(self._name))</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 2. 找到colorSliderGrp控件 &quot;&quot;&quot;</span></span><br><span class="line">        color_slider_obj = omui.MQtUtil.findControl(self._name) <span class="comment"># color_slider_obj是一个c++的形式</span></span><br><span class="line">        <span class="keyword">if</span> color_slider_obj:</span><br><span class="line">            self._color_slider_widget = wrapInstance(long(color_slider_obj), QtWidgets.QWidget)</span><br><span class="line">        </span><br><span class="line">            <span class="string">&quot;&quot;&quot; 3. 将colorSliderGrp控件的父级设置为这个自定义控件 &quot;&quot;&quot;</span></span><br><span class="line">            main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">            main_layout.setObjectName(<span class="string">&quot;main_layout&quot;</span>)</span><br><span class="line">            main_layout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            main_layout.addWidget(self._color_slider_widget)</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;&quot;&quot; 4. 更新colorSliderGrp的control name (之前是属于maya的) &quot;&quot;&quot;</span></span><br><span class="line">            self._name = self._color_slider_widget.objectName()</span><br><span class="line">            <span class="comment"># print(&quot;new name: &#123;0&#125;&quot;.format(self._name))</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;&quot;&quot; 5. 识别或存储 colorSliderGrp的子控件(在必要的时候可以隐藏它) &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># children = self._color_slider_widget.children()</span></span><br><span class="line">            <span class="comment"># for child in children:</span></span><br><span class="line">            <span class="comment">#     print(child)</span></span><br><span class="line">            <span class="comment">#     print(child.objectName())</span></span><br><span class="line">            <span class="comment"># print(&quot;---&quot;)</span></span><br><span class="line"></span><br><span class="line">            self._slider_widget = self._color_slider_widget.findChild(QtWidgets.QWidget, <span class="string">&quot;slider&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> self._slider_widget:</span><br><span class="line">                self._slider_widget.hide()</span><br><span class="line">            </span><br><span class="line">            self._color_widget = self._color_slider_widget.findChild(QtWidgets.QWidget, <span class="string">&quot;port&quot;</span>)</span><br><span class="line"></span><br><span class="line">            cmds.colorSliderGrp(self._name, e=<span class="literal">True</span>, changeCommand=partial(self.on_color_changed))</span><br><span class="line"></span><br><span class="line">        cmds.deleteUI(window, window=<span class="literal">True</span>)</span><br><span class="line">          </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_size</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        self._color_slider_widget.setFixedWidth(width)</span><br><span class="line">        self._color_widget.setFixedHeight(height)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_color</span>(<span class="params">self, color</span>):</span><br><span class="line">        color = QtGui.QColor(color)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> color != self.get_color():</span><br><span class="line">            cmds.colorSliderGrp(self._name, e=<span class="literal">True</span>, rgbValue=(color.redF(), color.greenF(), color.blueF())) <span class="comment"># F代表以浮点数表示</span></span><br><span class="line">            self.on_color_changed()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">self</span>):</span><br><span class="line">        color = cmds.colorSliderGrp(self._name, q=<span class="literal">True</span>, rgbValue=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        color = QtGui.QColor(color[<span class="number">0</span>] *<span class="number">255</span>, color[<span class="number">1</span>] * <span class="number">255</span>, color[<span class="number">2</span>] * <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">return</span> color</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_color_changed</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.color_changed.emit(self.get_color())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightItem</span>(QtWidgets.QWidget):</span><br><span class="line">    <span class="comment"># 自定义灯光控件，一个灯光对应一个控件</span></span><br><span class="line"></span><br><span class="line">    SUPPORTED_TYPES = [<span class="string">&quot;ambientLight&quot;</span>, <span class="string">&quot;directionalLight&quot;</span>, <span class="string">&quot;pointLight&quot;</span>, <span class="string">&quot;spotLight&quot;</span>, <span class="string">&quot;areaLight&quot;</span>]</span><br><span class="line">    EMIT_TYPES = [<span class="string">&quot;directionalLight&quot;</span>, <span class="string">&quot;pointLight&quot;</span>, <span class="string">&quot;spotLight&quot;</span>, <span class="string">&quot;areaLight&quot;</span>]</span><br><span class="line"></span><br><span class="line">    node_deleted = QtCore.Signal(<span class="built_in">str</span>) <span class="comment"># 自定义节点删除时的信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shape_name, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(LightItem, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setFixedHeight(<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">        self.shape_name = shape_name <span class="comment"># 灯光的shape名字</span></span><br><span class="line">        self.uuid = cmds.ls(shape_name, uuid=<span class="literal">True</span>) <span class="comment"># 灯光的uuid</span></span><br><span class="line"></span><br><span class="line">        self.script_jobs = []</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">        self.create_script_jobs()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建控件 &quot;&quot;&quot;</span></span><br><span class="line">        self.light_type_btn = QtWidgets.QPushButton()</span><br><span class="line">        self.light_type_btn.setFixedSize(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">        self.light_type_btn.setFlat(<span class="literal">True</span>) <span class="comment"># 设置按钮的显示形式</span></span><br><span class="line"></span><br><span class="line">        self.visiblity_cb = QtWidgets.QCheckBox()</span><br><span class="line">        </span><br><span class="line">        self.transform_name_label = QtWidgets.QLabel(<span class="string">&quot;placeholder&quot;</span>)</span><br><span class="line">        self.transform_name_label.setFixedWidth(<span class="number">120</span>)</span><br><span class="line">        self.transform_name_label.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        light_type = self.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> self.SUPPORTED_TYPES:</span><br><span class="line">            self.intensity_dsb = QtWidgets.QDoubleSpinBox()</span><br><span class="line">            self.intensity_dsb.setRange(<span class="number">0.0</span>, <span class="number">100.0</span>)</span><br><span class="line">            self.intensity_dsb.setDecimals(<span class="number">3</span>) <span class="comment"># 设置数值到小数点后三位</span></span><br><span class="line">            self.intensity_dsb.setSingleStep(<span class="number">0.1</span>)</span><br><span class="line">            self.intensity_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons) <span class="comment"># 设置spinbox没有上下箭头</span></span><br><span class="line"></span><br><span class="line">            self.color_btn = CustomColorButton()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> self.EMIT_TYPES:</span><br><span class="line">                self.emit_diffuse_cb = QtWidgets.QCheckBox()</span><br><span class="line">                self.emit_specular_cb = QtWidgets.QCheckBox()</span><br><span class="line">        </span><br><span class="line">        self.update_values()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建布局 &quot;&quot;&quot;</span></span><br><span class="line">        main_layout = QtWidgets.QHBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        main_layout.addWidget(self.light_type_btn)</span><br><span class="line">        main_layout.addWidget(self.visiblity_cb)</span><br><span class="line">        main_layout.addWidget(self.transform_name_label)</span><br><span class="line"></span><br><span class="line">        light_type = self.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> self.SUPPORTED_TYPES:</span><br><span class="line">            main_layout.addWidget(self.intensity_dsb)</span><br><span class="line">            main_layout.addSpacing(<span class="number">10</span>)</span><br><span class="line">            main_layout.addWidget(self.color_btn)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> self.EMIT_TYPES:</span><br><span class="line">                main_layout.addSpacing(<span class="number">34</span>)</span><br><span class="line">                main_layout.addWidget(self.emit_diffuse_cb)</span><br><span class="line">                main_layout.addSpacing(<span class="number">50</span>)</span><br><span class="line">                main_layout.addWidget(self.emit_specular_cb)</span><br><span class="line"></span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建信号与槽的连接 &quot;&quot;&quot;</span></span><br><span class="line">        self.light_type_btn.clicked.connect(self.select_light)</span><br><span class="line">        self.visiblity_cb.toggled.connect(self.set_visibility)</span><br><span class="line">        </span><br><span class="line">        light_type = self.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> self.SUPPORTED_TYPES:</span><br><span class="line">            self.intensity_dsb.editingFinished.connect(self.on_intensity_changed)</span><br><span class="line">            self.color_btn.color_changed.connect(self.set_color)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> self.EMIT_TYPES:</span><br><span class="line">                self.emit_diffuse_cb.toggled.connect(self.set_emit_diffuse)</span><br><span class="line">                self.emit_specular_cb.toggled.connect(self.set_emit_specular)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_values</span>(<span class="params">self</span>):</span><br><span class="line">        self.light_type_btn.setIcon(self.get_light_type_icon())</span><br><span class="line">        self.visiblity_cb.setChecked(self.is_visible())</span><br><span class="line">        self.transform_name_label.setText(self.get_transform_name())</span><br><span class="line"></span><br><span class="line">        light_type = self.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> self.SUPPORTED_TYPES:</span><br><span class="line">            self.intensity_dsb.setValue(self.get_intensity())</span><br><span class="line">            self.color_btn.set_color(self.get_color())</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> self.EMIT_TYPES:</span><br><span class="line">                self.emit_diffuse_cb.setChecked(self.emits_diffuse())</span><br><span class="line">                self.emit_specular_cb.setChecked(self.emits_specular())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_transform_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.listRelatives(self.shape_name, parent=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_attribute_value</span>(<span class="params">self, name, attribute</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.getAttr(<span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, attribute))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_attribute_value</span>(<span class="params">self, name, attribute,*args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果设置颜色或者属性的值与当前值相同就不进行设置，避免script job产生的重复设置属性的bug</span></span><br><span class="line">        <span class="keyword">if</span> attribute == <span class="string">&quot;color&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.get_color() == self.color_btn.get_color():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> args[<span class="number">0</span>] == self.get_attribute_value(name, attribute):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        attr_name = <span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, attribute)</span><br><span class="line">        cmds.setAttr(attr_name, *args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_light_type</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.objectType(self.shape_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_light_type_icon</span>(<span class="params">self</span>):</span><br><span class="line">        light_type = self.get_light_type()</span><br><span class="line"></span><br><span class="line">        icon = QtGui.QIcon()</span><br><span class="line">        <span class="keyword">if</span> light_type == <span class="string">&quot;ambientLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:ambientLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> light_type == <span class="string">&quot;directionalLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:directionalLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> light_type == <span class="string">&quot;pointLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:pointLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> light_type == <span class="string">&quot;spotLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:spotLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:Light.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> icon</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_visible</span>(<span class="params">self</span>):</span><br><span class="line">        transform_name = self.get_transform_name()</span><br><span class="line">        <span class="keyword">return</span> self.get_attribute_value(transform_name, <span class="string">&quot;visibility&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_intensity</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_attribute_value(self.shape_name, <span class="string">&quot;intensity&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">self</span>):</span><br><span class="line">        temp_color = self.get_attribute_value(self.shape_name, <span class="string">&quot;color&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> QtGui.QColor(temp_color[<span class="number">0</span>] * <span class="number">255</span>, temp_color[<span class="number">1</span>] * <span class="number">255</span>, temp_color[<span class="number">2</span>] * <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emits_diffuse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_attribute_value(self.shape_name, <span class="string">&quot;emitDiffuse&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emits_specular</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_attribute_value(self.shape_name, <span class="string">&quot;emitSpecular&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_light</span>(<span class="params">self</span>):</span><br><span class="line">        cmds.select(self.get_transform_name())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.set_attribute_value(self.get_transform_name(), <span class="string">&quot;visibility&quot;</span>, checked)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_intensity_changed</span>(<span class="params">self</span>):</span><br><span class="line">        self.set_attribute_value(self.shape_name, <span class="string">&quot;intensity&quot;</span>, self.intensity_dsb.value())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_color</span>(<span class="params">self, color</span>):</span><br><span class="line">        self.set_attribute_value(self.shape_name, <span class="string">&quot;color&quot;</span>, color.redF(), color.greenF(), color.blueF())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_emit_diffuse</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.set_attribute_value(self.shape_name, <span class="string">&quot;emitDiffuse&quot;</span>, checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_emit_specular</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.set_attribute_value(self.shape_name, <span class="string">&quot;emitSpecular&quot;</span>, checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_node_deleted</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当节点删除时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.node_deleted.emit(self.shape_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_name_changed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当名字修改时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.shape_name = cmds.ls(self.uuid)[<span class="number">0</span>]</span><br><span class="line">        self.update_values()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 为每个灯光都创建script jobs &quot;&quot;&quot;</span></span><br><span class="line">        self.delete_script_jobs()</span><br><span class="line"></span><br><span class="line">        self.add_attribute_change_script_job(self.get_transform_name(), <span class="string">&quot;visibility&quot;</span>)</span><br><span class="line">        light_type = self.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> self.SUPPORTED_TYPES:</span><br><span class="line">            self.add_attribute_change_script_job(self.shape_name, <span class="string">&quot;color&quot;</span>)</span><br><span class="line">            self.add_attribute_change_script_job(self.shape_name, <span class="string">&quot;intensity&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> self.EMIT_TYPES:</span><br><span class="line">                self.add_attribute_change_script_job(self.shape_name, <span class="string">&quot;emitDiffuse&quot;</span>)</span><br><span class="line">                self.add_attribute_change_script_job(self.shape_name, <span class="string">&quot;emitSpecular&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.script_jobs.append(cmds.scriptJob(nodeDeleted=(self.shape_name, partial(self.on_node_deleted))))</span><br><span class="line">        self.script_jobs.append(cmds.scriptJob(nodeNameChanged=(self.shape_name, partial(self.on_name_changed))))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_attribute_change_script_job</span>(<span class="params">self, name, attribute</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加某一节点的某一属性改变时的script_job时使用的方法 &quot;&quot;&quot;</span></span><br><span class="line">        self.script_jobs.append(cmds.scriptJob(attributeChange=(<span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, attribute), partial(self.update_values))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> job_number <span class="keyword">in</span> self.script_jobs:</span><br><span class="line">            cmds.evalDeferred(<span class="string">&quot;if cmds.scriptJob(exists=&#123;0&#125;):\tcmds.scriptJob(kill=&#123;0&#125;, force=True)&quot;</span>.<span class="built_in">format</span>(job_number))</span><br><span class="line">        </span><br><span class="line">        self.script_jobs = []</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightPanel</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Light Panel&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(LightPanel, self).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        self.setMinimumSize(<span class="number">500</span>, <span class="number">260</span>)</span><br><span class="line">        self.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line">        self.light_items = []</span><br><span class="line">        self.script_jobs = []</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        self.refreshButton = QtWidgets.QPushButton(<span class="string">&quot;Refresh Lights&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        header_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        header_layout.addSpacing(<span class="number">100</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Light&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">50</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Intensity&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">44</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Color&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">24</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Emit Diffuse&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">10</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Emit Spec&quot;</span>))</span><br><span class="line">        header_layout.addStretch()</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.refreshButton)</span><br><span class="line"></span><br><span class="line">        light_list_wdg = QtWidgets.QWidget()</span><br><span class="line"></span><br><span class="line">        self.light_layout = QtWidgets.QVBoxLayout(light_list_wdg) <span class="comment"># light_list_wdg在light_layout下</span></span><br><span class="line">        self.light_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.light_layout.addSpacing(<span class="number">3</span>)</span><br><span class="line">        self.light_layout.setAlignment(QtCore.Qt.AlignTop)</span><br><span class="line"></span><br><span class="line">        light_list_scroll_area = QtWidgets.QScrollArea()</span><br><span class="line">        light_list_scroll_area.setWidgetResizable(<span class="literal">True</span>)</span><br><span class="line">        light_list_scroll_area.setWidget(light_list_wdg) <span class="comment"># scroll_area下有light_list_wdg</span></span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addLayout(header_layout)</span><br><span class="line">        main_layout.addWidget(light_list_scroll_area) <span class="comment"># 主布局下有个scroll_area</span></span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 信号与槽的连接 &quot;&quot;&quot;</span></span><br><span class="line">        self.refreshButton.clicked.connect(self.refresh_lights)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_lights_in_scene</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 得到场景中所有灯光 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.ls(typ=<span class="string">&quot;light&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_lights</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 刷新灯光面板 &quot;&quot;&quot;</span></span><br><span class="line">        self.clear_lights()</span><br><span class="line"></span><br><span class="line">        scene_lights = self.get_lights_in_scene()</span><br><span class="line">        <span class="keyword">for</span> light <span class="keyword">in</span> scene_lights:</span><br><span class="line">            light_item = LightItem(light)</span><br><span class="line">            light_item.node_deleted.connect(self.on_node_deleted) <span class="comment"># 自定义信号node_deleted发送数据时传给on_node_deleted函数</span></span><br><span class="line"></span><br><span class="line">            self.light_layout.addWidget(light_item)</span><br><span class="line">            self.light_items.append(light_item)</span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_lights</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 清空灯光面板 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> light <span class="keyword">in</span> self.light_items:</span><br><span class="line">            light.delete_script_jobs()</span><br><span class="line"></span><br><span class="line">        self.light_items = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> self.light_layout.count() &gt; <span class="number">0</span>:</span><br><span class="line">            light_item = self.light_layout.takeAt(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> light_item.widget():</span><br><span class="line">                light_item.widget().deleteLater()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建script jobs &quot;&quot;&quot;</span></span><br><span class="line">        self.script_jobs.append(cmds.scriptJob(event=[<span class="string">&quot;DagObjectCreated&quot;</span>, partial(self.on_dag_object_created)])) <span class="comment"># 当创建dag物体时执行on_dag_object_created函数</span></span><br><span class="line">        self.script_jobs.append(cmds.scriptJob(event=[<span class="string">&quot;Undo&quot;</span>, partial(self.on_undo)])) <span class="comment"># 当ctrl+z时执行on_undo函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 删除script jobs &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> job_number <span class="keyword">in</span> self.script_jobs:</span><br><span class="line">            cmds.scriptJob(kill=job_number)</span><br><span class="line"></span><br><span class="line">        self.script_jobs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_dag_object_created</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当dag中出现新物体时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cmds.ls(typ=<span class="string">&quot;light&quot;</span>)) != <span class="built_in">len</span>(self.light_items):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;New light created...&quot;</span>)</span><br><span class="line">            self.refresh_lights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; ctrl+z时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cmds.ls(typ=<span class="string">&quot;light&quot;</span>)) != <span class="built_in">len</span>(self.light_items):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Undo light created...&quot;</span>)</span><br><span class="line">            self.refresh_lights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_node_deleted</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 节点删除时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.refresh_lights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当打开窗口时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.refresh_lights()</span><br><span class="line">        self.create_script_jobs()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当关闭窗口时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.clear_lights()</span><br><span class="line">        self.delete_script_jobs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    cmds.file(<span class="string">&quot;D:/ZhangRuiChen/Pyside2ForMaya/light_test.ma&quot;</span>,o=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        light_panel_dialog.close()</span><br><span class="line">        light_panel_dialog.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    light_panel_dialog = LightPanel()</span><br><span class="line">    light_panel_dialog.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ZzJ9v"></a></p><h2 id="scriptJob"><a href="#scriptJob" class="headerlink" title="scriptJob"></a>scriptJob</h2><p>不知道scriptJob的话在这里看<a href="https://www.yuque.com/quanmianxiaokangdelouwangzhiyu/pk4uzy/ucqe3u#Rk562">https://www.yuque.com/quanmianxiaokangdelouwangzhiyu/pk4uzy/ucqe3u#Rk562</a><br />注册scriptJob：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671697160970-4d903cf0-97ad-438b-bd77-a3ad27d538c2.png#averageHue=%2334302c&clientId=ub7d727ca-d9ed-4&from=paste&height=382&id=u618a8281&originHeight=344&originWidth=1208&originalType=binary&ratio=1&rotation=0&showTitle=false&size=174235&status=done&style=none&taskId=udb8d8554-33f9-4a7f-9192-67c2b7e20eb&title=&width=1342.2222577789694" alt="image.png"><br />取消注册scriptJob:<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671697289737-9aca734a-76ed-46bf-820c-849acdf948ba.png#averageHue=%23291d1d&clientId=ub7d727ca-d9ed-4&from=paste&height=146&id=u7a1ba4a6&originHeight=131&originWidth=885&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49637&status=done&style=none&taskId=u8326d511-f58c-4ccb-be1f-125f8ed025a&title=&width=983.3333593827714" alt="image.png"><br><a name="TgmeX"></a></p><h1 id="Docking"><a href="#Docking" class="headerlink" title="Docking"></a>Docking</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1676368412774-62e89b75-050f-4042-ae72-172252a91f7c.png#averageHue=%230b0b0b&clientId=u0ed65455-fe7e-4&from=paste&height=575&id=u9137e5aa&originHeight=575&originWidth=1321&originalType=binary&ratio=1&rotation=0&showTitle=false&size=195907&status=done&style=none&taskId=u361a55fc-af62-47f2-bdfc-d0f90735912&title=&width=1321" alt="image.png"><br><a name="rVb0T"></a></p><h2 id="maya的workspaces设置存放的位置"><a href="#maya的workspaces设置存放的位置" class="headerlink" title="maya的workspaces设置存放的位置"></a>maya的workspaces设置存放的位置</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1676428725500-72ba1326-f7bc-45b8-8e11-030d22cc2206.png#averageHue=%23f9f9f9&clientId=u0ed65455-fe7e-4&from=paste&height=174&id=ub49c11ba&originHeight=174&originWidth=537&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48522&status=done&style=none&taskId=u0996483e-911b-4ff2-90b3-113dba0bc9b&title=&width=537" alt="image.png"><br><a name="Ooqxq"></a></p><h2 id="mayaMixin-py"><a href="#mayaMixin-py" class="headerlink" title="mayaMixin.py"></a>mayaMixin.py</h2><p>mayaMixin模块可以令我们更方便的创建可以停靠的窗口。<br />模块的路径为:C:\Program Files\Autodesk\Maya2018\Python\Lib\site-packages\maya\app\general\mayaMixin.py<br />其中模块使用的最重要的命令是cmds.workspaceControl<br />这里的会自动保存在工作区上面，关掉maya不会清除窗口内容。是有一个前置条件的，条件是这个模块是实实在在存在的文件，然后这个模块在maya的识别目录上面。<br />令其能够自动保存在工作区上面，实现的代码是：<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677225584722-63c8cec0-dea6-42fa-8dab-15951408b3b1.png#averageHue=%23ffffff&clientId=ueacdff51-fb88-4&from=paste&height=167&id=ua8a8de90&originHeight=150&originWidth=607&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=19623&status=done&style=none&taskId=ua8a9886e-c8f0-4d96-8f6b-4e390b8bc36&title=&width=674.4444623111211" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677225538425-50afbed0-ddf3-4d53-9d07-a61791ef937b.png#averageHue=%23ffffff&clientId=ueacdff51-fb88-4&from=paste&height=52&id=ub903c2e4&originHeight=47&originWidth=833&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=11152&status=done&style=none&taskId=u534c562f-94d8-47fb-bf23-516bfb8f0b8&title=&width=925.5555800744052" alt="image.png"><br /><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html">Help</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配合MayaQWidgetDockableMixin模块制作 可以停靠在maya界面上的参考</span></span><br><span class="line"><span class="comment"># 特点：会自动保存在工作区上面，关掉maya不会清除窗口内容</span></span><br><span class="line"><span class="comment"># 开发时需要注意的点：在dock状态下不方便调试，开发时要在非dock状态以便调试</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> getCppPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> maya.app.general.mayaMixin <span class="keyword">import</span> MayaQWidgetDockableMixin</span><br><span class="line"><span class="keyword">from</span> maya.OpenMayaUI <span class="keyword">import</span> MQtUtil</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="comment"># 多重继承中要把MayaQWidgetDockableMixin放在首位</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDockableButtonStatic</span>(MayaQWidgetDockableMixin, QtWidgets.QPushButton):</span><br><span class="line"></span><br><span class="line">    UI_NAME = <span class="string">&quot;MyDockableButtonStatic&quot;</span> <span class="comment"># 定义一个准确的UI_NAME使UI具有唯一性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyDockableButtonStatic, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setObjectName(self.UI_NAME)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;Dockable Window&quot;</span>)</span><br><span class="line">        self.setText(<span class="string">&quot;My Button&quot;</span>)</span><br><span class="line"></span><br><span class="line">        workspace_control_name = <span class="string">&quot;&#123;0&#125;WorkspaceControl&quot;</span>.<span class="built_in">format</span>(self.UI_NAME)</span><br><span class="line">        <span class="comment"># 设置父级为工作区</span></span><br><span class="line">        <span class="keyword">if</span> cmds.workspaceControl(workspace_control_name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>):</span><br><span class="line">            workspace_control_ptr = long(MQtUtil.findControl(workspace_control_name))</span><br><span class="line">            widget_ptr = long(getCppPointer(self)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            MQtUtil.addWidgetToMayaLayout(widget_ptr, workspace_control_ptr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> button <span class="keyword">and</span> button.parent():</span><br><span class="line">            workspace_control_name = button.parent().objectName()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cmds.window(workspace_control_name, exists=<span class="literal">True</span>):</span><br><span class="line">                cmds.deleteUI(workspace_control_name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    button = MyDockableButtonStatic()</span><br><span class="line"></span><br><span class="line">    ui_script = <span class="string">&quot;from dockable_button_example import MyDockableButtonStatic\nbutton = MyDockableButtonStatic()&quot;</span></span><br><span class="line">    button.show(dockable=<span class="literal">True</span>, uiScript=ui_script) <span class="comment"># 调用MayaQWidgetDockableMixin模块的show方法来使创建的窗口能够dock</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="OCpb5"></a></p><h2 id="workspace-control-py"><a href="#workspace-control-py" class="headerlink" title="workspace_control.py"></a>workspace_control.py</h2><p>workspaceControl的介绍:<br />创建和管理用于在允许将窗口停靠和堆叠在一起的布局中托管窗口的小部件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让UI成为workspaceControl的widget，这样就能够创建出可以dock的UI了</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span>  QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span>  QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> getCppPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkspaceControl</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 根据workspaceControl命令自定义的方便使用类 &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.widget = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, label, widget, ui_script=<span class="literal">None</span></span>):</span><br><span class="line">        </span><br><span class="line">        cmds.workspaceControl(self.name, label=label)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ui_script:</span><br><span class="line">            cmds.workspaceControl(self.name, e=<span class="literal">True</span>, uiScript=ui_script)</span><br><span class="line">        </span><br><span class="line">        self.add_widget_to_layout(widget)</span><br><span class="line">        self.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restore</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 恢复widget的显示 &quot;&quot;&quot;</span></span><br><span class="line">        self.add_widget_to_layout(widget)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_widget_to_layout</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 将widget添加到layout上 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> widget:</span><br><span class="line">            self.widget = widget</span><br><span class="line">            self.widget.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors) <span class="comment"># 参考mayaMixin推荐的一个属性设置，意思是我们的widget会跟随父窗口属性改变，但是不要跟随父窗口属性改变的同时将祖先窗口改变。</span></span><br><span class="line"></span><br><span class="line">            workspace_control_ptr = long(omui.MQtUtil.findControl(self.name)) <span class="comment"># 得到workspaceControl的指针</span></span><br><span class="line">            widget_ptr = long(getCppPointer(self.widget)[<span class="number">0</span>]) <span class="comment"># 得到widget的cpp指针</span></span><br><span class="line"></span><br><span class="line">            omui.MQtUtil.addWidgetToMayaLayout(widget_ptr, workspace_control_ptr) <span class="comment"># 令我们的widget属于maya布局</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exists</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl是否存在 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_visible</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl可视性 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, visible=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置workspaceControl的可视性 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> visible:</span><br><span class="line">            cmds.workspaceControl(self.name, e=<span class="literal">True</span>, restore=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.workspaceControl(self.name, e=<span class="literal">True</span>, visible=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_label</span>(<span class="params">self, label</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置workspaceControl的标签 &quot;&quot;&quot;</span></span><br><span class="line">        cmds.workspaceControl(self.name, e=<span class="literal">True</span>, label=label)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_floating</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl是否浮动 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, floating=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_collapsed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl是否收缩 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, collapse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SampleUI</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Sample UI&quot;</span></span><br><span class="line">    UI_NAME = <span class="string">&quot;SampleUI&quot;</span></span><br><span class="line"></span><br><span class="line">    ui_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个类方法，方便外界调用来显示可以dock的UI,如果SampleUI存在就显示它，不存在就创建</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.ui_instance:</span><br><span class="line">            cls.ui_instance.show_workspace_control()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cls.ui_instance = SampleUI()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_workspace_control_name</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置控件对应的workspaceControl名字 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;WorkspaceControl&quot;</span>.<span class="built_in">format</span>(cls.UI_NAME)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SampleUI, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setObjectName(self.__class__.UI_NAME)</span><br><span class="line">        self.setMinimumSize(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        self.create_widget()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line">        self.create_workspace_control()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widget</span>(<span class="params">self</span>):</span><br><span class="line">        self.apply_button = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addWidget(self.apply_button)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.apply_button.clicked.connect(self.on_clicked)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建workspaceControl &quot;&quot;&quot;</span></span><br><span class="line">        self.workspace_control_instance = WorkspaceControl(self.get_workspace_control_name())</span><br><span class="line">        <span class="keyword">if</span> self.workspace_control_instance.exists():</span><br><span class="line">            self.workspace_control_instance.restore(self) <span class="comment"># 如果workspace_control已经存在了那么就将它显示出来</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.workspace_control_instance.create(self.WINDOW_TITLE, self, ui_script=<span class="string">&quot;from workspace_control import SampleUI\nSampleUI.display()&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        self.workspace_control_instance.set_visible(<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button Clicked&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置窗口float时以及dock时对应的标题 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.workspace_control_instance.is_floating():</span><br><span class="line">            self.workspace_control_instance.set_label(<span class="string">&quot;Floating Window&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.workspace_control_instance.set_label(<span class="string">&quot;Docked Window&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    workspace_control_name = SampleUI.get_workspace_control_name()</span><br><span class="line">    <span class="keyword">if</span> cmds.window(workspace_control_name, exists=<span class="literal">True</span>):</span><br><span class="line">        cmds.deleteUI(workspace_control_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这串代码可以使UI在dock的同时能够通过更改UI的代码来更新界面</span></span><br><span class="line">    <span class="comment"># try:</span></span><br><span class="line">    <span class="comment">#     sample_ui.setParent(None)</span></span><br><span class="line">    <span class="comment">#     sample_ui.deleteLater()</span></span><br><span class="line">    <span class="comment"># except:</span></span><br><span class="line">    <span class="comment">#     pass</span></span><br><span class="line">    </span><br><span class="line">    sample_ui = SampleUI()</span><br><span class="line">    sample_ui.show()</span><br></pre></td></tr></table></figure><p><a name="mBEs1"></a></p><h2 id="将workspace-control作为模块导入使用的步骤"><a href="#将workspace-control作为模块导入使用的步骤" class="headerlink" title="将workspace_control作为模块导入使用的步骤"></a>将workspace_control作为模块导入使用的步骤</h2><p><a name="Q6A1e"></a></p><h3 id="workspace-control主要修改区域："><a href="#workspace-control主要修改区域：" class="headerlink" title="workspace_control主要修改区域："></a>workspace_control主要修改区域：</h3><p>新增类方法<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677206784328-27769875-35d3-4793-a1cd-9f5797845ec5.png#averageHue=%23201f1f&clientId=u642778c3-94fb-4&from=paste&height=241&id=u312e1185&originHeight=241&originWidth=1027&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27884&status=done&style=none&taskId=u1c14e281-ceaa-4e91-afcb-0e4981bc2f0&title=&width=1027" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677206827356-bdbb4405-ed33-4df9-bd50-6b9969887555.png#averageHue=%23231f1e&clientId=u642778c3-94fb-4&from=paste&height=189&id=ue63728d9&originHeight=189&originWidth=1212&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37526&status=done&style=none&taskId=u1cee2a55-4a75-43ba-ab90-f9a252f71ba&title=&width=1212" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> getCppPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkspaceControl</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.widget = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, label, widget, ui_script=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">        cmds.workspaceControl(self.name, label=label)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ui_script:</span><br><span class="line">            cmds.workspaceControl(self.name, e=<span class="literal">True</span>, uiScript=ui_script)</span><br><span class="line"></span><br><span class="line">        self.add_widget_to_layout(widget)</span><br><span class="line">        self.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restore</span>(<span class="params">self, widget</span>):</span><br><span class="line">        self.add_widget_to_layout(widget)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_widget_to_layout</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="keyword">if</span> widget:</span><br><span class="line">            self.widget = widget</span><br><span class="line">            self.widget.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors)</span><br><span class="line"></span><br><span class="line">            workspace_control_ptr = long(omui.MQtUtil.findControl(self.name))</span><br><span class="line">            widget_ptr = long(getCppPointer(self.widget)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            omui.MQtUtil.addWidgetToMayaLayout(widget_ptr, workspace_control_ptr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exists</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_visible</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, visible=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        <span class="keyword">if</span> visible:</span><br><span class="line">            cmds.workspaceControl(self.name, e=<span class="literal">True</span>, restore=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.workspaceControl(self.name, e=<span class="literal">True</span>, visible=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_label</span>(<span class="params">self, label</span>):</span><br><span class="line">        cmds.workspaceControl(self.name, e=<span class="literal">True</span>, label=label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_floating</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, floating=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_collapsed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(self.name, q=<span class="literal">True</span>, collapse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DockableUI</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;DockableUI&quot;</span></span><br><span class="line"></span><br><span class="line">    ui_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.ui_instance:</span><br><span class="line">            cls.ui_instance.show_workspace_control()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cls.ui_instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_workspace_control_name</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;WorkspaceControl&quot;</span>.<span class="built_in">format</span>(cls.__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ui_script</span>(<span class="params">cls</span>):</span><br><span class="line">        module_name = cls.__module__</span><br><span class="line">        <span class="keyword">if</span> module_name == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">            module_name = cls.module_name_override</span><br><span class="line"></span><br><span class="line">        ui_script = <span class="string">&quot;from &#123;0&#125; import &#123;1&#125;\n&#123;1&#125;.display()&quot;</span>.<span class="built_in">format</span>(module_name, cls.__name__)</span><br><span class="line">        <span class="keyword">return</span> ui_script</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockableUI, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setObjectName(self.__class__.__name__)</span><br><span class="line"></span><br><span class="line">        self.create_actions()</span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line">        self.create_workspace_control()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        self.workspace_control_instance = WorkspaceControl(self.get_workspace_control_name())</span><br><span class="line">        <span class="keyword">if</span> self.workspace_control_instance.exists():</span><br><span class="line">            self.workspace_control_instance.restore(self)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.workspace_control_instance.create(self.WINDOW_TITLE, self, ui_script=self.get_ui_script())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        self.workspace_control_instance.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="nmdWc"></a></p><h3 id="dockable-outliner与原版的区别："><a href="#dockable-outliner与原版的区别：" class="headerlink" title="dockable_outliner与原版的区别："></a>dockable_outliner与原版的区别：</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677207029301-874922a2-f359-435d-98d9-0cf9bf68c815.png#averageHue=%23f9f0ef&clientId=u642778c3-94fb-4&from=paste&height=570&id=ub48cbe34&originHeight=570&originWidth=1597&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63586&status=done&style=none&taskId=ufb8c8f75-f8ce-4b61-aa78-830ce3efeb1&title=&width=1597" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677207062777-560665cd-7aa2-4c38-a2fb-e418c1790104.png#averageHue=%23f9e7e7&clientId=u642778c3-94fb-4&from=paste&height=221&id=u25f2a923&originHeight=221&originWidth=1607&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17522&status=done&style=none&taskId=u4387a327-dd89-42da-abd6-615d531c8f8&title=&width=1607" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> workspace_control <span class="keyword">import</span> DockableUI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DockableOutliner</span>(<span class="title class_ inherited__">DockableUI</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Dockable Outliner&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockableOutliner, self).__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.setMinimumWidth(<span class="number">300</span>)</span><br><span class="line">        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)</span><br><span class="line">        self.customContextMenuRequested.connect(self.show_context_menu)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.transform_icon = QtGui.QIcon(<span class="string">&quot;:transform.svg&quot;</span>)</span><br><span class="line">        self.camera_icon = QtGui.QIcon(<span class="string">&quot;:Camera.png&quot;</span>)</span><br><span class="line">        self.mesh_icon = QtGui.QIcon(<span class="string">&quot;:mesh.svg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.refresh_tree_widget()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        self.about_action = QtWidgets.QAction(<span class="string">&quot;About&quot;</span>, self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.display_shape_action = QtWidgets.QAction(<span class="string">&quot;Shapes&quot;</span>, self)</span><br><span class="line">        self.display_shape_action.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        self.display_shape_action.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.display_shape_action.setShortcut(QtGui.QKeySequence(<span class="string">&quot;Ctrl+Shift+H&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.menu_bar = QtWidgets.QMenuBar()</span><br><span class="line">        display_menu = self.menu_bar.addMenu(<span class="string">&quot;Display&quot;</span>)</span><br><span class="line">        display_menu.addAction(self.display_shape_action)</span><br><span class="line">        help_menu = self.menu_bar.addMenu(<span class="string">&quot;Help&quot;</span>)</span><br><span class="line">        help_menu.addAction(self.about_action)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.tree_widget = QtWidgets.QTreeWidget()</span><br><span class="line">        self.tree_widget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)</span><br><span class="line">        self.tree_widget.setHeaderHidden(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># header = self.tree_widget.headerItem()</span></span><br><span class="line">        <span class="comment"># header.setText(0, &quot;Column 0 Text&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.refresh_btn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.setMenuBar(self.menu_bar)</span><br><span class="line">        main_layout.addWidget(self.tree_widget)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.about_action.triggered.connect(self.about)</span><br><span class="line">        self.display_shape_action.toggled.connect(self.set_shape_nodes_visible)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.tree_widget.itemCollapsed.connect(self.update_icon)</span><br><span class="line">        self.tree_widget.itemExpanded.connect(self.update_icon)</span><br><span class="line">        self.tree_widget.itemSelectionChanged.connect(self.select_items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.refresh_btn.clicked.connect(self.refresh_tree_widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_tree_widget</span>(<span class="params">self</span>):</span><br><span class="line">        self.shape_nodes = cmds.ls(shapes=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.tree_widget.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        top_level_object_names = cmds.ls(assemblies=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> top_level_object_names:</span><br><span class="line">            item = self.create_item(name)</span><br><span class="line">            self.tree_widget.addTopLevelItem(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.update_selection()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">self, name</span>):</span><br><span class="line">        item = QtWidgets.QTreeWidgetItem([name])</span><br><span class="line">        self.add_children(item)</span><br><span class="line">        self.update_icon(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        is_shape = name <span class="keyword">in</span> self.shape_nodes</span><br><span class="line">        item.setData(<span class="number">0</span>, QtCore.Qt.UserRole, is_shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_children</span>(<span class="params">self, item</span>):</span><br><span class="line">        children = cmds.listRelatives(item.text(<span class="number">0</span>), children=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> children:</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">                child_item = self.create_item(child)</span><br><span class="line">                item.addChild(child_item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_icon</span>(<span class="params">self, item</span>):</span><br><span class="line">        object_type = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> item.isExpanded():</span><br><span class="line">            object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child_count = item.childCount()</span><br><span class="line">            <span class="keyword">if</span> child_count == <span class="number">0</span>:</span><br><span class="line">                object_type = cmds.objectType(item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> child_count == <span class="number">1</span>:</span><br><span class="line">                child_item = item.child(<span class="number">0</span>)</span><br><span class="line">                object_type = cmds.objectType(child_item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> object_type == <span class="string">&quot;transform&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, self.transform_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;camera&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, self.camera_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;mesh&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, self.mesh_icon)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_items</span>(<span class="params">self</span>):</span><br><span class="line">        items = self.tree_widget.selectedItems()</span><br><span class="line">        names = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            names.append(item.text(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cmds.select(names, replace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">self</span>):</span><br><span class="line">        QtWidgets.QMessageBox.about(self, <span class="string">&quot;About Simple Outliner&quot;</span>, <span class="string">&quot;Add About Text Here&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_shape_nodes_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(self.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_shape = item.data(<span class="number">0</span>, QtCore.Qt.UserRole)</span><br><span class="line">            <span class="keyword">if</span> is_shape:</span><br><span class="line">                item.setHidden(<span class="keyword">not</span> visible)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, point</span>):</span><br><span class="line">        context_menu = QtWidgets.QMenu()</span><br><span class="line">        context_menu.addAction(self.display_shape_action)</span><br><span class="line">        context_menu.addSeparator()</span><br><span class="line">        context_menu.addAction(self.about_action)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context_menu.exec_(self.mapToGlobal(point))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_selection</span>(<span class="params">self</span>):</span><br><span class="line">        selection = cmds.ls(selection=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(self.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_selected = item.text(<span class="number">0</span>) <span class="keyword">in</span> selection</span><br><span class="line">            item.setSelected(is_selected)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_script_job_enabled</span>(<span class="params">self, enabled</span>):</span><br><span class="line">        <span class="keyword">if</span> enabled <span class="keyword">and</span> self.script_job_number &lt; <span class="number">0</span>:</span><br><span class="line">            self.script_job_number = cmds.scriptJob(event=[<span class="string">&quot;SelectionChanged&quot;</span>, partial(self.update_selection)], protected=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> enabled <span class="keyword">and</span> self.script_job_number &gt;= <span class="number">0</span>:</span><br><span class="line">            cmds.scriptJob(kill=self.script_job_number, force=<span class="literal">True</span>)</span><br><span class="line">            self.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockableOutliner, self).showEvent(e)</span><br><span class="line">        self.set_script_job_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(self, DockableOutliner):</span><br><span class="line">            <span class="built_in">super</span>(DockableOutliner, self).closeEvent(e)</span><br><span class="line">            self.set_script_job_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    workspace_control_name = DockableOutliner.get_workspace_control_name()</span><br><span class="line">    <span class="keyword">if</span> cmds.window(workspace_control_name, exists=<span class="literal">True</span>):</span><br><span class="line">        cmds.deleteUI(workspace_control_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DockableOutliner.module_name_override = <span class="string">&quot;dockable_outliner&quot;</span></span><br><span class="line">    test_dialog = DockableOutliner()</span><br></pre></td></tr></table></figure><p><a name="t4Cku"></a></p><h1 id="Qt事件"><a href="#Qt事件" class="headerlink" title="Qt事件"></a>Qt事件</h1><p><a name="TNHWF"></a></p><h2 id="事件介绍"><a href="#事件介绍" class="headerlink" title="事件介绍"></a>事件介绍</h2><p><a name="ENkHI"></a></p><h3 id="事件系统"><a href="#事件系统" class="headerlink" title="事件系统"></a>事件系统</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673245476361-c19b8bda-147b-4b63-b911-2c617fab571b.png#averageHue=%230c0c0c&clientId=u07b614fd-bd46-4&from=paste&height=679&id=u290a994e&originHeight=611&originWidth=1467&originalType=binary&ratio=1&rotation=0&showTitle=false&size=296520&status=done&style=none&taskId=ucf5758dc-3e02-4f6a-aabb-391e65599eb&title=&width=1630.0000431802548" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673245481192-e407fce6-d96f-4dbb-826e-2700eed58b08.png#averageHue=%23100f0e&clientId=u07b614fd-bd46-4&from=paste&height=533&id=u9e628b49&originHeight=480&originWidth=1061&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67608&status=done&style=none&taskId=u26ab3981-a2a1-454a-af85-fe10b864a6f&title=&width=1178.88892011878" alt="image.png"><br><a name="Miv2S"></a></p><h3 id="事件驱动VS实时"><a href="#事件驱动VS实时" class="headerlink" title="事件驱动VS实时"></a>事件驱动VS实时</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246046841-93f5eafd-7c7b-4b50-b79b-75d9b3819b6a.png#averageHue=%230b0b0b&clientId=u07b614fd-bd46-4&from=paste&height=832&id=uafbddc9f&originHeight=749&originWidth=1560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=366420&status=done&style=none&taskId=udd76986b-f221-4f4b-b16e-72f9b1d9c34&title=&width=1733.3333792509868" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246088391-e3b83926-7b34-40de-a0ad-84bf9428a48a.png#averageHue=%230e0d0c&clientId=u07b614fd-bd46-4&from=paste&height=613&id=u1524d774&originHeight=552&originWidth=1512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87238&status=done&style=none&taskId=ud5e95d16-6dca-46a5-9155-c5151bff665&title=&width=1680.0000445048026" alt="image.png"><br><a name="C3KQI"></a></p><h3 id="Qt事件-1"><a href="#Qt事件-1" class="headerlink" title="Qt事件"></a>Qt事件</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246124739-710bc149-89f6-4a35-a955-089bb7e468ed.png#averageHue=%23080808&clientId=u07b614fd-bd46-4&from=paste&height=787&id=u7d60f664&originHeight=708&originWidth=1586&originalType=binary&ratio=1&rotation=0&showTitle=false&size=274694&status=done&style=none&taskId=u7403b032-62a3-4e27-b7d9-12e5fd26a66&title=&width=1762.22226890517" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246139637-502905e8-36c7-4804-90e8-3a07a874ebe1.png#averageHue=%230b0a09&clientId=u07b614fd-bd46-4&from=paste&height=638&id=ued172028&originHeight=574&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63418&status=done&style=none&taskId=u01787e55-a086-430c-8775-795e6e142f8&title=&width=1196.6666983675082" alt="image.png"><br><a name="IQQkl"></a></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246166933-d98416fc-5646-4c61-b821-a40aafcda3bf.png#averageHue=%230a0a0a&clientId=u07b614fd-bd46-4&from=paste&height=780&id=u3142b467&originHeight=702&originWidth=1624&originalType=binary&ratio=1&rotation=0&showTitle=false&size=350911&status=done&style=none&taskId=u17e17f0c-3953-4dc1-825a-4b72eea3c04&title=&width=1804.444492245899" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246180926-469e0cbf-b90c-4b60-9766-4638289cef72.png#averageHue=%23090908&clientId=u07b614fd-bd46-4&from=paste&height=579&id=u8b97687c&originHeight=521&originWidth=1598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69519&status=done&style=none&taskId=u68fcd36c-086c-422f-a635-d9b3036c141&title=&width=1775.555602591716" alt="image.png"><br><a name="DWTYd"></a></p><h3 id="事件过滤"><a href="#事件过滤" class="headerlink" title="事件过滤"></a>事件过滤</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246220310-155f22c4-3bc3-4967-bf62-9980f0ce6665.png#averageHue=%230b0b0b&clientId=u07b614fd-bd46-4&from=paste&height=543&id=u9d714b1b&originHeight=489&originWidth=1574&originalType=binary&ratio=1&rotation=0&showTitle=false&size=232756&status=done&style=none&taskId=uf7edba98-7884-4862-99c9-f020cc1bb21&title=&width=1748.8889352186238" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246260732-b5d7bcd7-19f6-46ac-b103-4a72c450d97a.png#averageHue=%230d0c0b&clientId=u07b614fd-bd46-4&from=paste&height=390&id=u94cec4c9&originHeight=312&originWidth=1266&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39026&status=done&style=none&taskId=ud6a3f8ef-4721-4be4-9711-e7d89090604&title=&width=1582.4999764189129" alt="image.png"><br><a name="KYXAz"></a></p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><a name="zdhdh"></a></p><h3 id="KeyPress事件处理"><a href="#KeyPress事件处理" class="headerlink" title="KeyPress事件处理"></a>KeyPress事件处理</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673247679167-269b96f7-fd7d-447f-9332-8ae9a1310fce.png#averageHue=%23464645&clientId=u07b614fd-bd46-4&from=paste&height=285&id=ufb2910ab&originHeight=228&originWidth=302&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3096&status=done&style=none&taskId=uc597ac55-cdd1-47db-a24e-bafbaf9e786&title=&width=377.4999943748117" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPlainTextEdit</span>(QtWidgets.QPlainTextEdit):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 输入文本编辑器 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomPlainTextEdit, self).__init__(parent)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, key_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重载keyPressEvent方法 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(&quot;Key Pressed: &#123;0&#125;&quot;.format(key_event.text()))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ctrl = key_event.modifiers() == QtCore.Qt.ControlModifier <span class="comment"># ctrl为布尔值，代表ctrl键是否处于按下的状态</span></span><br><span class="line">        <span class="comment"># print(&quot;Control Modifiers: &#123;0&#125;&quot;.format(ctrl))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shift = key_event.modifiers() == QtCore.Qt.ShiftModifier</span><br><span class="line">        <span class="comment"># print(&quot;Shift Modifiers: &#123;0&#125;&quot;.format(shift))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        alt = key_event.modifiers() == QtCore.Qt.AltModifier</span><br><span class="line">        <span class="comment"># print(&quot;Alt Modifiers: &#123;0&#125;&quot;.format(alt))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ctrl_alt = key_event.modifiers() == (QtCore.Qt.ControlModifier | QtCore.Qt.AltModifier)</span><br><span class="line">        <span class="comment"># print(&quot;Ctrl+Alt Modifiers: &#123;0&#125;&quot;.format(ctrl_alt))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if shift:</span></span><br><span class="line">        <span class="comment">#     return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        key = key_event.key()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key == QtCore.Qt.Key_Return <span class="keyword">or</span> key == QtCore.Qt.Key_Enter:</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Key_Return代表中间的回车键 Key_Enter代表右边的回车键 &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> ctrl: <span class="comment"># 如果是ctrl+enter</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Execute Code&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> ctrl_alt: <span class="comment"># 如果是ctrl+alt+enter</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Execute Line&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">super</span>(CustomPlainTextEdit, self).keyPressEvent(key_event) <span class="comment"># 重载QtWidgets.QPlainTextEdit的keyPressEvent方法的同时，不影响keyPressEvent的功能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyPressExample</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Keypress Example&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(KeyPressExample, self).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        self.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        self.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        self.plain_text = CustomPlainTextEdit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(self.plain_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    ui = KeyPressExample()</span><br><span class="line">    ui.show()</span><br></pre></td></tr></table></figure><p><a name="Rwerv"></a></p><h3 id="Mouse事件处理"><a href="#Mouse事件处理" class="headerlink" title="Mouse事件处理"></a>Mouse事件处理</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673251794443-0628b284-6f6f-49c8-b3e0-5dec7bb5f149.png#averageHue=%23504f4f&clientId=ud572c1dd-7c66-4&from=paste&height=540&id=u5a5d4291&originHeight=432&originWidth=402&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3716&status=done&style=none&taskId=u36be2f99-c435-4d76-a543-e34e857c7e5&title=&width=502.4999925121666" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveableWidget</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, width, height, color, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MoveableWidget, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setFixedSize(width, height)</span><br><span class="line">        self.move(x, y)</span><br><span class="line"></span><br><span class="line">        self.color = color</span><br><span class="line">        self.original_color = color</span><br><span class="line"></span><br><span class="line">        self.move_enabled = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标点击时的事件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Button Pressed&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mouse_event.button() == QtCore.Qt.LeftButton:</span><br><span class="line">            self.initial_pos = self.pos()</span><br><span class="line">            self.global_pos = mouse_event.globalPos()</span><br><span class="line"></span><br><span class="line">            self.move_enabled = <span class="literal">True</span> <span class="comment"># 点击时可以移动widget</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标释放时的事件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Button Released&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.move_enabled:</span><br><span class="line">            self.move_enabled = <span class="literal">False</span> <span class="comment"># 松开后不能移动widget</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseDoubleClickEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标双击后改变颜色 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Double-Click&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.color == self.original_color:</span><br><span class="line">            self.color = QtCore.Qt.yellow</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.color = self.original_color</span><br><span class="line"></span><br><span class="line">        self.update() <span class="comment"># 更新颜色</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标点击并移动时widget也移动 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Move&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.move_enabled:</span><br><span class="line">            diff = mouse_event.globalPos() - self.global_pos</span><br><span class="line">            self.move(self.initial_pos + diff)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, paint_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 绘制填充矩形 &quot;&quot;&quot;</span></span><br><span class="line">        painter = QtGui.QPainter(self)</span><br><span class="line">        painter.fillRect(paint_event.rect(), self.color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseEventExample</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;MAYA-2018&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(MouseEventExample, self).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(self.WINDOW_TITLE)</span><br><span class="line">        self.setMinimumSize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">        self.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layouts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        self.red_widget = MoveableWidget(<span class="number">100</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">24</span>, QtCore.Qt.red, self)</span><br><span class="line">        self.blue_widget = MoveableWidget(<span class="number">300</span>, <span class="number">300</span>, <span class="number">24</span>, <span class="number">24</span>, QtCore.Qt.blue, self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = MouseEventExample()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="Hk9pA"></a></p><h1 id="Drag-and-Drop"><a href="#Drag-and-Drop" class="headerlink" title="Drag and Drop"></a>Drag and Drop</h1>]]></content>
      
      
      <categories>
          
          <category> PySide2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PySide2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_for_nuke_101</title>
      <link href="/2023/08/29/NukePy-Python-for-nuke-101/"/>
      <url>/2023/08/29/NukePy-Python-for-nuke-101/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />[https://www.bilibili.com/video/BV1bm4y1R7X1/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480](https://www.bilibili.com/video/BV1bm4y1R7X1/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480)<a name="fuGgI"></a># 第一节<a name="Olr2j"></a>## 初始设置在这个路径下C:\Users\用户名\.nuke，创建gizmos文件夹，python文件夹，init.py文件，menu.py文件。<br />init.py文件用来为nuke新增插件识别路径(这样就不需要每个文件夹都加一个__init__.py文件了)，都统一加到外面这个init.py文件。 <br />menu.py文件用来控制nuke启动时自动加载的功能<br />其中init.py文件中内容是<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nuke.pluginAddPath(&#x27;./gizmos&#x27;)</span><br><span class="line">nuke.pluginAddPath(&#x27;./python&#x27;)</span><br></pre></td></tr></table></figure><a name="z76gR"></a>## 克服因操作平台的不同而导致的.nuke文件夹路径不同的问题在menu.py文件中输入：<br />其中platform可以用来得到当前的操作平台<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665992875669-ef7c2dd3-19cc-41f4-bd0b-3a6dac781f42.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=540&id=uc062ab67&originHeight=540&originWidth=848&originalType=binary&ratio=1&rotation=0&showTitle=false&size=235547&status=error&style=none&taskId=u06683321-48b5-4ad8-8ce0-52fa2c148f5&title=&width=848)<a name="YhCAa"></a># 第二节![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665993055456-c5bb72fd-00cb-48e3-808e-16a610ad8ef3.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=241&id=ud9fa2212&originHeight=241&originWidth=1093&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87683&status=error&style=none&taskId=uc3832d5e-8f2b-47df-8b83-0474eafe1dc&title=&width=1093)<a name="eM6Bw"></a>## 设置创建节点时的默认值nuke.knobDefault('Tracker4.shutteroffset',"centered")  # 设置Tracker节点的shutteroffset的默认值为centered<br />nuke.knobDefault('Tracker4.label', "Motion: [value transform]\nRef Frame: [value reference_frame]")  # 设置Tracker节点的label(节点的显示文本)为Motion: [value transform]\nRef Frame: [value reference_frame]也就是![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665997817594-6575a0a1-28ff-44e5-ab3d-bbe2462e793d.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=144&id=u09506540&originHeight=144&originWidth=583&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9283&status=error&style=none&taskId=ua7dcc081-1cd5-49f1-885a-c536f7bc1b6&title=&width=583)。加入后的前后对比：![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665997849926-81ba693d-374d-4d25-9272-31d25bcbc95c.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=80&id=ud8e2d0db&originHeight=80&originWidth=250&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2207&status=error&style=none&taskId=u913a170e-07c1-4d20-9bc4-77326f2e537&title=&width=250)变成了![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665998054815-c3d52778-568e-4743-b2a5-51e2107efd74.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=145&id=u542a0746&originHeight=145&originWidth=266&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4780&status=error&style=none&taskId=ud8c5c13b-78f5-417a-8364-9a874e74f3a&title=&width=266)。其中label中框号中的内容是属性值。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665997430962-c3ff95db-c35e-4a7a-acdf-149c912a9a06.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=89&id=u30676a33&originHeight=89&originWidth=856&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41963&status=error&style=none&taskId=u167c3eb6-b800-43de-93ce-5e14c94f7af&title=&width=856) 在创建节点时当节点类型为Tracker时设置这个节点的reference_frame的值为nuke的时间滑块的frame值。<a name="ZkfyO"></a>## 自定义menu和gizmosmenu![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1665999940631-e7824e12-b83e-4a7a-aec2-60d904a993ec.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=927&id=ub67c51e3&originHeight=927&originWidth=941&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66705&status=error&style=none&taskId=u55f8c57b-a435-42e9-bba5-b9b2f59d14b&title=&width=941)<br />如何添加自定义菜单：<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666000564330-2d3e9ec6-a9a3-470c-af08-8d56cc2ac0d7.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=1001&id=u5c0676a6&originHeight=1001&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&size=450591&status=error&style=none&taskId=udfa54024-2fd3-46a9-88aa-bd89be6e449&title=&width=1180" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> PythonEditor</span><br><span class="line">PythonEditor.nuke_menu_setup(nuke_menu=<span class="literal">True</span>, node_menu=<span class="literal">True</span>, pane_menu=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> nukescripts</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 设置节点的默认设置</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">nuke.knobDefault(<span class="string">&#x27;Tracker4.shutteroffset&#x27;</span>, <span class="string">&quot;centered&quot;</span>)</span><br><span class="line">nuke.knobDefault(<span class="string">&#x27;Tracker4.label&#x27;</span>, <span class="string">&quot;Motion: [value transform]\nRef Frame: [value reference_frame]&quot;</span>)</span><br><span class="line">nuke.addOnUserCreate(<span class="keyword">lambda</span>: nuke.thisNode()[<span class="string">&#x27;reference_frame&#x27;</span>].setValue(nuke.frame()), nodeClass=<span class="string">&#x27;Tracker4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 自定义菜单</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">utilitiesMenu = nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addMenu(<span class="string">&#x27;Utilities&#x27;</span>)</span><br><span class="line"></span><br><span class="line">utilitiesMenu.addCommand(<span class="string">&#x27;Autocrop&#x27;</span>, <span class="string">&#x27;nukescripts.autocrop()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myGizmosMenu = nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>.addMenu(<span class="string">&#x27;myGizmos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myGizmosMenu.addCommand(<span class="string">&#x27;Autocrop&#x27;</span>, <span class="string">&#x27;nukescripts.autocrop()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 自定义快捷键</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Transform/Tracker&quot;</span>, <span class="string">&quot;nuke.createNode(&#x27;Tracker4)&quot;</span>,<span class="string">&quot;ctrl+alt+t&quot;</span>, icon=<span class="string">&quot;Tracker.png&quot;</span>, shortcutContext=<span class="number">2</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><a name="jmdU7"></a></p><h2 id="nuke自带的图标路径"><a href="#nuke自带的图标路径" class="headerlink" title="nuke自带的图标路径"></a>nuke自带的图标路径</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666000435895-e482db9e-4971-42bb-8247-92599639966e.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=59&id=u4d9c95e0&originHeight=59&originWidth=400&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15847&status=error&style=none&taskId=uc84414ce-e548-4e01-ab86-3ae802db11f&title=&width=400" alt="image.png">可以在图中的路径处找到nuke自带的图标的名字<br />然后添加menu时icon参数如果想要是nuke自带的图标那么就可以直接填图标的名字加后缀名，nuke会自动找到<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666000444647-824bbbfb-45a0-44dd-946d-99bd91972fa3.png#clientId=u162168ff-70af-4&errorMessage=unknown%20error&from=paste&height=38&id=uc116cc0e&originHeight=38&originWidth=188&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7790&status=error&style=none&taskId=u506e4f39-be5e-41b8-9854-079f63979af&title=&width=188" alt="image.png"><br><a name="H9HGp"></a></p><h1 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666059392341-80ef8e6d-d0e9-4c85-9fe5-3883217454b7.png#clientId=uc36b5c75-d21a-4&errorMessage=unknown%20error&from=paste&height=551&id=u94199da1&originHeight=551&originWidth=1017&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52911&status=error&style=none&taskId=u2ae5d99c-8ff5-4350-ae0c-9fc4437a5c6&title=&width=1017" alt="image.png"><br><a name="b9Bkh"></a></p><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><p>nuke.createNode()<br><a name="MlYPD"></a></p><h2 id="创建节点的同时设置属性值（不属于课程，之前自己搜的）"><a href="#创建节点的同时设置属性值（不属于课程，之前自己搜的）" class="headerlink" title="创建节点的同时设置属性值（不属于课程，之前自己搜的）"></a>创建节点的同时设置属性值（不属于课程，之前自己搜的）</h2><p>举例：nuke.nodes.Shuffle(inputs&#x3D;[texO], red&#x3D;”red”, green&#x3D;”black”, blue&#x3D;”black”, alpha&#x3D;”white”)<br><a name="oknM0"></a></p><h2 id="为节点创建预设与快捷键"><a href="#为节点创建预设与快捷键" class="headerlink" title="为节点创建预设与快捷键"></a>为节点创建预设与快捷键</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666060461713-71ee7ea6-7061-419b-802a-4b92b1bc054c.png#clientId=uc36b5c75-d21a-4&errorMessage=unknown%20error&from=paste&height=105&id=u4d228d06&originHeight=105&originWidth=1717&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109651&status=error&style=none&taskId=ubd43bc0e-ee59-428c-968e-a05272be8ef&title=&width=1717" alt="image.png"><br><a name="GNTz9"></a></p><h2 id="更改节点的属性值"><a href="#更改节点的属性值" class="headerlink" title="更改节点的属性值"></a>更改节点的属性值</h2><p>举例，设置选择的节点的’bbox’属性值为’B’：nuke.selectedNode()[‘bbox’].setValue(“B”)<br />举例，自定义某一节点的属性值： nuke.toNode(‘Merge1’)[‘bbox’].setValue(“B”)<br><a name="gPUGu"></a></p><h2 id="通过for循环批量更改某一类型的节点属性值"><a href="#通过for循环批量更改某一类型的节点属性值" class="headerlink" title="通过for循环批量更改某一类型的节点属性值"></a>通过for循环批量更改某一类型的节点属性值</h2><p>设置所有merge2类型节点的属性值：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666061251539-0dd170d7-424e-4e81-8db2-c94f68ea6946.png#clientId=uc36b5c75-d21a-4&errorMessage=unknown%20error&from=paste&height=92&id=u441acaf8&originHeight=92&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56666&status=error&style=none&taskId=u42f26017-1e8a-4831-b3d0-c1d5f7ee5e5&title=&width=665" alt="image.png"><br><a name="anVYM"></a></p><h2 id="通过代码得到节点的类型名"><a href="#通过代码得到节点的类型名" class="headerlink" title="通过代码得到节点的类型名"></a>通过代码得到节点的类型名</h2><p>print nuke.selectedNode().Class()<br><a name="z1eyh"></a></p><h1 id="第四节"><a href="#第四节" class="headerlink" title="第四节"></a>第四节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666061714259-42d82bac-470c-40de-9381-3ba0dbee3466.png#clientId=uc36b5c75-d21a-4&errorMessage=unknown%20error&from=paste&height=663&id=u5a817660&originHeight=663&originWidth=1371&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78977&status=error&style=none&taskId=u1c616561-29f7-4cab-b7e8-48f2a51f7ad&title=&width=1371" alt="image.png"><br><a name="t12th"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599735495-d70ee447-a597-446b-8ce5-7747ba8b1b01.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=317&id=u9158f1d5&originHeight=317&originWidth=311&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11781&status=error&style=none&taskId=u7765dd8f-c545-42fe-b519-36801aef169&title=&width=311" alt="image.png"><br />针对shuffle节点制作一些功能<br><a name="dT6as"></a></p><h2 id="shuffleShortcuts-py文件"><a href="#shuffleShortcuts-py文件" class="headerlink" title="shuffleShortcuts.py文件"></a>shuffleShortcuts.py文件</h2><p>在.nuke\python\shuffleShortcuts文件夹下创建个shuffleShortcuts.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createCustomShuffle</span>(<span class="params">in_channel, out_channel, set_channel, rColor, gColor, bColor</span>):</span><br><span class="line">    my_shuffle = nuke.createNode(<span class="string">&quot;Shuffle&quot;</span>)</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;in&#x27;</span>].setValue(in_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;out&#x27;</span>].setValue(out_channel)</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;red&#x27;</span>].setValue(set_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;green&#x27;</span>].setValue(set_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;blue&#x27;</span>].setValue(set_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;alpha&#x27;</span>].setValue(set_channel)</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;tile_color&#x27;</span>].setValue(<span class="built_in">int</span>(<span class="string">&#x27;%02x%02x%02x%02x&#x27;</span> % (rColor * <span class="number">255</span>, gColor * <span class="number">255</span>, bColor * <span class="number">255</span>, <span class="number">1</span>), <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;label&#x27;</span>].setValue(<span class="string">&quot;[value red] &gt; [value out]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffleRGBchannels</span>():</span><br><span class="line">    select_node = nuke.selectedNode()</span><br><span class="line"></span><br><span class="line">    select_node_x_pos = select_node[<span class="string">&#x27;xpos&#x27;</span>].value()</span><br><span class="line">    select_node_y_pos = select_node[<span class="string">&#x27;ypos&#x27;</span>].value()</span><br><span class="line"></span><br><span class="line">    createCustomShuffle(<span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    red_shuffle = nuke.selectedNode()</span><br><span class="line">    createCustomShuffle(<span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    green_shuffle = nuke.selectedNode()</span><br><span class="line">    createCustomShuffle(<span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    blue_shuffle = nuke.selectedNode()</span><br><span class="line"></span><br><span class="line">    red_shuffle.setInput(<span class="number">0</span>, select_node)</span><br><span class="line">    red_shuffle[<span class="string">&#x27;xpos&#x27;</span>].setValue(select_node_x_pos - <span class="number">150</span>)</span><br><span class="line">    red_shuffle[<span class="string">&#x27;ypos&#x27;</span>].setValue(select_node_y_pos + <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    green_shuffle.setInput(<span class="number">0</span>, select_node)</span><br><span class="line">    green_shuffle[<span class="string">&#x27;xpos&#x27;</span>].setValue(select_node_x_pos)</span><br><span class="line">    green_shuffle[<span class="string">&#x27;ypos&#x27;</span>].setValue(select_node_y_pos + <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    blue_shuffle.setInput(<span class="number">0</span>, select_node)</span><br><span class="line">    blue_shuffle[<span class="string">&#x27;xpos&#x27;</span>].setValue(select_node_x_pos + <span class="number">150</span>)</span><br><span class="line">    blue_shuffle[<span class="string">&#x27;ypos&#x27;</span>].setValue(select_node_y_pos + <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Red to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 1, 0, 0)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+r&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Green to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;green&#x27;, 0, 1, 0)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+g&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Blue to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 0, 0, 1)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+b&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Alpha to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 1, 1, 1)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+a&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Alpha to 0)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 0, 0, 0)&quot;</span>,</span><br><span class="line">                              shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Alpha to 1)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 1, 1, 1)&quot;</span>,</span><br><span class="line">                              shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Split RGB channels)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.shuffleRGBchannels()&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+s&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="uK2Td"></a></p><h2 id="menu-py"><a href="#menu-py" class="headerlink" title="menu.py"></a>menu.py</h2><p>然后在menu.py文件中导入这个模块<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599540497-2458ff54-b000-4c26-a5df-be499b687d92.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=127&id=u0626f8d0&originHeight=127&originWidth=1029&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6020&status=error&style=none&taskId=u328ea895-aad4-44a8-ac5c-2850b3bb0a2&title=&width=1029" alt="image.png"><br><a name="bsCQI"></a></p><h2 id="init-py"><a href="#init-py" class="headerlink" title="init.py"></a>init.py</h2><p>init.py文件中定义文件夹路径<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599580891-92363eb5-ba98-4d88-a3e5-063c15f76d70.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=143&id=uc5aa313d&originHeight=143&originWidth=437&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16790&status=error&style=none&taskId=u7c97de82-13a0-4914-97a0-59267f47ac7&title=&width=437" alt="image.png"><br><a name="E9y81"></a></p><h1 id="第五节"><a href="#第五节" class="headerlink" title="第五节"></a>第五节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599898541-63507d90-c932-4181-ac8c-3771fef7d6f3.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=588&id=v7R3p&originHeight=588&originWidth=1341&originalType=binary&ratio=1&rotation=0&showTitle=false&size=212963&status=error&style=none&taskId=u6b7fd6cd-449e-4098-a27a-9e98b278865&title=&width=1341" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599891125-0c1f0e58-37ff-41af-b611-ee9489ffe73c.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=842&id=u6b1c5e27&originHeight=842&originWidth=1600&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107703&status=error&style=none&taskId=u2015f305-efa4-4920-ba42-793bc8ee270&title=&width=1600" alt="image.png"><br><a name="R2T0w"></a></p><h2 id="得到项目路径"><a href="#得到项目路径" class="headerlink" title="得到项目路径"></a>得到项目路径</h2><p>nuke.root()[‘name’].value()<br><a name="ecCRC"></a></p><h2 id="定位字符串的特定值"><a href="#定位字符串的特定值" class="headerlink" title="定位字符串的特定值"></a><br />定位字符串的特定值</h2><p>举例字符串： Checkerboard_Small_v0002.png  输出 Checkerboard_Smal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_ext = <span class="string">&quot;Checkerboard_Small_v0002.png&quot;</span></span><br><span class="line">name = name_ext[<span class="number">0</span>:name_ext.find(<span class="string">&#x27;_v&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span> name <span class="comment"># Checkerboard_Small</span></span><br></pre></td></tr></table></figure><p><a name="oefiY"></a></p><h1 id="第六节"><a href="#第六节" class="headerlink" title="第六节"></a>第六节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666603966753-835d86a9-6896-4f10-8829-4a09716a827f.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=530&id=uceb3e21c&originHeight=530&originWidth=1298&originalType=binary&ratio=1&rotation=0&showTitle=false&size=197709&status=error&style=none&taskId=ub0dab412-d403-4cd2-872f-93e75582629&title=&width=1298" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666603950466-9c6fcf6f-a2be-4471-91b3-a546c244f756.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=758&id=ub665f68c&originHeight=758&originWidth=970&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66312&status=error&style=none&taskId=u0dc0ff81-857c-4146-b3d0-10e46a379f0&title=&width=970" alt="image.png"><br><a name="DGmOo"></a></p><h2 id="弹出输入框让用户输入"><a href="#弹出输入框让用户输入" class="headerlink" title="弹出输入框让用户输入"></a>弹出输入框让用户输入</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666604252525-be1e0a09-b9e5-40d5-8087-c60e64d53474.png#clientId=u43f32edb-ecd5-4&errorMessage=unknown%20error&from=paste&height=135&id=uae1f3949&originHeight=135&originWidth=216&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6861&status=error&style=none&taskId=u9e05fc47-999f-43c9-8076-62fa7bf74ef&title=&width=216" alt="image.png"><br />inputBox &#x3D; nuke.getInput(“My First Window”, “default text”)<br />如果点击Cancel按钮，那么inputBox的值为None<br><a name="cAZcM"></a></p><h2 id="在nuke菜单下放置一个让用户输入所选节点label的工具"><a href="#在nuke菜单下放置一个让用户输入所选节点label的工具" class="headerlink" title="在nuke菜单下放置一个让用户输入所选节点label的工具"></a>在nuke菜单下放置一个让用户输入所选节点label的工具</h2><p>首先按照课程的文件夹排列，我们的流程就是，在.nuke\python\shuffleShortcuts文件夹下创建一个新的.py工具文件（主要是因为init.py文件定义了这个文件夹为插件加载路径）<br />然后去menu.py文件中导入这个新的.py工具文件，这样nuke就能够调用.py文件了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666665329501-34479b29-a043-4910-bb18-8d1c908559ae.png#clientId=u2c4d4940-f26c-4&errorMessage=unknown%20error&from=paste&height=135&id=u308f65fc&originHeight=135&originWidth=216&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5198&status=error&style=none&taskId=u2f080a9d-bdf5-440e-a90c-f05178e9973&title=&width=216" alt="image.png"><br><a name="EAlTE"></a></p><h3 id="shortcut-NodeComment-py"><a href="#shortcut-NodeComment-py" class="headerlink" title="shortcut_NodeComment.py"></a>shortcut_NodeComment.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shortcut_NodeComment</span>():</span><br><span class="line">    selected_node = nuke.selectedNode()</span><br><span class="line"></span><br><span class="line">    old_comment = selected_node[<span class="string">&#x27;label&#x27;</span>].value()</span><br><span class="line"></span><br><span class="line">    input_box = nuke.getInput(<span class="string">&quot;Please enter a node label&quot;</span>, old_comment)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> input_box:</span><br><span class="line">        nuke.message(<span class="string">&quot;Node label will remain as &quot;</span> + old_comment)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_node[<span class="string">&#x27;label&#x27;</span>].setValue(input_box)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addCommand(<span class="string">&#x27;Edit/Shortcuts/Add Comment to Node&#x27;</span>, <span class="string">&#x27;shortcut_NodeComment.shortcut_NodeComment()&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;ctrl+alt+c&#x27;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="mVc04"></a></p><h3 id="menu-py-1"><a href="#menu-py-1" class="headerlink" title="menu.py"></a>menu.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shortcut_NodeComment</span><br></pre></td></tr></table></figure><p><a name="uGPp6"></a></p><h3 id="init-py-1"><a href="#init-py-1" class="headerlink" title="init.py"></a>init.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuke.pluginAddPath(<span class="string">&#x27;./python/shuffleShortcuts&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="P4w6c"></a></p><h2 id="（扩展版）在nuke菜单下放置一个让用户输入所选节点label的工具"><a href="#（扩展版）在nuke菜单下放置一个让用户输入所选节点label的工具" class="headerlink" title="（扩展版）在nuke菜单下放置一个让用户输入所选节点label的工具"></a>（扩展版）在nuke菜单下放置一个让用户输入所选节点label的工具</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666670860005-de8228fb-3a85-4681-9efe-c58e2b2405bd.png#clientId=u2c4d4940-f26c-4&errorMessage=unknown%20error&from=paste&height=184&id=u9314180b&originHeight=184&originWidth=277&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8943&status=error&style=none&taskId=u258865ad-8359-43c2-9fa0-51c271a28bd&title=&width=277" alt="image.png"><br />不仅可以设置内容，也可以设置显示knob属性，也可以设置节点颜色<br />内嵌的panel写法举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nukescripts.panels</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_panel</span>(nukescripts.panels.PythonPanel):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(my_panel, self).__init__(<span class="string">&#x27;my_panel&#x27;</span>)</span><br><span class="line">        selected_Node = nuke.selectedNode()</span><br><span class="line">        old_comment = selected_Node[<span class="string">&#x27;label&#x27;</span>].value()</span><br><span class="line">        knob_list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> selected_Node.knobs():</span><br><span class="line">            knob_list.append(i)</span><br><span class="line"></span><br><span class="line">        self.old_comment_slt = nuke.String_Knob(<span class="string">&quot;Comment&quot;</span>, <span class="string">&quot;Comment&quot;</span>, old_comment)</span><br><span class="line">        self.addKnob(self.old_comment_slt)</span><br><span class="line">        self.knob_list = nuke.Enumeration_Knob(<span class="string">&quot;Knob&quot;</span>,<span class="string">&quot;Knob&quot;</span>, knob_list)</span><br><span class="line">        self.addKnob(self.knob_list)</span><br><span class="line">        self.colour_bool = nuke.Boolean_Knob(<span class="string">&quot;Change Node Colour?&quot;</span>, <span class="string">&quot;Change Node Colour?&quot;</span>, <span class="literal">False</span>)</span><br><span class="line">        self.addKnob(self.colour_bool)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">p = my_panel()</span><br><span class="line">p.show()</span><br></pre></td></tr></table></figure><p>教程中的panel写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">short_NodeCustomizer</span>():</span><br><span class="line">    selected_Node = nuke.selectedNode()</span><br><span class="line">    old_comment = selected_Node[<span class="string">&#x27;label&#x27;</span>].value()</span><br><span class="line">    knob_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> selected_Node.knobs():</span><br><span class="line">        knob_list.append(i)</span><br><span class="line"></span><br><span class="line">    knob_list.sort()</span><br><span class="line">    knob_list.insert(<span class="number">0</span>, <span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    knob_list_string = <span class="string">&quot; &quot;</span>.join(knob_list)</span><br><span class="line"></span><br><span class="line">    panel = nuke.Panel(<span class="string">&quot;Node Customizer&quot;</span>)</span><br><span class="line"></span><br><span class="line">    panel.addSingleLineInput(<span class="string">&quot;Comment&quot;</span>, old_comment)</span><br><span class="line">    panel.addEnumerationPulldown(<span class="string">&quot;Knob&quot;</span>, knob_list_string)</span><br><span class="line">    panel.addBooleanCheckBox(<span class="string">&quot;Change Node Colour?&quot;</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> panel.show():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    comment_input = panel.value(<span class="string">&quot;Comment&quot;</span>)</span><br><span class="line">    knob_choice = panel.value(<span class="string">&quot;Knob&quot;</span>)</span><br><span class="line">    node_label = comment_input + <span class="string">&quot;\n&quot;</span> + knob_choice + <span class="string">&quot;: [value &quot;</span> + knob_choice + <span class="string">&quot;]&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> comment_input == <span class="string">&quot;&quot;</span> <span class="keyword">and</span> panel.value(<span class="string">&quot;Knob&quot;</span>) == <span class="string">&quot;None&quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> panel.value(<span class="string">&quot;Change Node Colour?&quot;</span>):</span><br><span class="line">        nuke.message(<span class="string">&quot;Please enter a node label&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> knob_choice == <span class="string">&quot;None&quot;</span>:</span><br><span class="line">        selected_Node[<span class="string">&#x27;label&#x27;</span>].setValue(comment_input)</span><br><span class="line">    <span class="keyword">elif</span> comment_input == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        selected_Node[<span class="string">&#x27;label&#x27;</span>].setValue(knob_choice + <span class="string">&quot;: [value &quot;</span> + knob_choice + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_Node[<span class="string">&#x27;label&#x27;</span>].setValue(node_label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> panel.value(<span class="string">&quot;Change Node Colour?&quot;</span>):</span><br><span class="line">        selected_Node[<span class="string">&#x27;tile_color&#x27;</span>].setValue(nuke.getColor())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addCommand(<span class="string">&#x27;Utilities/Node Customizer&#x27;</span>, <span class="string">&#x27;shortcut_NodeCustomizer.shortcut_NodeCustomizer()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="viWn2"></a></p><h1 id="第八节"><a href="#第八节" class="headerlink" title="第八节"></a>第八节</h1><p><a name="mX3Zb"></a></p><h2 id="TCL的使用，链接属性"><a href="#TCL的使用，链接属性" class="headerlink" title="TCL的使用，链接属性"></a>TCL的使用，链接属性</h2><p><a name="utf1K"></a></p><h2 id="moblur-controller-py"><a href="#moblur-controller-py" class="headerlink" title="moblur_controller.py"></a>moblur_controller.py</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666680535160-079a3a99-42ba-4263-88df-6b251e8831d7.png#clientId=u40b40fbc-04d8-4&from=paste&height=202&id=u69314819&originHeight=202&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10243&status=done&style=none&taskId=u740e63dc-e998-486e-8c27-af678f0d914&title=&width=538" alt="image.png"><br />创建NoOp节点配合TCL表达式，使只通过控制NoOp节点的数值，即可控制所有nuke节点网络图中带有对应属性的属性值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moblur_controller</span>():</span><br><span class="line">    node_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nuke.allNodes():</span><br><span class="line">        <span class="keyword">if</span> n.knob(<span class="string">&#x27;motionblur&#x27;</span>) <span class="keyword">or</span> n.knob(<span class="string">&#x27;samples&#x27;</span>):</span><br><span class="line">            node_list.append(n)</span><br><span class="line"></span><br><span class="line">    NoOp = nuke.createNode(<span class="string">&#x27;NoOp&#x27;</span>)  <span class="comment"># 使用TCL表达式需要的节点</span></span><br><span class="line">    NoOp[<span class="string">&#x27;name&#x27;</span>].setValue(<span class="string">&quot;GLOBAL_MOTIONBLUR_CONTROLLER&quot;</span>)</span><br><span class="line"></span><br><span class="line">    NoOp[<span class="string">&#x27;tile_color&#x27;</span>].setValue(<span class="number">255</span>)</span><br><span class="line">    NoOp[<span class="string">&#x27;note_font&#x27;</span>].setValue(<span class="string">&quot;Bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    NoOp.addKnob(nuke.Int_Knob(<span class="string">&#x27;global_motionblur&#x27;</span>, <span class="string">&quot;motionblur&quot;</span>))</span><br><span class="line">    NoOp.addKnob(nuke.Double_Knob(<span class="string">&#x27;global_shutter&#x27;</span>, <span class="string">&quot;shutter&quot;</span>))</span><br><span class="line">    NoOp.addKnob(nuke.Boolean_Knob(<span class="string">&#x27;global_disable_moblur&#x27;</span>, <span class="string">&quot;disable motionblur&quot;</span>))</span><br><span class="line"></span><br><span class="line">    NoOp[<span class="string">&#x27;global_motionblur&#x27;</span>].setValue(<span class="number">1</span>)</span><br><span class="line">    NoOp[<span class="string">&#x27;global_shutter&#x27;</span>].setValue(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    NoOp[<span class="string">&#x27;global_disable_moblur&#x27;</span>].setFlag(nuke.STARTLINE)  <span class="comment"># 设置将这个控件另起一行放置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="keyword">if</span> node.knob(<span class="string">&#x27;motionblur&#x27;</span>):</span><br><span class="line">            node[<span class="string">&#x27;motionblur&#x27;</span>].setExpression(</span><br><span class="line">                <span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.global_disable_moblur == 0 ? GLOBAL_MOTIONBLUR_CONTROLLER.global_motionblur : 0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            node[<span class="string">&#x27;shutter&#x27;</span>].setExpression(<span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.globsl_shutter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> node.knob(<span class="string">&#x27;samples&#x27;</span>):</span><br><span class="line">            node[<span class="string">&#x27;samples&#x27;</span>].setExpression(</span><br><span class="line">                <span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.global_disable_moblur == 0 ? GLOBAL_MOTIONBLUR_CONTROLLER.global_motionblur : 1&#x27;</span>)</span><br><span class="line">            node[<span class="string">&#x27;shutter&#x27;</span>].setExpression(<span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.globsl_shutter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当节点删除时执行这个函数功能，删除所有表达式链接，并将节点值设置回默认值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteExpressions</span>():</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="keyword">if</span> node.knob(<span class="string">&#x27;motionblur&#x27;</span>):</span><br><span class="line">                node[<span class="string">&#x27;motionblur&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;motionblur&#x27;</span>].setValue(<span class="number">0</span>)</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].setValue(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> node.knob(<span class="string">&#x27;samples&#x27;</span>):</span><br><span class="line">                node[<span class="string">&#x27;samples&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;samples&#x27;</span>].setValue(<span class="number">1</span>)</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].setValue(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    nuke.addOnDestroy(deleteExpressions)  <span class="comment"># 当节点删除时执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addCommand(<span class="string">&#x27;Utilities/Global Motionblur Controller&#x27;</span>, <span class="string">&#x27;moblur_controller.moblur_controller()&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="L4YSK"></a></p><h1 id="第九节"><a href="#第九节" class="headerlink" title="第九节"></a>第九节</h1><p><a name="iPCgW"></a></p><h2 id="使用nuke自带的自定义界面工具来扩展节点"><a href="#使用nuke自带的自定义界面工具来扩展节点" class="headerlink" title="使用nuke自带的自定义界面工具来扩展节点"></a>使用nuke自带的自定义界面工具来扩展节点</h2><p>在节点的属性界面右键点击<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666685695316-5b6919db-2a1e-4d59-9e72-bc44a1ba02fc.png#clientId=u40b40fbc-04d8-4&from=paste&height=116&id=u777bcd0b&originHeight=116&originWidth=181&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2754&status=done&style=none&taskId=u45e20dd0-a54d-467f-9b26-fe52861e02a&title=&width=181" alt="image.png"><br />然后就可以在这里自定义界面<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666685795462-10ff5dc3-adcf-4e9d-bfc1-e94cd3e40b72.png#clientId=u40b40fbc-04d8-4&from=paste&height=536&id=u4dab91b9&originHeight=536&originWidth=485&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29775&status=done&style=none&taskId=u1415f279-29cc-4186-b039-e0ab19fbd35&title=&width=485" alt="image.png"><br />其中divider line是分割线<br />然后UI可以附带代码<br><a name="N9zQn"></a></p><h3 id="addNodes"><a href="#addNodes" class="headerlink" title="addNodes"></a>addNodes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">node_list = []</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> nuke.selectedNodes():</span><br><span class="line">    node_list.append(node.name())</span><br><span class="line"></span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addMoreNodes&#x27;</span>).setVisible(<span class="literal">True</span>)</span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addNodes&#x27;</span>).setVisible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">node_list_cleaned = <span class="string">&#x27;\n·&#x27;</span>.join(node_list)</span><br><span class="line"></span><br><span class="line">nuke.thisNode()[<span class="string">&#x27;txtknob_node_list&#x27;</span>].setValue(<span class="string">&quot;·&quot;</span>+node_list_cleaned)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disableNodesInList</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="keyword">if</span> nuke.toNode(i).knob(<span class="string">&#x27;disable&#x27;</span>):</span><br><span class="line">            nuke.toNode(i).knob(<span class="string">&#x27;disable&#x27;</span>).setValue(nuke.thisNode().knob(<span class="string">&#x27;disable&#x27;</span>).value())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;-&quot;</span> + i + <span class="string">&quot;does not have a &#x27;disable&#x27; knob Ignoring...&quot;</span></span><br><span class="line">nuke.toNode(<span class="string">&quot;NODE_DISABLER&quot;</span>).knob(<span class="string">&quot;knobChanged&quot;</span>).setValue(<span class="string">&#x27;disableNodesInList()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="sk8La"></a></p><h3 id="addMoreNodes"><a href="#addMoreNodes" class="headerlink" title="addMoreNodes"></a>addMoreNodes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> nuke.selectedNodes():</span><br><span class="line">    <span class="keyword">if</span> node.name() <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="built_in">print</span> node.name()+<span class="string">&quot; is already in the list&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node_list.append(node.name())</span><br><span class="line"></span><br><span class="line">node_list_cleaned = <span class="string">&#x27;\n·&#x27;</span>.join(node_list)</span><br><span class="line"></span><br><span class="line">nuke.thisNode()[<span class="string">&#x27;txtknob_node_list&#x27;</span>].setValue(<span class="string">&quot;·&quot;</span>+node_list_cleaned)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ba93d"></a></p><h3 id="clearList"><a href="#clearList" class="headerlink" title="clearList"></a>clearList</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node_list = []</span><br><span class="line"></span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addNodes&#x27;</span>).setVisible(<span class="literal">True</span>)</span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addMoreNodes&#x27;</span>).setVisible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">nuke.thisNode()[<span class="string">&#x27;txtknob_node_list&#x27;</span>].setValue(<span class="string">&quot;None&quot;</span>)</span><br></pre></td></tr></table></figure><p><a name="lVd3t"></a></p><h2 id="将通过这种方法自定义的节点保存成gizmo"><a href="#将通过这种方法自定义的节点保存成gizmo" class="headerlink" title="将通过这种方法自定义的节点保存成gizmo"></a>将通过这种方法自定义的节点保存成gizmo</h2><p>在.nuke\gizmos文件夹中新建gizmo文件<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666687417594-6ea42975-c5bb-41d6-8dbb-e8bc93cb6f0e.png#clientId=u40b40fbc-04d8-4&from=paste&height=200&id=ue6c419a9&originHeight=200&originWidth=709&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13065&status=done&style=none&taskId=u1c1ee9d0-18de-4b2a-b5cc-6b814e755f5&title=&width=709" alt="image.png"><br />然后在nuke中选择节点按ctrl+c<br />然后进入gizmo文件按ctrl+v即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> cut_paste_input [stack <span class="number">0</span>]</span><br><span class="line">version <span class="number">10.5</span> v4</span><br><span class="line">push $cut_paste_input</span><br><span class="line">NoOp &#123;</span><br><span class="line"> name NODE_DISABLER</span><br><span class="line"> knobChanged disableNodesInList()</span><br><span class="line"> tile_color <span class="number">0xff</span></span><br><span class="line"> label <span class="string">&quot;\[expr \&#123; \[value disable] == true ? \&quot;Nodes Disabled\&quot; : \&quot;Nodes Enabled\&quot; \&#125;]&quot;</span></span><br><span class="line"> selected true</span><br><span class="line"> xpos -<span class="number">180</span></span><br><span class="line"> ypos -<span class="number">86</span></span><br><span class="line"> addUserKnob &#123;<span class="number">20</span> User&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">22</span> addNodes l <span class="string">&quot;Add Selected Nodes To List&quot;</span> T <span class="string">&quot;node_list = \[]\nfor node in nuke.selectedNodes():\n    node_list.append(node.name())\n\nnuke.thisNode().knob(&#x27;addMoreNodes&#x27;).setVisible(True)\nnuke.thisNode().knob(&#x27;addNodes&#x27;).setVisible(False)\n\nnode_list_cleaned = &#x27;\\n·&#x27;.join(node_list)\n\nnuke.thisNode()\[&#x27;txtknob_node_list&#x27;].setValue(\&quot;·\&quot;+node_list_cleaned)\n\ndef disableNodesInList():\n    for i in node_list:\n        if nuke.toNode(i).knob(&#x27;disable&#x27;):\n            nuke.toNode(i).knob(&#x27;disable&#x27;).setValue(nuke.thisNode().knob(&#x27;disable&#x27;).value())\n        else:\n            print \&quot;-\&quot; + i + \&quot;does not have a &#x27;disable&#x27; knob Ignoring...\&quot;\nnuke.toNode(\&quot;NODE_DISABLER\&quot;).knob(\&quot;knobChanged\&quot;).setValue(&#x27;disableNodesInList()&#x27;)&quot;</span> +STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">22</span> addMoreNodes l <span class="string">&quot;Add More Selected Nodes To List&quot;</span> +HIDDEN T <span class="string">&quot;for node in nuke.selectedNodes():\n    if node.name() in node_list:\n        print node.name()+\&quot; is already in the list\&quot;\n    else:\n        node_list.append(node.name())\n\nnode_list_cleaned = &#x27;\\n·&#x27;.join(node_list)\n\nnuke.thisNode()\[&#x27;txtknob_node_list&#x27;].setValue(\&quot;·\&quot;+node_list_cleaned)\n&quot;</span> +STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">22</span> clearList l <span class="string">&quot;Clear List&quot;</span> T <span class="string">&quot;node_list = \[]\n\nnuke.thisNode().knob(&#x27;addNodes&#x27;).setVisible(True)\nnuke.thisNode().knob(&#x27;addMoreNodes&#x27;).setVisible(False)\n\nnuke.thisNode()\[&#x27;txtknob_node_list&#x27;].setValue(\&quot;None\&quot;)&quot;</span> +STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> spacer l <span class="string">&quot; &quot;</span> -STARTLINE T <span class="string">&quot;    &quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">6</span> disable -STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> txtknob_node_list l <span class="string">&quot;NODE LIST:&quot;</span> T <span class="literal">None</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NukePy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NukePy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAYA PYTHON API</title>
      <link href="/2023/08/29/MayaPy-MAYA-PYTHON-API/"/>
      <url>/2023/08/29/MayaPy-MAYA-PYTHON-API/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="hWfDw"></a># 第二集面向对象编程<a name="Yl4GV"></a>## 类，对象和模块。类是一个蓝图，是一个数据的集合，根据类创建对象，也可以称为类的实例化，对象是基于类的结构的数据的集合，模块是类的集合。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1652688002940-a1974267-22d9-495d-aae0-641008d06936.png#averageHue=%23040404&clientId=ubc9b0c79-7263-4&from=paste&height=1053&id=ua1bf780d&originHeight=1053&originWidth=1896&originalType=binary&ratio=1&rotation=0&showTitle=false&size=328742&status=done&style=none&taskId=ubd677c03-9488-44b0-b709-4d689dfc8d4&title=&width=1896)<a name="nk7Xj"></a># 第三集maya api 术语<a name="cr2uH"></a>## dag path<a name="ziLh0"></a>### dag=directed acyclic graph有向非循环图树是一种很典型的有向非循环图<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1652699596042-6aaeb4ab-9afb-4154-9f27-c3d15287b097.png#averageHue=%23060606&clientId=ubc9b0c79-7263-4&from=paste&height=329&id=udd3d31e2&originHeight=329&originWidth=698&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39256&status=done&style=none&taskId=u2f0e2232-493a-4e6d-9f27-b3da2a3a2de&title=&width=698)<br />在maya中创建的物体对象，具有两个节点，一个transform节点，一个shape节点，transform节点定义了变换（xyz位置）旋转，缩放，shape节点定义了物体的形状。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1652700326243-a5174551-88c6-4b61-a5be-9c91ae4b756b.png#averageHue=%23090909&clientId=ubc9b0c79-7263-4&from=paste&height=400&id=ua142ac27&originHeight=400&originWidth=627&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52300&status=done&style=none&taskId=ub30c642c-09d7-4316-b567-c565d99ccf5&title=&width=627)![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1652699848427-f10df377-7b87-40d1-b448-740740d1bed3.png#averageHue=%23101010&clientId=ubc9b0c79-7263-4&from=paste&height=397&id=u35dfc191&originHeight=397&originWidth=748&originalType=binary&ratio=1&rotation=0&showTitle=false&size=112043&status=done&style=none&taskId=u55df21c1-19d8-4749-b465-aeceb855cd0&title=&width=748)<a name="JVrip"></a>### dg=dependency graph依赖图![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1652700312066-20bf1573-864e-49b4-906e-e7fc57d46b41.png#averageHue=%23080808&clientId=ubc9b0c79-7263-4&from=paste&height=346&id=ud8cb707e&originHeight=346&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51000&status=done&style=none&taskId=u4f18b9f5-0a11-4d9f-b917-739e87b87d3&title=&width=653)<p><a name="awTOD"></a></p><h3 id="dag-path"><a href="#dag-path" class="headerlink" title="dag path"></a>dag path</h3><p>dag path是从根到特定对象的路径，没有dag path，maya就不知道那个特定对象在世界空间的哪里。<br />因为当一个物体是另一个物体的子物体时，它的原点坐标就会变成它的父物体的当前坐标位置。<br />maya是通过dag path获得这些位置的。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652700814965-59307fc8-d171-42b0-8471-16a9f2da22b6.png#averageHue=%23050505&clientId=ubc9b0c79-7263-4&from=paste&height=685&id=uf368ccf8&originHeight=685&originWidth=1111&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110716&status=done&style=none&taskId=ue6ff3450-0403-4c8f-979b-2f5622f4e73&title=&width=1111" alt="image.png"></p><p><a name="kLYbE"></a></p><h2 id="MObject"><a href="#MObject" class="headerlink" title="MObject"></a>MObject</h2><p>MObject是model object的缩写 <br />MObject是可以访问maya的专门的处理程序，可以用来处理模型，渲染，灯光 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652701657933-aff5a074-7a3d-4857-955d-34da4aa497b4.png#averageHue=%23080808&clientId=ubc9b0c79-7263-4&from=paste&height=573&id=u1f4a393f&originHeight=573&originWidth=533&originalType=binary&ratio=1&rotation=0&showTitle=false&size=65804&status=done&style=none&taskId=ua4265d9a-8176-4364-8418-075524338bd&title=&width=533" alt="image.png"><br><a name="NyMMB"></a></p><h2 id="Selection-List"><a href="#Selection-List" class="headerlink" title="Selection List"></a>Selection List</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652701682100-5b20f116-3eca-4d78-9a4c-94259c9a79c9.png#averageHue=%23070707&clientId=ubc9b0c79-7263-4&from=paste&height=1044&id=u590c24db&originHeight=1044&originWidth=812&originalType=binary&ratio=1&rotation=0&showTitle=false&size=157832&status=done&style=none&taskId=u57ad142d-da2c-4b90-b4cc-a1122ade833&title=&width=812" alt="image.png"><br />方法有creating、add&#x2F;remove、walking(遍历)等<br><a name="bxYhz"></a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652704537426-f82d807a-e19f-4c62-aba3-3f9849253f2c.png#averageHue=%23060606&clientId=ubc9b0c79-7263-4&from=paste&height=947&id=u401852d7&originHeight=947&originWidth=1761&originalType=binary&ratio=1&rotation=0&showTitle=false&size=301614&status=done&style=none&taskId=ubbea4c4f-b64f-402a-afc9-f7614c69240&title=&width=1761" alt="image.png"></h2><p>说明：首先创建一个mSelectionList对象（mselectionList）（第一行），将obj放入到0的位置（第二行），然后创建一个mdagPath对象（mdagPath）（目前是空的）（第三行），然后将mSelectionList对象中的索引为0的obj的dagpath放入到MDagPath对象（mdagPath）中（现在mdagPath对象中拥有了obj的dagpath）（第四行），创建一个MObject对象（第五行），获得mSelectionList中索引为0的obj中的依赖节点给MObject对象（mobj）。<br />看那个手的图案下面有个obj我想大概意思是将obj对象与MObject对象建立关系，理解为指针就可以了。</p><p><strong>这里的pPlane1为maya中的模型名字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Selection List</span></span><br><span class="line">mSel = OpenMaya.MSelectionList()</span><br><span class="line">mSel.add(<span class="string">&quot;pPlane1&quot;</span>)</span><br><span class="line"><span class="comment"># 创建MObject和MDagPath</span></span><br><span class="line">mObj = OpenMaya.MObject()</span><br><span class="line">mDagPath = OpenMaya.MDagPath()</span><br><span class="line"><span class="comment"># 得到对象的依赖节点和dagpath</span></span><br><span class="line">mSel.getDependNode(<span class="number">0</span>,mObj)</span><br><span class="line">mSel.getDagPath(<span class="number">0</span>,mDagPath)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mDagPath.fullPathName()</span><br></pre></td></tr></table></figure><p><a name="pumb7"></a></p><h1 id="第四集获取和更改场景物体的属性"><a href="#第四集获取和更改场景物体的属性" class="headerlink" title="第四集获取和更改场景物体的属性"></a>第四集获取和更改场景物体的属性</h1><p><a name="EvmY2"></a></p><h2 id="先了解节点属性"><a href="#先了解节点属性" class="headerlink" title="先了解节点属性"></a>先了解节点属性</h2><p>例如创建一个平面，节点连接关系图如图所示：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139370624-f7b45cda-1cca-4a78-a530-77f88d8264c0.png#averageHue=%231b1b1a&clientId=u2d7ef19d-2bd1-4&from=paste&height=139&id=ued529cf0&originHeight=139&originWidth=645&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5563&status=done&style=none&taskId=ub5ab0927-cd65-4bfe-8636-7584c31e34e&title=&width=645" alt="image.png"><br />然后双击黄色的线就弹出窗口这样就可以进行左边的属性与右边的属性进行连接<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139420841-46b474e3-b2a1-4720-8b4d-6c66e15ac04f.png#averageHue=%23474746&clientId=u2d7ef19d-2bd1-4&from=paste&height=659&id=u88fda29a&originHeight=659&originWidth=536&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40552&status=done&style=none&taskId=ubb4ba258-9610-434f-8f44-5611fe018de&title=&width=536" alt="image.png">。<br><a name="SVPTp"></a></p><h2 id="MFnMesh"><a href="#MFnMesh" class="headerlink" title="MFnMesh"></a>MFnMesh</h2><p>首先需要理解一下什么是MFn，MFn是model function  set 的缩写意思是模型函数集（函数集是函数的集合的意思）。<br />然后MFnMesh接受一个网格类型，然后可以执行创建，修改， 更改边，面，细分等方法<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653118356724-e388e6ea-ccd6-4d22-a66c-4d01885434a9.png#averageHue=%23080808&clientId=ub0d197af-217a-4&from=paste&height=550&id=u6ac57003&originHeight=550&originWidth=451&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63501&status=done&style=none&taskId=uf26cc2ed-a649-45fd-a97b-44a8b5d4376&title=&width=451" alt="image.png"><br><a name="pDlxZ"></a></p><h2 id="MFnDependencyNode"><a href="#MFnDependencyNode" class="headerlink" title="MFnDependencyNode"></a>MFnDependencyNode</h2><p>MFnDependencyNode有创建修改检索等功能 针对的是dependency graph,接受的是dependency node 类型<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653119744005-205832c4-b0cf-4cdd-a82e-b82b2088d0a9.png#averageHue=%23070707&clientId=ub0d197af-217a-4&from=paste&height=485&id=uf8b1b4b8&originHeight=485&originWidth=544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63258&status=done&style=none&taskId=u0d6260aa-5617-45f5-9fbd-995ed5ea16c&title=&width=544" alt="image.png"><br><a name="MPqKm"></a></p><h2 id="MFnMesh和MFnDependencyNode接受的输入"><a href="#MFnMesh和MFnDependencyNode接受的输入" class="headerlink" title="MFnMesh和MFnDependencyNode接受的输入"></a>MFnMesh和MFnDependencyNode接受的输入</h2><p>它们接受的输入通常是MObject或者MDagPath（可以通过看官方文档查询）<br />这个上面的英语是 inputs to function set<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653137067965-99a6adbe-533c-49a1-9aab-45316b42eb99.png#averageHue=%23050505&clientId=u2d7ef19d-2bd1-4&from=paste&height=312&id=udc0ddb8b&originHeight=312&originWidth=584&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33457&status=done&style=none&taskId=ubb669d48-c9d7-442c-9284-6246761f329&title=&width=584" alt="image.png"><br />MFnMesh接受的输入是MObject或者MDagPath<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653137271876-e14e18bb-d4a4-4f32-adee-455bc9712134.png#averageHue=%23c0c4c3&clientId=u2d7ef19d-2bd1-4&from=paste&height=445&id=u8052b4e0&originHeight=445&originWidth=1811&originalType=binary&ratio=1&rotation=0&showTitle=false&size=443192&status=done&style=none&taskId=ud5c4c03c-743b-4b21-b9d3-07ee7e09333&title=&width=1811" alt="image.png"><br />而MFnDependencyNode能接受的输入只有MObject<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653137320474-2d3143dd-78b9-4eb8-8976-148f0ed3c518.png#averageHue=%23ebeeee&clientId=u2d7ef19d-2bd1-4&from=paste&height=466&id=u270af4c1&originHeight=466&originWidth=1757&originalType=binary&ratio=1&rotation=0&showTitle=false&size=484057&status=done&style=none&taskId=ucfd650f7-fa6e-444d-83c6-801daa12f3e&title=&width=1757" alt="image.png"><br />CSDN上的一些知识点：<br />API文档的坑：MStatus(其实是很多人没仔细看文档的锅……)<br />如果在学习python api前没有认真看过maya官方文档的相关文档，就会对api文档中的mstatus感觉困惑，这个东西是嘛，我们怎么用，为什么到处都是。我就说一句：api方法中的mstatus，你用python时候就当它不存在！是的，就是无视，这设计到maya软件的整体设计问题。Maya中的程序异常处理是使用的status code而非exception(早年C++异常处理的锅，大家都不敢用，吃性能还不讨好，但是现在maya想换也做不到了，历史包袱严重)，也就是说本身需要语言处理的事情，maya的系统自行设计了一套处理机制，而异常的消息传递，就是靠的status code，也就是mstatus，这也是maya api中mstatus无处不在的原因。但是python不需要啊！Python有完备的异常处理机制，干嘛用status code。所以python api就没有mstatus，我们也就不需要管它。</p><p><a name="X0Jlh"></a></p><h2 id="MPlug与MPlugArray"><a href="#MPlug与MPlugArray" class="headerlink" title="MPlug与MPlugArray"></a>MPlug与MPlugArray</h2><p>通过观看视频我理解的plug的意思应该就是模型对象的属性，分两种类型<br />network plug ： dependency node plug   意思是在DG中建立连接的属性<br />non-network plug ： user-defined plug 意思应该是用户自定义的属性，还没有建立连接。<br />看这里，一个节点有多种属性，然后如果我们要操控这些属性，需要通过这个手图案来管理属性，进行创建修改访问的操作。handle 代表了属性名字例如weight，height，subdivisionsWidth<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139225937-9f5b0179-954e-42cf-bd38-157e612cb4d3.png#averageHue=%230b0b0b&clientId=u2d7ef19d-2bd1-4&from=paste&height=195&id=u458fb14d&originHeight=195&originWidth=304&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23208&status=done&style=none&taskId=ub704ddab-6500-407a-bf78-1b5936dbd41&title=&width=304" alt="image.png"><br />理解了plug的意思后，接下来理解plug array的意思：<br />plug array通过看了视频我理解的是：<br />一个节点的<strong>plug array 是一个列表</strong>，列表中存在着这个节点的所有连接，包括输入和输出。<br />例如pPlaneShape1的输入 pPlaneShpae1.inMesh是plug array中的一个值。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139633802-5ace5d83-d835-45c6-b22f-32bb9fbf58b3.png#averageHue=%2358492a&clientId=u2d7ef19d-2bd1-4&from=paste&height=80&id=ucb03fadf&originHeight=80&originWidth=444&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4719&status=done&style=none&taskId=ubff743ef-c8d3-4e18-8d37-dcd2238c6f3&title=&width=444" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653122997614-17c2ac9e-49e9-4153-aed1-2592f3e2f451.png#averageHue=%23040404&clientId=ub0d197af-217a-4&from=paste&height=837&id=u2f180fa3&originHeight=837&originWidth=1434&originalType=binary&ratio=1&rotation=0&showTitle=false&size=187902&status=done&style=none&taskId=udaedd2c0-2bde-4cb1-a2d5-946cb2d89f4&title=&width=1434" alt="image.png"></p><p><a name="F1xhz"></a></p><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653124553672-713aa0a8-831d-460a-b959-c45bf4d001d6.png#averageHue=%231b1a19&clientId=ub0d197af-217a-4&from=paste&height=700&id=DitNZ&originHeight=700&originWidth=1425&originalType=binary&ratio=1&rotation=0&showTitle=false&size=168236&status=done&style=none&taskId=u660f4a87-8fc5-4f47-a1bb-0a7d5ad6dce&title=&width=1425" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669968246970-4e2f1fe8-5b2c-49d6-982f-0b388c7e14eb.png#averageHue=%23474746&clientId=u2cf0e87e-69bf-4&from=paste&height=481&id=ud3560693&originHeight=433&originWidth=1035&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49763&status=done&style=none&taskId=u5d6b96d6-87f4-4716-876d-c28742f5fd5&title=&width=1150.000030464597" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建一个 Selection List并将场景物体添加至SelectionList</span></span><br><span class="line">mSel = OpenMaya.MSelectionList()</span><br><span class="line">mSel.add(<span class="string">&quot;pPlane1&quot;</span>)</span><br><span class="line"><span class="comment"># 2.创建MObject和MDagPath</span></span><br><span class="line">mObj = OpenMaya.MObject() <span class="comment"># 创建一个空的mObj</span></span><br><span class="line">mDagPath = OpenMaya.MDagPath()</span><br><span class="line"><span class="comment"># 3.得到对象的依赖节点和dag路径</span></span><br><span class="line">mSel.getDependNode(<span class="number">0</span>,mObj)</span><br><span class="line">mSel.getDagPath(<span class="number">0</span>,mDagPath)</span><br><span class="line"><span class="built_in">print</span> mDagPath.fullPathName() <span class="comment"># 输出|pPlane1</span></span><br><span class="line"><span class="comment"># 4.Mesh function set 获得网格函数集</span></span><br><span class="line">mFnMesh = OpenMaya.MFnMesh(mDagPath)</span><br><span class="line"><span class="built_in">print</span> mFnMesh.fullPathName() <span class="comment"># 输出|pPlane1|pPlaneShape1</span></span><br><span class="line"><span class="comment"># 5.Dependency Node function set 获得依赖节点函数集</span></span><br><span class="line">mFnDependNode = OpenMaya.MFnDependencyNode(mObj)</span><br><span class="line"><span class="built_in">print</span> mFnDependNode.name() <span class="comment"># 输出pPlane1,pPlane1是模型的transform节点,它不需要dagpath因此只需要使用name方法就可以了</span></span><br><span class="line"><span class="comment"># 6.获取shape节点的所有连接</span></span><br><span class="line">mPlugArray = OpenMaya.MPlugArray() <span class="comment"># 创建一个MPlugArray对象来管理shape节点的输入输出</span></span><br><span class="line">mFnMesh.getConnections(mPlugArray) </span><br><span class="line">mPlugArray.length() <span class="comment"># 输出pPlaneShape1节点的连接个数 2</span></span><br><span class="line"><span class="built_in">print</span> mPlugArray[<span class="number">0</span>].name() <span class="comment"># 输出pPlaneShape1.instObjGroups[0] 它是shape节点的输出</span></span><br><span class="line"><span class="built_in">print</span> mPlugArray[<span class="number">1</span>].name() <span class="comment"># 输出pPlaneShape1.inMesh 它是shape节点的输入</span></span><br><span class="line"></span><br><span class="line">mPlugArray2 = OpenMaya.MPlugArray() <span class="comment"># 再创建一个MPlugArray对象来管理用来polyPlane节点的输入输出</span></span><br><span class="line">mPlugArray[<span class="number">1</span>].connectedTo(mPlugArray2,<span class="literal">True</span>,<span class="literal">False</span>) <span class="comment"># 寻找mPlugArray[1]为目标的所有plug并存入mPlugArray2中，True，False意思是目标为True，源为False，意思是mPlugArray[1]是下游，不是上游</span></span><br><span class="line"><span class="built_in">print</span> mPlugArray2.length() <span class="comment"># 输出1</span></span><br><span class="line"><span class="comment"># 不能使用：len(mPlugArray2)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mPlugArray2[<span class="number">0</span>].name() <span class="comment"># 输出polyPlane1.output</span></span><br><span class="line"></span><br><span class="line">mObj2 = mPlugArray2[<span class="number">0</span>].node() <span class="comment"># 得到MObject类型指向polyPlane1</span></span><br><span class="line"></span><br><span class="line">mFnDependNode2 = OpenMaya.MFnDependencyNode(mObj2) <span class="comment"># 为polyPlane1创建节点对象函数集</span></span><br><span class="line"><span class="built_in">print</span> mFnDependNode2.name() <span class="comment"># 输出polyPlane1</span></span><br><span class="line"></span><br><span class="line">mPlug_width = mFnDependNode2.findPlug(<span class="string">&quot;width&quot;</span>) <span class="comment"># 找到polyPlane1的width属性</span></span><br><span class="line">mPlug_height = mFnDependNode2.findPlug(<span class="string">&quot;height&quot;</span>) <span class="comment"># 找到polyPlane1的height属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mPlug_width.asInt() <span class="comment"># 输出polyPlane1的width的值</span></span><br><span class="line"><span class="built_in">print</span> mPlug_height.asInt() <span class="comment"># 输出polyPlane1的height的值</span></span><br><span class="line"></span><br><span class="line">mPlug_subWidth = mFnDependNode2.findPlug(<span class="string">&quot;subdivisionsWidth&quot;</span>) <span class="comment"># 找到polyPlane1的subdivisionsWidth属性</span></span><br><span class="line">mPlug_subHeight = mFnDependNode2.findPlug(<span class="string">&quot;subdivisionsHeight&quot;</span>) <span class="comment"># # 找到polyPlane1的subdivisionsHeight属性</span></span><br><span class="line">mPlug_subWidth.setInt(<span class="number">10</span>) <span class="comment"># 设置subdivisionsWidth值为10</span></span><br><span class="line">mPlug_subHeight.setInt(<span class="number">10</span>) <span class="comment"># 设置subdivisionHeight值为10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mPlug_subWidth.asInt() <span class="comment"># 得到mPlug_subWidth的整数值并输出</span></span><br><span class="line"><span class="built_in">print</span> mPlug_subHeight.asInt() <span class="comment"># 得到mPlug_subHeight的整数值并输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="WBcTy"></a></p><h1 id="第五集-命令通信流"><a href="#第五集-命令通信流" class="headerlink" title="第五集 命令通信流"></a>第五集 命令通信流</h1><p><strong>编写命令插件有三个重要的事情</strong><br />1、function 函数<br />2、initialization 初始化  &#x2F;  registration 注册<br />3、 Un-initialization 取消初始化&#x2F; De-registration取消注册<br /><strong>什么是initialization&#x2F;registration，什么是Un-initialization&#x2F;De-registration？</strong><br />给maya core发送内容叫initialization或者叫registration<br />从maya core 移除内容叫Un-initialization或者叫De-registration<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654567983120-7ae8bca6-3bc4-41ff-9d0b-3e9f64abd33f.png#averageHue=%23070707&clientId=ua5a358c9-400c-4&from=paste&height=542&id=u04d779ec&originHeight=542&originWidth=557&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63659&status=done&style=none&taskId=u3d808fc5-a0af-4fc2-8269-ce4aa2c109f&title=&width=557" alt="image.png"><br /><strong>命令通信流</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654568135472-a043ff60-8da1-4f98-8029-3db282de0623.png#averageHue=%236d6b5e&clientId=ua5a358c9-400c-4&from=paste&height=645&id=u81f06b24&originHeight=645&originWidth=654&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154797&status=done&style=none&taskId=u92434028-1c71-4d50-a707-535c573e18b&title=&width=654" alt="image.png"><br />流程：写了一个Class，然后根据Class创建对象，然后我们会赋予指向这个实例的指针（这对于注册这个命令插件是有很大帮助的），然后我们会要求maya生成一个Handle （MObject）抓住指针，然后这个handle会从maya core 中带来实例<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654568454024-b97c2b67-2df4-4955-a08c-ffd307bfd6a0.png#averageHue=%23030302&clientId=ua5a358c9-400c-4&from=paste&height=1322&id=u7f352b5f&originHeight=1322&originWidth=2569&originalType=binary&ratio=1&rotation=0&showTitle=false&size=266213&status=done&style=none&taskId=u660bc2f1-0754-4848-8c28-9696240a0ac&title=&width=2569" alt="image.png"><br><a name="tHYsJ"></a></p><h1 id="第六集-编写命令插件（跟第五集相关联）"><a href="#第六集-编写命令插件（跟第五集相关联）" class="headerlink" title="第六集 编写命令插件（跟第五集相关联）"></a>第六集 编写命令插件（跟第五集相关联）</h1><p>目的：通过配合MPxCommand写一个命令，然后保存好并加载进maya的插件中以后，就可以通过maya.cmds直接使用这个命令。比如通过MpxCommand写了一个输出hello world的功能，写好保存加载好以后，就可以直接通过cmds使用那个功能来输出hello world。总之，这节课的目的就是教我们如何扩展maya的命令也就是编写命令插件。<br />经过上一集的介绍，我们也大概了解了maya的内部流程，因此我们通过这个流程来编写命令插件。<br />所需要的编写规范可以参考一下官方给的范例：<a href="https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_py_ref_scripted_2hello_world_cmd_8py_example_html">https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_py_ref_scripted_2hello_world_cmd_8py_example_html</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654585168421-378f7b25-d83e-4a87-80af-5965c8c63712.png#averageHue=%23070707&clientId=ua5a358c9-400c-4&from=paste&height=611&id=uee806a44&originHeight=611&originWidth=1229&originalType=binary&ratio=1&rotation=0&showTitle=false&size=249000&status=done&style=none&taskId=u6daf5f25-c46a-443a-9d07-d90101fcb7a&title=&width=1229" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 当制作自定义的命令时需要导入此类来制作</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">commandName = <span class="string">&quot;pluginCommand&quot;</span>  <span class="comment"># 定义命令的名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pluginCommand</span>(OpenMayaMPx.MPxCommand):  <span class="comment"># 创建自定义的命令需要继承MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxCommand.__init__(self) <span class="comment"># 初始化此自定义类的同时也需要初始化MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>): <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;doIt...&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdCreator</span>():  <span class="comment"># 为实例化的类创建指针</span></span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(pluginCommand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(commandName, cmdCreator)  <span class="comment"># 使用函数库中的注册命令，来注册我们自定义的命令，需要命令的名字和指向命令的指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + commandName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(commandName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + commandName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码完成后需要通过脚本编辑器将它们保存为脚本文件。<br /><strong>通过UI加载这个脚本文件</strong><br />进入插件管理器，选择浏览，选择我们刚才保存的脚本文件。记载后就可以在脚本编辑器中使用这个自定义的命令了。<br />范例：<br />import maya.cmds as cmds<br />cmds.pluginCommand()<br />结果输出：doIt…<br /><strong>通过python命令加载脚本文件</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654591451689-7b0bff27-6b57-4778-a67a-301fae10a797.png#averageHue=%2344412a&clientId=ua5a358c9-400c-4&from=paste&height=104&id=uc6d364f2&originHeight=104&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83902&status=done&style=none&taskId=ufd5b8614-b788-4ca3-8fc6-e14187f8430&title=&width=990" alt="image.png"><br />其中参数为脚本文件的路径<br><a name="IqhGb"></a></p><h1 id="第七集-迭代器"><a href="#第七集-迭代器" class="headerlink" title="第七集 迭代器"></a>第七集 迭代器</h1><p>一些概念在TD技能学院上面介绍了，这里就不介绍了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 实现打印出完整的场景层次结构</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Dag迭代器，第一个参数指定迭代器的迭代类型是深度优先还是广度优先，第二个参数是指定迭代器迭代过滤类型，kInvalid意思是不过滤</span></span><br><span class="line">dagIterator = OpenMaya.MItDag(OpenMaya.MItDag.kBreadthFirst, OpenMaya.MFn.kInvalid)</span><br><span class="line"><span class="comment"># 创建一个dagNode的函数库提供给dagNode类型的对象使用(目前为空)</span></span><br><span class="line">dagNodeFn = OpenMaya.MFnDagNode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">not</span> dagIterator.isDone()):</span><br><span class="line">    currentObj = dagIterator.currentItem()  <span class="comment"># currentObj代表着当前迭代对象类型为MObject</span></span><br><span class="line">    depth = dagIterator.depth()  <span class="comment"># depth代表着当前节点在DAG中相对于根节点的高度或深度</span></span><br><span class="line">    dagNodeFn.setObject(currentObj)  <span class="comment"># 为当前迭代对象提供函数库,函数库能够针对当前迭代对象使用方法</span></span><br><span class="line"></span><br><span class="line">    name = dagNodeFn.name()  <span class="comment"># 得到当前迭代对象的名字</span></span><br><span class="line">    <span class="built_in">type</span> = currentObj.apiTypeStr()  <span class="comment"># 得到当前迭代对象的类型</span></span><br><span class="line">    path = dagNodeFn.fullPathName()  <span class="comment"># 返回一个字符串，表示从dag的根到此对象的完整路径。</span></span><br><span class="line"></span><br><span class="line">    printOut = <span class="string">&quot;&quot;</span>  <span class="comment"># 定义一个printOut对象来当要输出信息的对象</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, depth):  <span class="comment"># 根据当且迭代对象的深度为其增加相应个数的箭头来表示</span></span><br><span class="line">        printOut += <span class="string">&quot;------&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    printOut += name + <span class="string">&quot; : &quot;</span> + <span class="built_in">type</span>  <span class="comment"># 输出格式为名字加类型</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> printOut</span><br><span class="line">    dagIterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再复习一下上一集的编写命令插件<br />将制作输出一个字符串命令改为输出当前场景的完整层次结构。<br />就是将print “doIt…”更改为这节的功能代码然后更改一下当时定义命令的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 当制作自定义的命令时需要导入此类来制作</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">commandName = <span class="string">&quot;printHierarchy&quot;</span>  <span class="comment"># 定义命令的名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pluginCommand</span>(OpenMayaMPx.MPxCommand):  <span class="comment"># 创建自定义的命令需要继承MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxCommand.__init__(self) <span class="comment"># 初始化此自定义类的同时也需要初始化MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>): <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        <span class="comment"># 创建一个Dag迭代器，第一个参数指定迭代器的迭代类型是深度优先还是广度优先，第二个参数是指定迭代器迭代过滤类型，kInvalid意思是不过滤</span></span><br><span class="line">        dagIterator = OpenMaya.MItDag(OpenMaya.MItDag.kBreadthFirst, OpenMaya.MFn.kInvalid)</span><br><span class="line">        <span class="comment"># 创建一个dagNode的函数库提供给dagNode类型的对象使用(目前为空)</span></span><br><span class="line">        dagNodeFn = OpenMaya.MFnDagNode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> dagIterator.isDone()):</span><br><span class="line">            currentObj = dagIterator.currentItem()  <span class="comment"># currentObj代表着当前迭代对象类型为MObject</span></span><br><span class="line">            depth = dagIterator.depth()  <span class="comment"># depth代表着当前节点在DAG中相对于根节点的高度或深度</span></span><br><span class="line">            dagNodeFn.setObject(currentObj)  <span class="comment"># 为当前迭代对象提供函数库,函数库能够针对当前迭代对象使用方法</span></span><br><span class="line"></span><br><span class="line">            name = dagNodeFn.name()  <span class="comment"># 得到当前迭代对象的名字</span></span><br><span class="line">            <span class="built_in">type</span> = currentObj.apiTypeStr()  <span class="comment"># 得到当前迭代对象的类型</span></span><br><span class="line">            path = dagNodeFn.fullPathName()  <span class="comment"># 返回一个字符串，表示从dag的根到此对象的完整路径。</span></span><br><span class="line"></span><br><span class="line">            printOut = <span class="string">&quot;&quot;</span>  <span class="comment"># 定义一个printOut对象来当要输出信息的对象</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, depth):  <span class="comment"># 根据当且迭代对象的深度为其增加相应个数的箭头来表示</span></span><br><span class="line">                printOut += <span class="string">&quot;------&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">            printOut += name + <span class="string">&quot; : &quot;</span> + <span class="built_in">type</span>  <span class="comment"># 输出格式为名字加类型</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> printOut</span><br><span class="line">            dagIterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdCreator</span>():  <span class="comment"># 为实例化的类创建指针</span></span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(pluginCommand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(commandName, cmdCreator)  <span class="comment"># 使用函数库中的注册命令，来注册我们自定义的命令，需要命令的名字和指向命令的指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + commandName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(commandName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + commandName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="KwVk8"></a></p><h1 id="第八集-带参数的自定义命令"><a href="#第八集-带参数的自定义命令" class="headerlink" title="第八集 带参数的自定义命令"></a>第八集 带参数的自定义命令</h1><p>命令与参数：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654654142735-9db6408b-637b-4325-b4e9-4582e9359024.png#averageHue=%23060606&clientId=ucf657a1b-3cc9-4&from=paste&height=412&id=ub91f598e&originHeight=412&originWidth=891&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99488&status=done&style=none&taskId=ud0438dce-50e5-42e2-8c50-c3e4ee762b1&title=&width=891" alt="image.png"><br><a name="pOGMJ"></a></p><h2 id="MSyntax和MArgDatabase"><a href="#MSyntax和MArgDatabase" class="headerlink" title="MSyntax和MArgDatabase"></a>MSyntax和MArgDatabase</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654654751391-053205e6-58e7-4e4c-ab2a-6df862605f10.png#averageHue=%23070707&clientId=ucf657a1b-3cc9-4&from=paste&height=619&id=ub6dfa1c1&originHeight=619&originWidth=1046&originalType=binary&ratio=1&rotation=0&showTitle=false&size=275699&status=done&style=none&taskId=ue5932f12-e5c2-45db-af62-beff1bdc73e&title=&width=1046" alt="image.png"><br />parsing：语法分析<br />storing：储存<br />retrieving：检索<br />通过MSyntax定义我们的脚本命令接受什么类型的flag还有arguments还有object，然后maya会判断这个传入的参数是否可以接受。<br />MArgDatabase是一个类，它可以分析储存与检索flag和flag arguments 和object<br />如果我们更加深入地了解MArgDatabase，我们会发现它派生了MArgParser类<br />通过MSyntax和MArgDatabase我们可以接受标志参数和对象并解析他们并存储他们，基于这些值我们可以执行某些操作。<br><a name="PZWNj"></a></p><h2 id="maya-的undo-和redo"><a href="#maya-的undo-和redo" class="headerlink" title="maya 的undo 和redo"></a>maya 的undo 和redo</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654657249311-83584b52-bb25-4c79-8b56-137deaba4407.png#averageHue=%23323131&clientId=ucf657a1b-3cc9-4&from=paste&height=415&id=ucf17a14b&originHeight=415&originWidth=1004&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76752&status=done&style=none&taskId=u2b2f7b2f-3994-431d-bd2c-95ba9e19808&title=&width=1004" alt="image.png"><br />maya在执行一个命令时，undo（撤销）框架下会存储相同的命令，当执行undo命令时，undo框架下的命令将会移动到redo框架上面。<br />当我们自己自定义一个命令时也要同时定义一个undo和redo函数。<br><a name="vGebW"></a></p><h2 id="新增代码过程"><a href="#新增代码过程" class="headerlink" title="新增代码过程"></a>新增代码过程</h2><p>1.首先在新建的命令类之外定义一个syntaxCreator函数，写一个MSyntax类的对象，为这个对象定义新增的标志（flag），然后返回这个对象。<br />2.在初始化注册函数中的注册方法中新增刚才定义的带标志的语法对象（通过synaxCreator函数来得到(不需要在函数后面加括号)）。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654761391104-8b281824-2418-4e86-b894-7fd9095e2036.png#averageHue=%23040303&clientId=uf9589504-71a5-4&from=paste&height=958&id=u0f0c1ab2&originHeight=958&originWidth=1096&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127693&status=done&style=none&taskId=uefb6751e-3248-484e-b28e-cbc46f0141f&title=&width=1096" alt="image.png"><br />3.在命令类之内新建一个argmentParser（参数解析器）函数用来解析argList，通过MArgDatabase类中的方法，来判断传入的标志与参数。<br />4.在doIt函数中首先使用这个argmentParser函数来解析参数，然后根据参数的内容有无（默认参数为None）来决定执行redoIt（真正的实现执行功能的函数）,之所以使用将实现功能的命令都放到redoIt函数中是因为当我们执行了undo（撤销）操作后会调用undoIt函数，然后如果再使用redo（重做；取消撤销）操作后会执行redoIt函数，redo后就需要再次实现功能了，因此把功能命令都放到redoIt函数中，doIt函数调用redoIt就好了。<br />5.redoIt函数中的逻辑如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654783736392-7b1ddd64-5d06-4be1-bf55-6fb041a44c93.png#averageHue=%23080808&clientId=u5ef47344-949c-4&from=paste&height=462&id=uae6bc522&originHeight=462&originWidth=1183&originalType=binary&ratio=1&rotation=0&showTitle=false&size=180631&status=done&style=none&taskId=u6ccbf6f1-c885-4383-bde0-aa40fb9a37a&title=&width=1183" alt="image.png"><br />首先读取所选择的物体，然后读取物体的点的位置信息，然后创建一个粒子发射系统，然后将粒子系统发射的粒子移动到物体点的位置上去。<br />6.定义isUndoable函数，返回True，意思是定义我们要新加的功能是可以撤销的。<br />7.定义undoIt函数，当我们执行撤销操作时会调用这个函数。<br />8.Maya api中MStatus的更新<a href="https://zhuanlan.zhihu.com/p/508453168">https://zhuanlan.zhihu.com/p/508453168</a><br />在2013后的版本中，Maya_api将MStatus从库中删除了，在编写脚本时要用python自带的异常捕获机制来代替。<br />若继续使用MStatus会报错‘module’ object has no attribute ‘MStatus’<br />简单的代替方法：<br />原：OpenMaya.MStatus.kUnKonwnParameter更改为return ‘unknown’<br />原OpenMaya.MStatus.kSuccess的，直接删掉就好了。<br><a name="FoNsq"></a></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 这个命令是制作特效，将顶点转换成粒子</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 当制作自定义的命令时需要导入此类来制作</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaFX <span class="keyword">as</span> OpenMayaFX</span><br><span class="line"></span><br><span class="line">commandName = <span class="string">&quot;vertexPartial&quot;</span>  <span class="comment"># 定义命令的名字</span></span><br><span class="line"></span><br><span class="line">kHelpFlag = <span class="string">&quot;-h&quot;</span></span><br><span class="line">kHelpLongFlag = <span class="string">&quot;-help&quot;</span></span><br><span class="line">kSparseFlag = <span class="string">&quot;-s&quot;</span></span><br><span class="line">kSparseLongFlag = <span class="string">&quot;-sparse&quot;</span>  <span class="comment"># 这个标志用来控制每多少顶点生成一个粒子</span></span><br><span class="line">helpMessage = <span class="string">&quot;This command is used to attach a particle on each vertex of a poly mesh&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pluginCommand</span>(OpenMayaMPx.MPxCommand):  <span class="comment"># 创建自定义的命令需要继承MPxCommand</span></span><br><span class="line">    sparse = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxCommand.__init__(self)  <span class="comment"># 初始化此自定义类的同时也需要初始化MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">argumentParser</span>(<span class="params">self, argList</span>):  <span class="comment"># 分析参数的作用</span></span><br><span class="line">        syntax = self.syntax()  <span class="comment"># 使用继承的MPxCommand中的函数</span></span><br><span class="line">        parsedArguments = OpenMaya.MArgDatabase(syntax, argList)  <span class="comment"># 创建MArgDatabase对象接收传入的参数</span></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kSparseFlag):  <span class="comment"># 判断传入的对应的标志</span></span><br><span class="line">            self.sparse = parsedArguments.flagArgumentDouble(kSparseFlag, <span class="number">0</span>)  <span class="comment"># flagArgumentDouble接收两个参数，第二个是序列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kSparseLongFlag):</span><br><span class="line">            self.sparse = parsedArguments.flagArgumentDouble(kSparseFlag, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kHelpFlag):  <span class="comment"># 如果标志是help就输出帮助信息</span></span><br><span class="line">            self.setResult(helpMessage)  <span class="comment"># 返回输出帮助信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kHelpLongFlag):</span><br><span class="line">            self.setResult(helpMessage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isUndoable</span>(<span class="params">self</span>):  <span class="comment"># 设置为可以撤销的命令</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undoIt</span>(<span class="params">self</span>):  <span class="comment"># 执行撤销操作时的步骤</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;undo&quot;</span></span><br><span class="line">        mFnDagNode = OpenMaya.MFnDagNode(self.mobj_particle)  <span class="comment"># 为创建的粒子系统绑定函数库</span></span><br><span class="line">        mDagMod = OpenMaya.MDagModifier()  <span class="comment"># 创建一个用来更改Dag的对象</span></span><br><span class="line">        mDagMod.deleteNode(mFnDagNode.parent(<span class="number">0</span>))  <span class="comment"># 删除通过redoIt函数创建的粒子系统的transform</span></span><br><span class="line">        mDagMod.doIt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">redoIt</span>(<span class="params">self</span>):  <span class="comment"># 这是主要实现功能的函数，放到redoIt是因为执行undo操作后如果再执行redo就会跳到这里，doit时也会使用这个redoIt函数</span></span><br><span class="line">        mSel = OpenMaya.MSelectionList()</span><br><span class="line">        mDagPath = OpenMaya.MDagPath()</span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh()</span><br><span class="line">        OpenMaya.MGlobal.getActiveSelectionList(mSel)  <span class="comment"># 使用全局方法中的获取选择的物体并添加到列表对象中的方法</span></span><br><span class="line">        <span class="keyword">if</span> mSel.length() &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                mSel.getDagPath(<span class="number">0</span>, mDagPath)  <span class="comment"># 获取列表中的物体的dagPath并赋值</span></span><br><span class="line">                mFnMesh.setObject(mDagPath)  <span class="comment"># 将物体与函数库绑定</span></span><br><span class="line">            <span class="keyword">except</span>:  <span class="comment"># 如果选择的物体不是mesh那么会执行这个</span></span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Select a poly mesh&quot;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果没有选择物体会执行这个</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Select a poly mesh&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">        mPointArray = OpenMaya.MPointArray()  <span class="comment"># 创建一个点的数组对象</span></span><br><span class="line">        mFnMesh.getPoints(mPointArray, OpenMaya.MSpace.kWorld)  <span class="comment"># 将物体的点的位置信息赋予数组，在世界空间下</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a particle system</span></span><br><span class="line">        mFnParticle = OpenMayaFX.MFnParticleSystem()</span><br><span class="line">        self.mobj_particle = mFnParticle.create()  <span class="comment"># 通过粒子系统函数库中的create方法得到一个粒子发射器并且是Mobject类型并且是shape节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># To fix Maya bug</span></span><br><span class="line">        mFnParticle = OpenMayaFX.MFnParticleSystem(self.mobj_particle)</span><br><span class="line"></span><br><span class="line">        counter = <span class="number">0</span>  <span class="comment"># 创建一个变量用来记录粒子个数</span></span><br><span class="line">        <span class="comment"># 在for循环中使用xrange和range功能是一样的，xrange是python2独有的方法，xrange更节省性能，xrange与range的区别是xrange生成的是生成器而range是列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPointArray.length()):</span><br><span class="line">            <span class="keyword">if</span> i % self.sparse == <span class="number">0</span>:  <span class="comment"># 根据sparse的数值决定以多少顶点为单位发射粒子</span></span><br><span class="line">                mFnParticle.emit(mPointArray[i])</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Total Points :&quot;</span> + <span class="built_in">str</span>(counter)</span><br><span class="line">        mFnParticle.saveInitialState()  <span class="comment"># 重置粒子的当前状态为初始状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>):  <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        self.argumentParser(argList)  <span class="comment"># 执行命令前先通过参数诊断功能诊断一下参数</span></span><br><span class="line">        <span class="keyword">if</span> self.sparse != <span class="literal">None</span>:  <span class="comment"># 如果给了sparse（标志）参数 那么就执行后面的命令</span></span><br><span class="line">            self.redoIt()  <span class="comment"># 之所以在doIt中使用redoIt是因为当我们执行undo操作后再redo操作时依然会执行我们的功能实现命令，因此将功能实现命令放到redoIt中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># creator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdCreator</span>():  <span class="comment"># 为实例化的类创建指针</span></span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(pluginCommand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">syntaxCreator</span>():</span><br><span class="line">    <span class="comment"># create MSyntax object</span></span><br><span class="line">    syntax = OpenMaya.MSyntax()</span><br><span class="line">    <span class="comment"># collect/add the flags</span></span><br><span class="line">    syntax.addFlag(kHelpFlag, kHelpLongFlag)  <span class="comment"># 定义每个命令都需要的help标志（短名和长名，不需要定义接受的数据的类型）</span></span><br><span class="line">    syntax.addFlag(kSparseFlag, kSparseLongFlag, OpenMaya.MSyntax.kDouble)  <span class="comment"># 定义接受的flag以及接受的数据的类型</span></span><br><span class="line">    <span class="comment"># return MSyntax</span></span><br><span class="line">    <span class="keyword">return</span> syntax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(commandName, cmdCreator, syntaxCreator)  <span class="comment"># 使用函数库中的注册命令，来注册我们自定义的命令，需要命令的名字和指向命令的指针以及语法</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + commandName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(commandName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + commandName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="jU2gx"></a></p><h1 id="第九集-Dependency-graph"><a href="#第九集-Dependency-graph" class="headerlink" title="第九集  Dependency graph"></a>第九集  Dependency graph</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654827627060-a933b100-c7f9-4ea3-ae7b-b7fb1e48e9b2.png#averageHue=%23090909&clientId=uef2f4691-1f38-4&from=paste&height=155&id=u5d27acdc&originHeight=155&originWidth=285&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18008&status=done&style=none&taskId=ucd91a86b-1ead-4ecb-a54d-34aac3ed40f&title=&width=285" alt="image.png"><br><a name="Fo3yF"></a></p><h2 id="Dirty-Propagation-、Push-Pull-Mechanism、-Lazy-Evaluation"><a href="#Dirty-Propagation-、Push-Pull-Mechanism、-Lazy-Evaluation" class="headerlink" title="Dirty Propagation 、Push &amp; Pull Mechanism、 Lazy Evaluation"></a>Dirty Propagation 、Push &amp; Pull Mechanism、 Lazy Evaluation</h2><p>这三个术语通过举例来理解：假如你必须洗衣服，然后走进洗衣房，你会看到那里有几个洗衣机几个干衣机和几个与干衣机相关的桶，它们上面还有计时器记录剩余的时间，你根据它们的剩余时间将它们标记为红色，当你真正去洗衣烘干放入桶中后你会将它们标记为绿色。这是Dirty propagation（红色）  以及 Push&amp;Pull Mechanism（绿色），这个过程叫LazyEvaluation<br />这样的好处是，当我们做出更新节点的操作时，maya只会更新操作所需要的节点，而不会对其他节点做操作，不会更新场景中的所有节点，这样减轻了性能消耗。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654828197676-5bd1d138-a72c-404d-9e93-2e7977496007.png#averageHue=%23060606&clientId=uef2f4691-1f38-4&from=paste&height=704&id=u62b41d51&originHeight=704&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=150878&status=done&style=none&taskId=u2704fddb-5503-45e7-a3a5-15124ea6154&title=&width=643" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654828293828-b4e1dd36-5ac9-4893-9634-5e521c4ce087.png#averageHue=%230c0c0c&clientId=uef2f4691-1f38-4&from=paste&height=743&id=uaaa775f5&originHeight=743&originWidth=687&originalType=binary&ratio=1&rotation=0&showTitle=false&size=153868&status=done&style=none&taskId=u653c2866-8142-4323-b419-00e4b94cb8f&title=&width=687" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654829047593-e83a4b91-8c03-447b-b015-1aaf5ace3807.png#averageHue=%230e0b0b&clientId=uef2f4691-1f38-4&from=paste&height=729&id=u51ce4810&originHeight=729&originWidth=599&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136664&status=done&style=none&taskId=udf5fedaa-0711-4aa3-8a1b-f11c8382113&title=&width=599" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654829067445-7c407b6b-329f-45a6-bfeb-d1a22082f8a7.png#averageHue=%23050404&clientId=uef2f4691-1f38-4&from=paste&height=710&id=uc6032233&originHeight=710&originWidth=1277&originalType=binary&ratio=1&rotation=0&showTitle=false&size=216658&status=done&style=none&taskId=ud10c9a92-52c1-4968-8b86-796a12fa615&title=&width=1277" alt="image.png"><br><a name="wt2Ut"></a></p><h1 id="第十集-Writing-Custom-DG-Nodes"><a href="#第十集-Writing-Custom-DG-Nodes" class="headerlink" title="第十集 Writing Custom&#x2F;DG Nodes"></a>第十集 Writing Custom&#x2F;DG Nodes</h1><p><a name="e08Na"></a></p><h2 id="什么是Dependency-graph-node："><a href="#什么是Dependency-graph-node：" class="headerlink" title="什么是Dependency graph node："></a>什么是Dependency graph node：</h2><p>就是一个节点，有数据，有连接接口，有处理数据的能力。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654831547814-0d6a39ed-e95e-49bb-9947-daa7ec027d30.png#averageHue=%23060606&clientId=uef2f4691-1f38-4&from=paste&height=412&id=u43e0607a&originHeight=412&originWidth=1173&originalType=binary&ratio=1&rotation=0&showTitle=false&size=112777&status=done&style=none&taskId=u6097b8ec-e312-4659-b6c1-e56bc862c05&title=&width=1173" alt="image.png"><br><a name="RTno9"></a></p><h2 id="设计一个Dependency-graph-node"><a href="#设计一个Dependency-graph-node" class="headerlink" title="设计一个Dependency graph node"></a>设计一个Dependency graph node</h2><p>设计一个Dependency graph node 的过程和创建一个自定义命令差不多：<br />自定义的类需要继承MPxNode，__init__以及compute函数（类似与doIt函数），compute函数为节点最核心的方法，我们所有的算法都要存到这里通过计算返回不同的结果。<br />然后类外需要定义的函数：<br />1.creator function 2.initialize函数（初始化属性）3.initialize plugin（注册） 4.uninitialize plugin（取消注册）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838003301-9b0a7b2e-04bb-4cdc-aaa7-0a3a467473d4.png#averageHue=%23080808&clientId=uef2f4691-1f38-4&from=paste&height=332&id=u85c8ba3e&originHeight=332&originWidth=1219&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121376&status=done&style=none&taskId=u1797dd8c-2129-4843-9951-5d2ae8e6cb4&title=&width=1219" alt="image.png"><br><a name="m533a"></a></p><h2 id="针对不同的属性类型（数字，灯光，信息）使用不同的属性函数库"><a href="#针对不同的属性类型（数字，灯光，信息）使用不同的属性函数库" class="headerlink" title="针对不同的属性类型（数字，灯光，信息）使用不同的属性函数库"></a>针对不同的属性类型（数字，灯光，信息）使用不同的属性函数库</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838073661-4256666b-70ce-477f-9f85-1e5eac5862ec.png#averageHue=%23ebebeb&clientId=uef2f4691-1f38-4&from=paste&height=1128&id=ue31e219c&originHeight=1128&originWidth=1277&originalType=binary&ratio=1&rotation=0&showTitle=false&size=253204&status=done&style=none&taskId=u1eab58d0-2417-437d-9052-74e81fe422a&title=&width=1277" alt="image.png"><br><a name="t1fWd"></a></p><h2 id="initialize-函数的构建过程"><a href="#initialize-函数的构建过程" class="headerlink" title="initialize  函数的构建过程"></a>initialize  函数的构建过程</h2><p>首先创建一个MFnNumericAttribute函数库，通过这个函数库来创建属性并设置属性的名字初始值（传递给自定义类中创建的对应属性名字的MObject）然后定义特征（是否可读可写可存储可k关键帧），然后将属性绑定到节点上（因为通过MFn得到的属性是MObject类型）（因为我们的类继承了对应的MPx，因此使用继承的类中的addAttribute方法来讲MObject类型的属性附加到节点（类）上），最后设置电路（属性之间的联系，即定义输入（Input）输出（Output），通过使用继承的类中的attributeAffects方法，意思是方法内的属性参数，左边的属性影响右边的属性。Affects是影响的意思）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838266425-12951ed4-a954-41dd-b066-57260a918d47.png#averageHue=%230b0b0b&clientId=uef2f4691-1f38-4&from=paste&height=840&id=uc0bad8e7&originHeight=840&originWidth=1191&originalType=binary&ratio=1&rotation=0&showTitle=false&size=274344&status=done&style=none&taskId=ua08e7990-c545-48e2-94d0-a18f8a98b31&title=&width=1191" alt="image.png"><br><a name="hwfgy"></a></p><h2 id="nodeInitializer函数中的create-Attribute-创建属性的流程："><a href="#nodeInitializer函数中的create-Attribute-创建属性的流程：" class="headerlink" title="nodeInitializer函数中的create Attribute 创建属性的流程："></a>nodeInitializer函数中的create Attribute 创建属性的流程：</h2><p>通过MFn创建MObject类型的属性，然后设置属性，有readable（设置此属性是否可读。如果一个属性是可读的，那么它可以用作依赖图连接中的源。），writable（如果是可写的，那么这个属性就可以作为其他属性的目标（下游）），storable（设置此属性是否可存储。如果属性是可存储的，那么当节点存储到文件中时，它将被写入。这应该只在节点创建者的初始化调用中调用。），keyable（设置此属性是否应接受关键帧数据。这应该只在节点创建者的初始化调用中调用。可键属性将由AutoKey和Set Keyframe UI进行键控。非键属性可以防止用户通过为键控提供的明显UI设置键。不可键性并不会阻碍向属性添加键。）我们也可以设置属性的最小值与最大值。通过使用函数集中的setMin和setMax来达到。<br />这是创建属性后的默认的设置的属性<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655193938297-221ece78-d71e-4b8f-88b5-6c78d38175b0.png#averageHue=%23b7b4b1&clientId=u0e472ba4-a7b1-4&from=paste&height=284&id=u58f18f07&originHeight=284&originWidth=394&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84002&status=done&style=none&taskId=u6292d689-ac98-4ffb-bd3f-6090e5290d2&title=&width=394" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654840493422-83974a11-93df-44da-b48a-c0528aeaa594.png#averageHue=%230c0c0c&clientId=uef2f4691-1f38-4&from=paste&height=600&id=ud30a105d&originHeight=600&originWidth=524&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123043&status=done&style=none&taskId=u94299b19-503b-4c67-b24b-dceb2de27e7&title=&width=524" alt="image.png"><br><a name="Dsvjn"></a></p><h2 id="实例：制作一个轮子节点"><a href="#实例：制作一个轮子节点" class="headerlink" title="实例：制作一个轮子节点"></a>实例：制作一个轮子节点</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838653486-dca0b8bd-61ca-4e3a-b3f9-b88b3cdf6eef.png#averageHue=%234f5a64&clientId=uef2f4691-1f38-4&from=paste&height=244&id=u96dabb16&originHeight=244&originWidth=732&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127339&status=done&style=none&taskId=u177c778c-52b2-4d81-8ca6-424199a44c8&title=&width=732" alt="image.png"><br />通过平移使轮子自动旋转<br />公式与节点大致形状：根据平移的距离来控制旋转的角度的多少（一个圆的周长的距离为360度）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838799385-9aebdb70-5728-4a13-b88b-d20f5b4614dd.png#averageHue=%230c0c0c&clientId=uef2f4691-1f38-4&from=paste&height=548&id=ub5bfe141&originHeight=548&originWidth=813&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114294&status=done&style=none&taskId=u5f34f97b-578b-471d-829d-4670f09fab6&title=&width=813" alt="image.png"><br />nodeId： 每个节点都应该有对应的ID来对应它，无论是maya的还是用户自定义的（UUID）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个节点，制作轮子效果</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;WheelNode&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x100fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WheelNode</span>(OpenMayaMPx.MPxNode):</span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    inRadius = OpenMaya.MObject()</span><br><span class="line">    inTranslate = OpenMaya.MObject()</span><br><span class="line">    outRotate = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, dataBlock</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        rotate = translate/(2*3.14*radius)*(-360)</span></span><br><span class="line"><span class="string">        :param plug: 节点属性</span></span><br><span class="line"><span class="string">        :param dataBlock:节点属性中的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> plug == WheelNode.outRotate:</span><br><span class="line">            <span class="comment"># 通过指向节点属性的指针得到指向数据块（dataBlock）上的值的指针</span></span><br><span class="line">            dataHandleRadius = dataBlock.inputValue(WheelNode.inRadius)</span><br><span class="line">            dataHandleTranslate = dataBlock.inputValue(WheelNode.inTranslate)</span><br><span class="line"></span><br><span class="line">            inRadiusVal = dataHandleRadius.asFloat()</span><br><span class="line">            inTranslateVal = dataHandleTranslate.asFloat()</span><br><span class="line"></span><br><span class="line">            outRotate = <span class="built_in">float</span>(inTranslateVal) / <span class="built_in">float</span>(<span class="number">2</span> * <span class="number">3.14</span> * inRadiusVal) * (-<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">            dataHandleRotate = dataBlock.outputValue(WheelNode.outRotate)</span><br><span class="line"></span><br><span class="line">            dataHandleRotate.setFloat(outRotate)</span><br><span class="line">            dataBlock.setClean(plug)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>):  <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        self.argumentParser(argList)  <span class="comment"># 执行命令前先通过参数诊断功能诊断一下参数</span></span><br><span class="line">        <span class="keyword">if</span> self.sparse != <span class="literal">None</span>:  <span class="comment"># 如果给了sparse（标志）参数 那么就执行后面的命令</span></span><br><span class="line">            self.redoIt()  <span class="comment"># 之所以在doIt中使用redoIt是因为当我们执行undo操作后再redo操作时依然会执行我们的功能实现命令，因此将功能实现命令放到redoIt中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeCreator</span>():</span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(WheelNode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建translate属性，短名为t，数据类型为float，默认值为0.0，由自定义类中的inTranslate（MObject类型）来接收</span></span><br><span class="line">    WheelNode.inTranslate = mFnAttr.create(<span class="string">&quot;translate&quot;</span>, <span class="string">&quot;t&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    <span class="comment"># 设置节点属性是否可读可写可储存可k帧</span></span><br><span class="line">    <span class="comment"># 其中readable，writable，storable是默认为1的也可以不写。</span></span><br><span class="line">    mFnAttr.setReadable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setWritable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setStorable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    WheelNode.inRadius = mFnAttr.create(<span class="string">&quot;radius&quot;</span>, <span class="string">&quot;r&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setReadable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setWritable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setStorable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    WheelNode.outRotate = mFnAttr.create(<span class="string">&quot;rotate&quot;</span>, <span class="string">&quot;rot&quot;</span>, OpenMaya.MFnNumericData.kFloat)  <span class="comment"># 因为是输出属性所以不能定义默认值</span></span><br><span class="line">    mFnAttr.setReadable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setWritable(<span class="number">0</span>)</span><br><span class="line">    mFnAttr.setStorable(<span class="number">0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    WheelNode.addAttribute(WheelNode.inRadius)</span><br><span class="line">    WheelNode.addAttribute(WheelNode.inTranslate)</span><br><span class="line">    WheelNode.addAttribute(WheelNode.outRotate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    <span class="comment"># 设计电路板，这里设计的是，inRadius和inTranslate均与outRotate进行连接</span></span><br><span class="line">    WheelNode.attributeAffects(WheelNode.inRadius, WheelNode.outRotate)</span><br><span class="line">    WheelNode.attributeAffects(WheelNode.inTranslate, WheelNode.outRotate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ZOBPy"></a></p><h2 id="创建自定义节点后的使用流程"><a href="#创建自定义节点后的使用流程" class="headerlink" title="创建自定义节点后的使用流程"></a>创建自定义节点后的使用流程</h2><p>通过这个命令加载自定义节点<br />import maya.cmds as cmds<br />cmds.loadPlugin(r’D:\ZhangRuiChen\pythonProject\wheelNode.py’)<br />然后就可以在节点编辑器中通过自定义节点名字搜索到这个节点了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654850231689-4d983292-0871-4ddc-8a89-a891ff062b9d.png#averageHue=%23353535&clientId=uef2f4691-1f38-4&from=paste&height=379&id=u71ae120e&originHeight=379&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54039&status=done&style=none&taskId=u8c0a18b0-116b-4de5-9260-4bfd35da862&title=&width=930" alt="image.png"><br />这里的unitConversion1是当我们的WheelNode节点的Rotate属性连接到pCylinder1中的RotateZ上后maya自动生成的。<br />连接好后就可以实现功能了。<br><a name="IA4tx"></a></p><h1 id="第十一集-Deformer-变形器"><a href="#第十一集-Deformer-变形器" class="headerlink" title="第十一集 Deformer 变形器"></a>第十一集 Deformer 变形器</h1><p>什么是变形器<br />变形器是一个节点，下图是一个变形器所必须带有的属性<br />Input是几何体的输入，envelope控制变形的程度，范围是0~1，为0时不变形，为1时完全按照变形器的计算来变形。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654954141595-9f886125-2bf0-4c0a-916e-f4fabc55a75a.png#averageHue=%23050505&clientId=u7e71c804-4cbe-4&from=paste&height=569&id=ub6e2995f&originHeight=569&originWidth=989&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68092&status=done&style=none&taskId=u8d463e5d-a017-4bac-818a-1d58d371217&title=&width=989" alt="image.png"><br />我们的物体内部存在两个东西，一个groupId，一个inputGeom（这个是我们需要的）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654954411580-4d2ca110-7b7d-4a60-be86-d56acc21327b.png#averageHue=%230a0a0a&clientId=u7e71c804-4cbe-4&from=paste&height=406&id=u0afe2b74&originHeight=406&originWidth=422&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73595&status=done&style=none&taskId=u4e8e7207-3ffd-4c98-b8c4-fba2e4fabc6&title=&width=422" alt="image.png"><br />编写代码的框架：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654954490051-909892d3-7b1b-483a-a180-f16b6b087def.png#averageHue=%230c0c0c&clientId=u7e71c804-4cbe-4&from=paste&height=551&id=u3b9e0f86&originHeight=551&originWidth=383&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95145&status=done&style=none&taskId=ube931fc2-1f40-4e38-8b18-9f55eaffd94&title=&width=383" alt="image.png"><br><a name="Iednj"></a></p><h1 id="第十二-十五集-编写自定义变形器"><a href="#第十二-十五集-编写自定义变形器" class="headerlink" title="第十二~十五集 编写自定义变形器"></a>第十二~十五集 编写自定义变形器</h1><p>可以参考的网站<a href="https://www.xingyulei.com/post/maya-api-deformer/">https://www.xingyulei.com/post/maya-api-deformer/</a><br />自定义变形器的设计：<br />除默认自带的属性外，额外添加的自定义属性：amplitude（振幅，浮点型，范围是0<del>1），Displace（位移，浮点型，范围是0</del>10）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655193336188-7a98e85a-c013-4cb5-8432-d991431d7311.png#averageHue=%23151515&clientId=u0e472ba4-a7b1-4&from=paste&height=744&id=ufdb4ea8c&originHeight=744&originWidth=1032&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133442&status=done&style=none&taskId=uedd49e5f-48eb-490e-92d3-21020b36bc9&title=&width=1032" alt="image.png"><br />其中实现初始化功能的函数的内容步骤和自定义节点的步骤是相同的，有一点区别就是变形器节点具有默认的outputGeom属性，因此我们没必要再创建一个输出的属性，我们可以直接利用这个默认的outputGemo属性，那么怎么使用这个outputGemo属性呢？<br />教程中首先介绍了SWIG，然后使用了语句<br />SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   <br />是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的<br />Autodesk 为我们提供了一种使用swig使用这些属性的方法<br />通过这个语句:outputGemo &#x3D; OpenMayaMPx.cvar.MPxDeformerNode_outputGeom<br><a name="DrdaR"></a></p><h2 id="类中的deform函数的实现过程"><a href="#类中的deform函数的实现过程" class="headerlink" title="类中的deform函数的实现过程"></a>类中的deform函数的实现过程</h2><p>从左到右依次是self,   dataBlock,    geoIterator,    matrix,    geometryIndex<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655260910217-0fec322f-abc4-4d75-8b6a-28681c8e0621.png#averageHue=%23171616&clientId=uf5ec6e2c-c0bc-4&from=paste&height=240&id=u2b4fb92a&originHeight=240&originWidth=1944&originalType=binary&ratio=1&rotation=0&showTitle=false&size=118938&status=done&style=none&taskId=uf164ec2e-e1d7-48c4-909a-55534ee6ff1&title=&width=1944" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655260672878-f903d98a-946d-45d1-b129-db85341c9766.png#averageHue=%23131212&clientId=uf5ec6e2c-c0bc-4&from=paste&height=1121&id=Eo736&originHeight=1121&originWidth=1264&originalType=binary&ratio=1&rotation=0&showTitle=false&size=264792&status=done&style=none&taskId=u9e14e773-0081-448e-8ed8-b33828939e3&title=&width=1264" alt="image.png"><br />第一步将特殊的指针（dataHandileInputArray）指向变形器的Input数组，第二步通过geometryIndex跳到相应的元素，第三步（dataHandleInputElement）指向其中的特殊的dataBlock，第四步通过OpenMayaMPx.cvar.MPxDeformerNode_inputValue()找到它的inputGeom(变形器的默认节点)，然后通过.child方法将inputGeom的属性令dataHandleInputGeom指向。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655263186190-461fec6c-6512-48b2-b371-a111eb09630c.png#averageHue=%23171717&clientId=uf5ec6e2c-c0bc-4&from=paste&height=1314&id=u471a85c9&originHeight=1314&originWidth=2587&originalType=binary&ratio=1&rotation=0&showTitle=false&size=798745&status=done&style=none&taskId=u7f3623cf-7ea3-47c4-baf3-7f8293186db&title=&width=2587" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655265745683-7bb9b012-8a4e-478e-8ebf-835a8be69097.png#averageHue=%23191918&clientId=uf5ec6e2c-c0bc-4&from=paste&height=666&id=u0c4ee2e2&originHeight=666&originWidth=1288&originalType=binary&ratio=1&rotation=0&showTitle=false&size=314979&status=done&style=none&taskId=ua42216ec-9928-482c-852c-809b93056ed&title=&width=1288" alt="image.png"><br><a name="eP2I0"></a></p><h2 id="整体代码第一版"><a href="#整体代码第一版" class="headerlink" title="整体代码第一版"></a>整体代码第一版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        dataHandleInputArray = dataBlock.inputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.inputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].x * envelopeValue</span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].y * envelopeValue</span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].z * envelopeValue</span><br><span class="line">            geoIterator.setPosition(pointPosition) </span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="sdAfs"></a></p><h2 id="优化后的代码"><a href="#优化后的代码" class="headerlink" title="优化后的代码"></a>优化后的代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        <span class="comment"># 后来优化将inputArrayValue和inputValue都改为了output，可能是因为用output会自动检索最优路线吧</span></span><br><span class="line">        dataHandleInputArray = dataBlock.outputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.outputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mPointArray_meshVert = OpenMaya.MPointArray()  <span class="comment"># 创建一个空的存放点的数组</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].x * envelopeValue</span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].y * envelopeValue</span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].z * envelopeValue</span><br><span class="line">            <span class="comment"># geoIterator.setPosition(pointPosition)</span></span><br><span class="line">            mPointArray_meshVert.append(pointPosition)</span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line">        geoIterator.setAllPosiions(mPointArray_meshVert)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, deformerCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="YRcWy"></a></p><h2 id="增加了绘制功能的代码"><a href="#增加了绘制功能的代码" class="headerlink" title="增加了绘制功能的代码"></a>增加了绘制功能的代码</h2><p>增加绘制功能需要两个步骤，第一步是读取几何体的所有顶点，第二步是使用权重值去计算。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655348913268-6601752e-a19d-44a1-a4e9-d8f0662e57ac.png#averageHue=%23050505&clientId=u17945a8c-e2a9-4&from=paste&height=645&id=u95c1b2a1&originHeight=645&originWidth=1808&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188273&status=done&style=none&taskId=ud329f60f-40e9-496c-a07f-10985e09b94&title=&width=1808" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655348400558-44f32f40-f000-4c88-b49f-cb8132434aef.png#averageHue=%23050505&clientId=u17945a8c-e2a9-4&from=paste&height=518&id=u4a540699&originHeight=518&originWidth=2038&originalType=binary&ratio=1&rotation=0&showTitle=false&size=187574&status=done&style=none&taskId=uc82cfbe0-632d-4c01-8170-8803373f817&title=&width=2038" alt="image.png"><br />跟教程中的代码一样<br />教程中也就加了个weight &#x3D; self.weightValue(dataBlock, geometryIndex, geoIterator.index())，然后通过weight来改变计算步骤，但是我的2018.5的版本maya无法实现绘制功能。<br />教程中有这个但是我的没有<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655357981634-2f3303d0-0bf3-4d5a-95d7-2656a96385d0.png#averageHue=%23444f4d&clientId=u17945a8c-e2a9-4&from=paste&height=383&id=ub8800dc4&originHeight=383&originWidth=966&originalType=binary&ratio=1&rotation=0&showTitle=false&size=336840&status=done&style=none&taskId=uf5adc9f2-b610-4866-9b65-cf6505cbbcf&title=&width=966" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        <span class="comment"># 后来优化将inputArrayValue和inputValue都改为了output，可能是因为用output会自动检索最优路线吧</span></span><br><span class="line">        dataHandleInputArray = dataBlock.outputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.outputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mPointArray_meshVert = OpenMaya.MPointArray()  <span class="comment"># 创建一个空的存放点的数组</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line"></span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line">            weight = self.weightValue(dataBlock, geometryIndex, geoIterator.index())</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].x * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].y * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].z * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            <span class="comment"># geoIterator.setPosition(pointPosition)</span></span><br><span class="line">            mPointArray_meshVert.append(pointPosition)</span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line">        geoIterator.setAllPositions(mPointArray_meshVert)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, deformerCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="wFxjF"></a></p><h2 id="为自定义变形器添加辅助对象"><a href="#为自定义变形器添加辅助对象" class="headerlink" title="为自定义变形器添加辅助对象"></a>为自定义变形器添加辅助对象</h2><p>什么是辅助对象&#x2F;节点  Accessary object&#x2F;nodes<br />创建它是为了方便用户使用变形功能用的。<br />辅助对象节点需要有两个特征：<br />1.它是帮助变形器变形的。2.当辅助对象被删除时，变形器节点也应当一起被删除<br />因为它是帮助变形器获得变形的，因此我们需要将它用在deformer函数中的transform中<br />为了实现当辅助对象被删除时，变形器也一起被删除，应当将辅助对象的世界度量属性与变形器节点的矩阵属性关联起来。<br />在本例中辅助节点就是一个定位器，可以通过定位器x轴的移动从而改变变形器中的变形效果。<br />添加过程：首先需要为变形器创建矩阵属性， 刚开始和之前的节点属性添加过程一样，在节点初始化中新建矩阵属性函数库，通过函数库创建属性（创建的同时由类中定义的空的MObject对象来接收）并设置权限（mFnMatrixAttr.setStorable(0)mFnMatrixAttr.setConnectable(1)），然后设计连接线路。初始化完成后在类中通过dataBlock得到指向数据的handle（MObject），然后通过这个handle得到Matrix的值。<br />然后为了完成创建辅助对象节点，我们需要定义Deformer类中的两个函数(AccessoryNodeSetup，AccessoryAttribute)。然后通过在变形器类中读取辅助对象的矩阵属性中的变换属性的值来改变变形器的算法，从而实现辅助对象影响变形效果。</p><ol><li>AccessoryNodeSetup，这个函数是用来创建辅助对象物体，以及连接辅助对象的世界度量属性与变形器的矩阵属性</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655432605455-522c19a4-857c-4f4d-8244-f17e2c19ab56.png#averageHue=%23040404&clientId=ub892ec0a-a81e-4&from=paste&height=506&id=u3071a54d&originHeight=506&originWidth=1394&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114336&status=done&style=none&taskId=u6ae705cc-8421-471f-8a5e-7be26300feb&title=&width=1394" alt="image.png"><br />属性之间的连接：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655433502603-4bf82d23-95cf-4a15-b8a6-b51607a945dd.png#averageHue=%23040404&clientId=ub892ec0a-a81e-4&from=paste&height=1001&id=u972fcbec&originHeight=1001&originWidth=2359&originalType=binary&ratio=1&rotation=0&showTitle=false&size=423349&status=done&style=none&taskId=u57a561ed-8833-49e1-903c-cf8bc7a8373&title=&width=2359" alt="image.png"><br />2.AccessoryAttribute，这个函数用来返回类中的MObject对象（Ripple.mObj_Matrix）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655432904503-ad1197bf-2ad1-4c5b-8f3f-660e93cddec9.png#averageHue=%23060606&clientId=ub892ec0a-a81e-4&from=paste&height=626&id=ua199e21a&originHeight=626&originWidth=910&originalType=binary&ratio=1&rotation=0&showTitle=false&size=111956&status=done&style=none&taskId=uc6d956e5-98f0-4a53-a093-e9070fa5e5a&title=&width=910" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line">    mObj_Matrix = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        <span class="comment"># 后来优化将inputArrayValue和inputValue都改为了output，可能是因为用output会自动检索最优路线吧</span></span><br><span class="line">        dataHandleInputArray = dataBlock.outputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.outputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line">        <span class="comment"># Matrix</span></span><br><span class="line">        dataHandleMatrix = dataBlock.inputValue(Ripple.mObj_Matrix)</span><br><span class="line">        matrixValue = dataHandleMatrix.asMatrix()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从矩阵中读取变换信息</span></span><br><span class="line">        mTransMatrix = OpenMaya.MTransformationMatrix(matrixValue)</span><br><span class="line">        translationValue = mTransMatrix.getTranslation(OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mPointArray_meshVert = OpenMaya.MPointArray()  <span class="comment"># 创建一个空的存放点的数组</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line">            weight = self.weightValue(dataBlock, geometryIndex, geoIterator.index())</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(</span><br><span class="line">                geoIterator.index() + displaceValue + translationValue[<span class="number">0</span>]) * amplitudeValue * mFloatVectorArray_normal[</span><br><span class="line">                                  geoIterator.index()].x * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(</span><br><span class="line">                geoIterator.index() + displaceValue + translationValue[<span class="number">0</span>]) * amplitudeValue * mFloatVectorArray_normal[</span><br><span class="line">                                  geoIterator.index()].y * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(</span><br><span class="line">                geoIterator.index() + displaceValue + translationValue[<span class="number">0</span>]) * amplitudeValue * mFloatVectorArray_normal[</span><br><span class="line">                                  geoIterator.index()].z * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            <span class="comment"># geoIterator.setPosition(pointPosition)</span></span><br><span class="line">            mPointArray_meshVert.append(pointPosition)</span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line">        geoIterator.setAllPositions(mPointArray_meshVert)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryNodeSetup</span>(<span class="params">self, dagModifier</span>):</span><br><span class="line">        <span class="comment"># 1.创建辅助对象</span></span><br><span class="line">        mObjLocator = dagModifier.createNode(<span class="string">&#x27;locator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.将辅助对象与变形器之间建立联系</span></span><br><span class="line">        mFnDependLocator = OpenMaya.MFnDependencyNode(mObjLocator)</span><br><span class="line">        mPlugWorld = mFnDependLocator.findPlug(<span class="string">&#x27;worldMatrix&#x27;</span>)</span><br><span class="line">        mObj_WorldAttr = mPlugWorld.attribute()</span><br><span class="line"></span><br><span class="line">        mStatusConnect = dagModifier.connect(mObjLocator, mObj_WorldAttr, self.thisMObject(), Ripple.mObj_Matrix)</span><br><span class="line">        <span class="keyword">return</span> mStatusConnect  <span class="comment"># 返回连接状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryAttribute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Ripple.mObj_Matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建矩阵属性</span></span><br><span class="line">    mFnMatrixAttr = OpenMaya.MFnMatrixAttribute()</span><br><span class="line">    Ripple.mObj_Matrix = mFnMatrixAttr.create(<span class="string">&#x27;MatrixAttribute&#x27;</span>, <span class="string">&#x27;matAttr&#x27;</span>)</span><br><span class="line">    mFnMatrixAttr.setStorable(<span class="number">0</span>)</span><br><span class="line">    mFnMatrixAttr.setConnectable(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node  # 添加属性到节点上</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Matrix)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry  # 设计节点属性的连接</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Matrix, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, deformerCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="K5V9V"></a></p><h1 id="第十六集-创建自定义定位器"><a href="#第十六集-创建自定义定位器" class="headerlink" title="第十六集 创建自定义定位器"></a>第十六集 创建自定义定位器</h1><p>参考网站：<a href="https://blog.csdn.net/u013148608/article/details/105694909">https://blog.csdn.net/u013148608/article/details/105694909</a><br />因为新版本已经不支持这个了glRenderer &#x3D; OpenMayaRender.MHardwareRenderer.theRenderer()，因此就这吧，看看就好。<br />步骤：1.定义定位器的形状2.定义边界框3.定义边界框边界的大小<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655434694335-baa8031d-3036-4e93-ae91-207533fc49ef.png#averageHue=%23060606&clientId=ub892ec0a-a81e-4&from=paste&height=511&id=CWn3U&originHeight=511&originWidth=1206&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121606&status=done&style=none&taskId=u26739e54-5b7f-4842-a6b6-5e0dfe2922f&title=&width=1206" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个节点，制作轮子效果</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaRender <span class="keyword">as</span> OpenMayaRender</span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;LeftFoot&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x100fff</span>)</span><br><span class="line"></span><br><span class="line">glRenderer = OpenMayaRender.MHardwareRenderer.theRenderer()</span><br><span class="line">glFT = glRenderer.glFunctionTable()  <span class="comment"># 得到函数库指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocatorNode</span>(OpenMayaMPx.MPxLocatorNode):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxLocatorNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, dataBlock</span>):</span><br><span class="line">        <span class="keyword">return</span> OpenMaya.kUnknownParameter</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, view, path, style, status</span>):</span><br><span class="line">        view.beginGL()</span><br><span class="line">        <span class="comment"># Pushed current State</span></span><br><span class="line">        glFT.glPushAttrib(OpenMayaRender.MGL_CURRENT_BIT)</span><br><span class="line">        <span class="comment"># Enabled Blend mode （to enable transparency）</span></span><br><span class="line">        glFT.glEnable(OpenMayaRender.MGL_BLEND)</span><br><span class="line">        <span class="comment"># Defined Blend function</span></span><br><span class="line">        glFT.glBlendFunc(OpenMayaRender.MGL_SRC_ALPHA, OpenMayaRender.MGL_ONE_MINUS_SRC_ALPHA)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义shape在不同选择模式下对应的颜色</span></span><br><span class="line">        <span class="keyword">if</span> status == view.kActive:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kLead:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kDormant:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Draw a shape</span></span><br><span class="line">        glFT.glBegin()</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.031</span>, <span class="number">0</span>, -<span class="number">2.875</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.939</span>, <span class="number">0.1</span>, -<span class="number">2.370</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">1.175</span>, <span class="number">0.2</span>, -<span class="number">1.731</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.603</span>, <span class="number">0.3</span>, <span class="number">1.060</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.473</span>, <span class="number">0.3</span>, <span class="number">1.026</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.977</span>, <span class="number">0.2</span>, -<span class="number">1.731</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.809</span>, <span class="number">0.1</span>, -<span class="number">2.337</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.035</span>, <span class="number">0</span>, -<span class="number">2.807</span>)</span><br><span class="line">        glFT.glEnd()</span><br><span class="line">        <span class="comment"># Draw a shape</span></span><br><span class="line">        glFT.glBegin()</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.587</span>, <span class="number">0.3</span>, <span class="number">1.33</span>)</span><br><span class="line">        glFT.glVertex3f(<span class="number">0.442</span>, <span class="number">0.3</span>, <span class="number">1.33</span>)</span><br><span class="line">        glFT.glVertex3f(<span class="number">0.442</span>, <span class="number">0.3</span>, <span class="number">1.92</span>)</span><br><span class="line">        glFT.glVertex3f(<span class="number">0.230</span>, <span class="number">0.3</span>, <span class="number">2.24</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.442</span>, <span class="number">0.3</span>, <span class="number">2.25</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.635</span>, <span class="number">0.3</span>, <span class="number">1.92</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.567</span>, <span class="number">0.3</span>, <span class="number">1.35</span>)</span><br><span class="line">        glFT.glEnd()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义文字在不同选择模式下对应的颜色</span></span><br><span class="line">        <span class="keyword">if</span> status == view.kActive:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kLead:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kDormant:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在0，0，0处绘制文字，对齐方式为向左对齐</span></span><br><span class="line">        view.drawText(<span class="string">&quot;Left Foot&quot;</span>, OpenMaya.MPoint(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), view.kLeft)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Disable Blend mode</span></span><br><span class="line">        glFT.glDisable(OpenMayaRender.MGL_BLEND)</span><br><span class="line">        <span class="comment"># Restore the state</span></span><br><span class="line">        glFT.glPopAttrib()</span><br><span class="line">        view.endGL()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeCreator</span>():</span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(LocatorNode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer, OpenMayaMPx.MPxNode.kLocatorNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="CiqwY"></a></p><h1 id="第十七-十九集-无缝IKFK混合与回调函数"><a href="#第十七-十九集-无缝IKFK混合与回调函数" class="headerlink" title="第十七~十九集 无缝IKFK混合与回调函数"></a>第十七~十九集 无缝IKFK混合与回调函数</h1><p>先解释一下回调函数，回调函数可以理解为把函数当成变量传递给另一个函数，当变量的函数改变时也会同样的影响把函数当变量的那个函数。作为参数传递的那个函数叫做回调函数<br />我们通常通过MMessage来实现事件触发，当事件触发时会调用回调函数。<br />MMessage的种类与事件：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655474585450-23dc0aae-bfe2-49f7-91f2-3472d0399f45.png#averageHue=%23080808&clientId=u12cb03d8-4911-4&from=paste&height=1080&id=u0168e800&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=675921&status=done&style=none&taskId=u915aca16-8e9c-4596-b6bc-1e221be0a76&title=&width=1920" alt="image.png"></p><p>什么是IK FK ，IK是反向运动学，它是子关节影响父关节，FK是正向运动学，它是父关节影响子关节。<br />当我们制作IK时当添加了极向量约束时，我们将不能够通过父关节的旋转而影响子关节，因此制作一个在极向量约束的功能存在的情况下依然能够正确进行子关节影响父关节并且父关节也可以旋转影响子关节。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655451525648-15631070-d361-4cb5-bd07-2e58bd3f35da.png#averageHue=%2355606d&clientId=ub892ec0a-a81e-4&from=paste&height=467&id=u899fa463&originHeight=467&originWidth=1296&originalType=binary&ratio=1&rotation=0&showTitle=false&size=301680&status=done&style=none&taskId=uff6cc5ff-8a73-40c6-aa4b-532b25c2c9a&title=&width=1296" alt="image.png"><br />这个功能制作的关键是当添加IK后，关节会出现一个属性IKBlend 这个属性为1时则子关节移动会影响父关节，父关节不能主动移动，当IKBlend属性为0时，子关节的移动就不会影响父关节，父关节的旋转会带动子关节。以及如果父关节旋转后中间的那个受极向量约束的定位器位置也应该随着改变。<br><a name="QKLlY"></a></p><h2 id="代码实现细节"><a href="#代码实现细节" class="headerlink" title="代码实现细节"></a>代码实现细节</h2><p>我们要制作一个节点来实现这些功能，因此使用最开始的自定义轮子节点来写代码。<br />将轮子结点复制过来后更改一下初始设置：更改节点名字，将类名通过shift+F6统一改成CVG，然后因为节点不需要属性以及算法，将compute函数和nodeInitializer函数内容统统改为pass<br />定义两个模式，一个是FK，一个是IK，默认模式是FK，当我们选择IK控制柄或者选择joint3，或者选择极向量控制器，都会使模式切换成IK。<br />模式为FK时IKBlend的值设为0，并且将极向量控制器设置为不显示，因为FK模式下用不到极向量控制器，模式为IK时IKBlend的值设为1.并将极向量控制器约束在joint2的位置上。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655457511797-ad9fe3f2-fe5f-489d-95d3-b2252c40c416.png#averageHue=%23020202&clientId=ub892ec0a-a81e-4&from=paste&height=1373&id=u700e4900&originHeight=1373&originWidth=2547&originalType=binary&ratio=1&rotation=0&showTitle=false&size=427712&status=done&style=none&taskId=ucc4d2933-c7e0-4569-9e5a-35ac3b8644d&title=&width=2547" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个节点，制作轮子效果</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;CVGKNode&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x100fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CVG</span>(OpenMayaMPx.MPxNode):</span><br><span class="line">    idCallback = []  <span class="comment"># 用来存放所有的回调函数</span></span><br><span class="line"></span><br><span class="line">    joint1 = OpenMaya.MObject()</span><br><span class="line">    joint2 = OpenMaya.MObject()</span><br><span class="line">    joint3 = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    activeEffector = OpenMaya.MObject()</span><br><span class="line">    activeHandle = OpenMaya.MObject()</span><br><span class="line">    activePoleVector = OpenMaya.MObject()</span><br><span class="line">    activePoleVectorControl = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxNode.__init__(self)</span><br><span class="line">        <span class="comment"># Event Callback  根据事件调用函数  这里添加的事件是当前选择改变时调用函数</span></span><br><span class="line">        self.idCallback.append(OpenMaya.MEventMessage.addEventCallback(<span class="string">&quot;SelectionChanged&quot;</span>, self.callbackFunc))</span><br><span class="line">        <span class="comment"># DG Callback  根据节点的改变调用函数  这里是节点移除时</span></span><br><span class="line">        self.idCallback.append(OpenMaya.MDGMessage.addNodeRemovedCallback(self.remove, <span class="string">&quot;dependNode&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">callbackFunc</span>(<span class="params">self, *args</span>):  <span class="comment"># 当选择的物体发生改变时调用这个函数</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Callback Function&quot;</span></span><br><span class="line">        <span class="comment"># 1. Find active selection in the scene 在场景中找到主动选择</span></span><br><span class="line">        mSel = OpenMaya.MSelectionList()</span><br><span class="line">        OpenMaya.MGlobal.getActiveSelectionList(mSel)  <span class="comment"># 将选择的物体添加到列表中</span></span><br><span class="line">        mItSelectionList = OpenMaya.MItSelectionList(mSel, OpenMaya.MFn.kDagNode)</span><br><span class="line">        mode = <span class="string">&quot;fk&quot;</span></span><br><span class="line"></span><br><span class="line">        mFnDependencyNode = OpenMaya.MFnDependencyNode()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. Find IK-Effector</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> mItSelectionList.isDone():</span><br><span class="line">            mObj = OpenMaya.MObject()</span><br><span class="line">            mItSelectionList.getDependNode(mObj)</span><br><span class="line">            <span class="comment"># If effector itself is selected 如果效应器本身被选择</span></span><br><span class="line">            <span class="keyword">if</span> mObj.apiTypeStr() == <span class="string">&quot;kIkEffector&quot;</span>:</span><br><span class="line">                self.activeEffector = mObj</span><br><span class="line">                mode = <span class="string">&quot;ik&quot;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># If control curve is selected 如果选择控制曲线(极向量约束的那个)</span></span><br><span class="line">            <span class="keyword">if</span> self.activePoleVectorControl.apiTypeStr() != <span class="string">&quot;kInvalid&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> OpenMaya.MFnDependencyNode(mObj).name() == OpenMaya.MFnDependencyNode(</span><br><span class="line">                        self.activePoleVectorControl).name():</span><br><span class="line">                    mode = <span class="string">&quot;ik&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            mFnDependencyNode.setObject(mObj)</span><br><span class="line">            mPlugArray_joint = OpenMaya.MPlugArray()</span><br><span class="line">            mFnDependencyNode.getConnections((mPlugArray_joint))</span><br><span class="line">            <span class="comment"># Check If effector is connected to selected object</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_joint.length()):</span><br><span class="line">                mPlug_joint = mPlugArray_joint[i]</span><br><span class="line">                mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                mPlug_joint.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kIkEffector&quot;</span>:</span><br><span class="line">                    self.activeEffector = mPlug2.node()</span><br><span class="line">                    mode = <span class="string">&quot;ik&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                mItSelectionList.<span class="built_in">next</span>()</span><br><span class="line">            <span class="comment"># 3. Fink IK-Handle</span></span><br><span class="line">            <span class="comment"># print self.activeEffector.apiTypeStr()</span></span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            If IK-Effector is found then :</span></span><br><span class="line"><span class="string">            - find IK-Handle</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> self.activeEffector.apiTypeStr() == <span class="string">&quot;kIkEffector&quot;</span>:</span><br><span class="line">                mFnDependencyNode.setObject(self.activeEffector)</span><br><span class="line">                mPlugArray_effector = OpenMaya.MPlugArray()</span><br><span class="line">                mFnDependencyNode.getConnections(mPlugArray_effector)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_effector.length()):</span><br><span class="line">                    mPlug_effector = mPlugArray_effector[i]</span><br><span class="line">                    mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                    mPlug_effector.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                    mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kIkHandle&quot;</span>:</span><br><span class="line">                        self.activeHandle = mPlug2.node()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                If IK-Handle is found then:</span></span><br><span class="line"><span class="string">                -find IK-Blend Plug</span></span><br><span class="line"><span class="string">                -find IK-PoleVector</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.activeHandle.apiTypeStr() == <span class="string">&quot;kIkHandle&quot;</span>:</span><br><span class="line">                <span class="comment"># 4. Find IK-Blend Plug</span></span><br><span class="line">                mFnDependencyNodeHandle = OpenMaya.MFnDependencyNode(self.activeHandle)</span><br><span class="line">                mPlug_blendAttr = mFnDependencyNodeHandle.findPlug(<span class="string">&quot;ikBlend&quot;</span>)</span><br><span class="line">                mAttr_blendAttr = mPlug_blendAttr.attribute()</span><br><span class="line">                <span class="comment"># mak IK-blend attribute &quot;unKeyable&quot; and hidden from Channel box</span></span><br><span class="line">                mMFnAttribute = OpenMaya.MFnAttribute(mAttr_blendAttr)</span><br><span class="line">                mMFnAttribute.setKeyable(<span class="number">0</span>)</span><br><span class="line">                mMFnAttribute.setChannelBox(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 5. Find Pole Vector Constraint</span></span><br><span class="line">                mFnDependencyNode.setObject(self.activeHandle)</span><br><span class="line">                mPlugArray_handle = OpenMaya.MPlugArray()</span><br><span class="line">                mFnDependencyNode.getConnections(mPlugArray_handle)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_handle.length()):</span><br><span class="line">                    mPlug_handle = mPlugArray_handle[i]</span><br><span class="line">                    mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                    mPlug_handle.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                    mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kPoleVectorConstraint&quot;</span>:</span><br><span class="line">                        self.activePoleVector = mPlug2.node()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                If IK-PoleVector is found then:</span></span><br><span class="line"><span class="string">                - find IK-PoleVector Control Curve</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.activePoleVector.apiTypeStr() == <span class="string">&quot;kPoleVectorConstraint&quot;</span>:</span><br><span class="line">                    <span class="comment"># 6. Find Curve controlling Pole Vector</span></span><br><span class="line">                    mFnDependencyNode.setObject(self.activePoleVector)</span><br><span class="line">                    mPlugArray_handle = OpenMaya.MPlugArray()</span><br><span class="line">                    mFnDependencyNode.getConnections(mPlugArray_handle)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_handle.length()):</span><br><span class="line">                        mPlug_handle = mPlugArray_handle[i]</span><br><span class="line">                        mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_handle.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                        mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kTransform&quot;</span>:</span><br><span class="line">                            self.activePoleVectorControl = mPlug2.node()</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    If IK-PoleVector Control Curve is found then:</span></span><br><span class="line"><span class="string">                    - find middle joint of joint change, to whick this control should be attached.</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> self.activePoleVectorControl.apiTypeStr() == <span class="string">&quot;kTransform&quot;</span>:</span><br><span class="line">                        <span class="comment"># 7. Find Joint2 of the chain.</span></span><br><span class="line">                        <span class="comment"># 7. a : find joint connected to IK-Effector - call it : Joint3</span></span><br><span class="line">                        <span class="comment"># 7. b : find joint connected to IK-Handle   - call it : Joint1</span></span><br><span class="line">                        <span class="comment"># 7. c : find joint connected to Joint1 and Joint3 - call it Joint2</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 7. a : find joint connected to IK-Effector - call it : Joint3</span></span><br><span class="line">                        mFnDependencyNode.setObject(self.activeEffector)</span><br><span class="line">                        mPlugArray_effector = OpenMaya.MPlugArray()</span><br><span class="line">                        mFnDependencyNode.getConnections(mPlugArray_effector)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_effector.length()):</span><br><span class="line">                            mPlug_effector = mPlugArray_effector[i]</span><br><span class="line">                            mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                            mPlug_effector.connectedTo(mPlugArray2,<span class="literal">True</span>,<span class="literal">True</span>)</span><br><span class="line">                            mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                            <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                self.joint3 = mPlug2.node()</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                        <span class="comment"># b : find joint connected to IK-Handle   - call it : Joint1</span></span><br><span class="line">                        mFnDependencyNode.setObject(self.activeHandle)</span><br><span class="line">                        mPlugArray_handle = OpenMaya.MPlugArray()</span><br><span class="line">                        mFnDependencyNode.getConnections(mPlugArray_handle)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_handle.length()):</span><br><span class="line">                            mPlug_handle = mPlugArray_handle[i]</span><br><span class="line">                            mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                            mPlug_handle.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                            mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                            <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                self.joint1 = mPlug2.node()</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                        <span class="comment"># 7. c : find joint connected to Joint1 and Joint3 - call it Joint2</span></span><br><span class="line">                        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        Find joints connected to Joint1 , and if any joint which is connected to Joint1 is also connected to Joint3</span></span><br><span class="line"><span class="string">                        then it is Joint2</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span></span><br><span class="line">                        mObj_joint1Connections = OpenMaya.MObjectArray()</span><br><span class="line">                        mObj_joint3Connections = OpenMaya.MObjectArray()</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># Collect child Joints connected to Joint1</span></span><br><span class="line">                        mFnDependencyNode.setObject(self.joint1)</span><br><span class="line">                        mPlugArray_joint1 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint1Scale = mFnDependencyNode.findPlug(<span class="string">&quot;scale&quot;</span>)</span><br><span class="line">                        mPlugArray_joint1 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint1Scale.connectedTo(mPlugArray_joint1,<span class="literal">True</span>,<span class="literal">True</span>)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_joint1.length()):</span><br><span class="line">                            <span class="keyword">if</span> mPlugArray_joint1[i].node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                mObj_joint1Connections.append(mPlugArray_joint1[i].node())</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># Collect parent Joints connected to Joint3</span></span><br><span class="line">                        mFnDependencyNode.setObject(self.joint3)</span><br><span class="line">                        mPlugArray_joint3 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint3Scale = mFnDependencyNode.findPlug(<span class="string">&quot;inverseScale&quot;</span>)</span><br><span class="line">                        mPlugArray_joint3 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint3Scale.connectedTo(mPlugArray_joint3,<span class="literal">True</span>,<span class="literal">True</span>)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_joint3.length()):</span><br><span class="line">                            <span class="keyword">if</span> mPlugArray_joint3[i].node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                mObj_joint3Connections.append(mPlugArray_joint3[i].node())</span><br><span class="line"></span><br><span class="line">                        mFnDependencyNode_temp1 = OpenMaya.MFnDependencyNode()</span><br><span class="line">                        mFnDependencyNode_temp3 = OpenMaya.MFnDependencyNode()</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mObj_joint3Connections.length()):</span><br><span class="line">                            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(mObj_joint3Connections.length()):</span><br><span class="line"></span><br><span class="line">                                mFnDependencyNode_temp1.setObject(mObj_joint1Connections[i])</span><br><span class="line">                                mFnDependencyNode_temp3.setObject(mObj_joint3Connections[j])</span><br><span class="line">                                <span class="keyword">if</span> mFnDependencyNode_temp1.name() == mFnDependencyNode_temp3.name():</span><br><span class="line">                                    self.joint2 = mObj_joint3Connections[j]</span><br><span class="line">                                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># check if this node exists in the scene  先检查这个节点在场景中是否存在</span></span><br><span class="line">            <span class="comment"># 尝试将通过我们自定义的CVG类的MObject传递给一个空的列表，如果出现错误就代表没有使用过，那么就删除回调函数。如果列表不为空那么就不进行其他操作。</span></span><br><span class="line">            OpenMaya.MSelectionList.add(self.thisMObject())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># Remove callback  移除回调函数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(self.idCallback)):</span><br><span class="line">                <span class="keyword">try</span>:  <span class="comment"># 尝试移除属于MEventMessage的回调函数</span></span><br><span class="line">                    OpenMaya.MEventMessage.removeCallback(self.idCallback[i])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">try</span>:  <span class="comment"># 常识移除属于MDGMessage的回调函数</span></span><br><span class="line">                    OpenMaya.MDGMessage.removeCallback(self.idCallback[i])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, dataBlock</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeCreator</span>():</span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(CVG())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MayaPy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPythonAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg in production</title>
      <link href="/2023/08/29/MayaPy-FFmpeg-in-production/"/>
      <url>/2023/08/29/MayaPy-FFmpeg-in-production/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="k62qS"></a># FFmpeg与ffmpeg的介绍<a name="BR4Wx"></a>## FFmpeg or ffmpeg![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1673936833672-f709f7e7-0067-41dd-b0f5-9b2e2094084b.png#averageHue=%23111111&clientId=u2f19a3ad-c148-4&from=paste&height=229&id=u41085d30&originHeight=229&originWidth=2140&originalType=binary&ratio=1&rotation=0&showTitle=false&size=172285&status=done&style=none&taskId=u4a2bade5-fc04-429c-9ec8-233e211251c&title=&width=2140)<a name="lF4l3"></a>## FFmpeg toolsFFmpeg提供的所有工具： <br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1673936885926-0187a839-8e1a-490f-b0a2-94d29a805769.png#averageHue=%23080808&clientId=u2f19a3ad-c148-4&from=paste&height=734&id=u1aa47442&originHeight=734&originWidth=2158&originalType=binary&ratio=1&rotation=0&showTitle=false&size=290899&status=done&style=none&taskId=u3722c923-c8e1-426a-8842-5c938f2ec7e&title=&width=2158)<a name="eKf78"></a>## FFmpeg libraries![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1673937020238-2f9dd90e-64de-427b-8025-9728ee4aea55.png#averageHue=%23060606&clientId=u2f19a3ad-c148-4&from=paste&height=663&id=u7181e3f9&originHeight=663&originWidth=2165&originalType=binary&ratio=1&rotation=0&showTitle=false&size=215397&status=done&style=none&taskId=u095783ac-8635-4529-98cd-d5c7d8c1980&title=&width=2165)<a name="x3R6c"></a>## ffmpeg![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1673937128075-057b74f7-09f0-4c5f-bb6e-dd403aedd0d9.png#averageHue=%23060606&clientId=u2f19a3ad-c148-4&from=paste&height=534&id=u8f02f286&originHeight=534&originWidth=2209&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231125&status=done&style=none&taskId=u5fa73875-6ec5-454e-89bb-c3b68590965&title=&width=2209)<a name="pPYhz"></a># 安装ffmpeg[https://github.com/BtbN/FFmpeg-Builds/releases](https://github.com/BtbN/FFmpeg-Builds/releases)<br />可以去这个github网站里下载构建版本<a name="gSfxC"></a># ffmpeg基础语法在powershell中使用<br />在![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686124834256-4b7dbe37-eeb5-4ba5-abf2-709f5cee50a5.png#averageHue=%23faf9f7&clientId=u6c33c667-b75d-4&from=paste&height=374&id=u5b17cf2d&originHeight=374&originWidth=707&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45262&status=done&style=none&taskId=ua8de8cbd-3ca2-44a7-a7ef-24fe9834daf&title=&width=707)构建好的ffmpeg目录下的bin目录下按shift加鼠标右键然后按s快捷键即可在目录下打开powershell<br />前面是输入选项和路径，后面是输出选项和路径。<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686130668081-50866e46-3ec5-460b-a5fc-e1886492c111.png#averageHue=%230c0c0c&clientId=u6c33c667-b75d-4&from=paste&height=108&id=u959cf2bb&originHeight=108&originWidth=1699&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56375&status=done&style=none&taskId=u719581c8-fed6-4f10-bc3f-6137f8542c2&title=&width=1699)<a name="X8L2Y"></a># 将图片序列转成视频将 文件夹中符合img_seq.%04d的图片整合成24帧的视频序列，用h264编码：.\ffmpeg.exe -framerate 24 -i .\_image_sequences\img_seq\img_seq.%04d.png -c:v h264 output.mp4  <br />-c:v: h264 意思是使用h264编码视频流<a name="ngldj"></a># ffmpeg与输出以及h264相关的option介绍<a name="btBYo"></a>## Constant Rate Factor （crf）输出质量![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686127869111-004de1e0-3998-4bce-8b84-695aa5590c60.png#averageHue=%230a0a0a&clientId=u6c33c667-b75d-4&from=paste&height=784&id=ua6c98757&originHeight=784&originWidth=1714&originalType=binary&ratio=1&rotation=0&showTitle=false&size=298300&status=done&style=none&taskId=ue1e4471e-ca2e-4359-ad3e-9c1f5615e0e&title=&width=1714)<a name="FThoC"></a>## Preset 编码速度预设![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686127978943-e0d1bed6-d116-43dd-8f5f-7351363cab76.png#averageHue=%23060606&clientId=u6c33c667-b75d-4&from=paste&height=896&id=uea4b45e7&originHeight=896&originWidth=1742&originalType=binary&ratio=1&rotation=0&showTitle=false&size=245348&status=done&style=none&taskId=ube678619-e57d-4e15-a3bd-72e07e482fa&title=&width=1742)<a name="icEGW"></a>## Tune（不经常使用）![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686128368452-e0e78d2f-a4ff-417a-8303-b2be9484579f.png#averageHue=%230c0c0c&clientId=u6c33c667-b75d-4&from=paste&height=1019&id=uccaf701b&originHeight=1019&originWidth=1973&originalType=binary&ratio=1&rotation=0&showTitle=false&size=502036&status=done&style=none&taskId=udc054b92-eea8-488b-8174-6fa9665c1eb&title=&width=1973)<a name="aI8qr"></a>## Profile(-profile:v) and Level(-level)  (为了兼容旧设备才需要看这个)![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686128887023-6b184a06-2784-47ae-bfb2-1a76cd304fc5.png#averageHue=%230a0a0a&clientId=u6c33c667-b75d-4&from=paste&height=938&id=ub5ef7475&originHeight=938&originWidth=1770&originalType=binary&ratio=1&rotation=0&showTitle=false&size=374321&status=done&style=none&taskId=u6789f85f-e2b7-414a-8e7b-c02f32a058a&title=&width=1770)<a name="NKjmJ"></a>## 更改输出的缩放比![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686129672761-7d028a0d-36f5-4129-9f22-8d18fe8b24ed.png#averageHue=%230a0a0a&clientId=u6c33c667-b75d-4&from=paste&height=864&id=u9ac301f7&originHeight=864&originWidth=1705&originalType=binary&ratio=1&rotation=0&showTitle=false&size=369264&status=done&style=none&taskId=u4375f99b-1cc7-47b0-aaee-c1b5d0b0cee&title=&width=1705)<a name="w37pj"></a>## 更改像素格式可以通过ffmpeg -pix_fmts查看所有可用像素格式的列表<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686129977233-50ff5dc0-ff6f-4e2d-a91f-aa370a0fc671.png#averageHue=%23080808&clientId=u6c33c667-b75d-4&from=paste&height=1153&id=u7865d07c&originHeight=1153&originWidth=2477&originalType=binary&ratio=1&rotation=0&showTitle=false&size=532685&status=done&style=none&taskId=ubc7caf4c-0371-4669-a489-e88b78d0290&title=&width=2477)<a name="j5wui"></a># 添加音频<a name="uTuKy"></a>## 图片序列转化成视频的同时添加音频文件到视频文件中![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686130405876-af47416a-f6fb-40b2-b5db-e34f738af46a.png#averageHue=%230f0f0f&clientId=u6c33c667-b75d-4&from=paste&height=852&id=u1410c803&originHeight=852&originWidth=2364&originalType=binary&ratio=1&rotation=0&showTitle=false&size=533660&status=done&style=none&taskId=u4d1db221-1f51-4f12-8a3c-d7c387dac4a&title=&width=2364)<a name="ATFEi"></a>## 设置输出的音频的选项![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686130874110-84c2e473-ad7c-4b05-9c9c-1acb50e1830f.png#averageHue=%230b0b0b&clientId=u6c33c667-b75d-4&from=paste&height=992&id=oNVIM&originHeight=992&originWidth=2369&originalType=binary&ratio=1&rotation=0&showTitle=false&size=516865&status=done&style=none&taskId=u48322327-df09-4cc1-b951-ddbaec0a5a5&title=&width=2369)<a name="vzbSp"></a>## 当音频长度比视频长度要长时，如何舍弃掉多余的视频![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686132160801-b3febdd4-1f01-40e5-8ccb-f4679871af4d.png#averageHue=%230a0a0a&clientId=u6c33c667-b75d-4&from=paste&height=901&id=u6594224c&originHeight=901&originWidth=2365&originalType=binary&ratio=1&rotation=0&showTitle=false&size=392659&status=done&style=none&taskId=u73a43970-1547-47ba-a471-35734b06daa&title=&width=2365)<a name="yZrJq"></a>## 当音频长度比视频长度短时![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686132288036-bf8fb09d-93f9-4713-b7c8-c8ee95926413.png#averageHue=%23080808&clientId=u6c33c667-b75d-4&from=paste&height=1037&id=u0ecf5fcc&originHeight=1037&originWidth=2433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=446558&status=done&style=none&taskId=u2d13a6dc-4b3f-4740-bdfe-770199092a8&title=&width=2433)<a name="dj98o"></a># Codecs and Containers 编码解码器与容器<a name="kv4cp"></a>## codec(编码解码器)![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190062804-425ffdb1-4c3c-4659-adbd-0d83c7ca4530.png#averageHue=%230c0c0c&clientId=uf7add6b9-7201-4&from=paste&height=776&id=ucc93652e&originHeight=776&originWidth=2250&originalType=binary&ratio=1&rotation=0&showTitle=false&size=422925&status=done&style=none&taskId=u50a6ad35-7470-414c-a503-daabf0aac43&title=&width=2250)<a name="oHy6l"></a>## Container（容器，指文件格式）![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190174798-0fd4fa3d-0650-4c8a-8abe-53aa1cd3a247.png#averageHue=%23080808&clientId=uf7add6b9-7201-4&from=paste&height=1067&id=uc8b50c2c&originHeight=1067&originWidth=1974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=315549&status=done&style=none&taskId=u48544d8c-1c81-49c0-b0cb-62d7a2ffeff&title=&width=1974)<a name="gd6ma"></a>## file encoding（文件编码）![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190317542-311861f5-5390-41d8-ada3-cfdd2061eeb5.png#averageHue=%23090909&clientId=uf7add6b9-7201-4&from=paste&height=694&id=ua45cb5fa&originHeight=694&originWidth=1754&originalType=binary&ratio=1&rotation=0&showTitle=false&size=234212&status=done&style=none&taskId=u0222d8b4-8476-433e-b545-1eff4edf0a5&title=&width=1754)<a name="bvkkE"></a>## Converting Containers 转换文件格式![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190621098-bb317d51-0319-47e4-ac07-3657edaf30a1.png#averageHue=%230e0e0e&clientId=uf7add6b9-7201-4&from=paste&height=481&id=u1e8581a9&originHeight=481&originWidth=1541&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206584&status=done&style=none&taskId=ue6256960-625a-4fd4-96b8-d465f2c949c&title=&width=1541)<a name="Jo1VZ"></a>## Transcoding转码![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190600115-0c09d4d5-06b6-484e-8398-d839ccc02664.png#averageHue=%230c0c0c&clientId=uf7add6b9-7201-4&from=paste&height=788&id=u231eea2b&originHeight=788&originWidth=2420&originalType=binary&ratio=1&rotation=0&showTitle=false&size=427805&status=done&style=none&taskId=u86262856-2ed1-4152-a3a5-092b0b9d9da&title=&width=2420)<a name="PTy14"></a># Converting and transcoding 转码![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686191116971-5d909224-2fca-4f71-a0b0-34e45a1156ab.png#averageHue=%230a0a0a&clientId=uf7add6b9-7201-4&from=paste&height=1087&id=u48eecded&originHeight=1087&originWidth=2119&originalType=binary&ratio=1&rotation=0&showTitle=false&size=494248&status=done&style=none&taskId=u29ffa33b-745a-42a2-8b9d-80122b2f02a&title=&width=2119)<a name="xuN0e"></a># Generating an Image Sequence生成图像序列图像序列转成视频：![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686194214627-7968db08-35de-4e93-ae01-140887c3cbe7.png#averageHue=%230e2d5c&clientId=uff736556-ac5a-4&from=paste&height=58&id=u429bbf67&originHeight=58&originWidth=770&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37111&status=done&style=none&taskId=u667f26b6-369d-41dc-b5aa-ee825dd3dca&title=&width=770)<br />视频转成图像序列（PNG）：![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686194433526-204c6bce-0b27-4c2f-a119-fb65fc8d592b.png#averageHue=%23102e5d&clientId=uff736556-ac5a-4&from=paste&height=49&id=u3fbf9dc8&originHeight=49&originWidth=684&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32421&status=done&style=none&taskId=ubaf72023-63af-4794-8034-efbe6d68366&title=&width=684)  png格式文件大小更大，生成质量更高<br />视频转成图像序列（JPG）：![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686194832660-8cdb14c5-6c12-487b-87d8-1284a35d7d01.png#averageHue=%2312305e&clientId=uff736556-ac5a-4&from=paste&height=39&id=u39b57b48&originHeight=39&originWidth=821&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36686&status=done&style=none&taskId=uba9284bc-6da1-4485-a605-b81e40e3793&title=&width=821) jpg格式文件大小很小，默认生成质量低，但是可以通过 -qscale:v 4  来提高质量， 数值为（1-31）数值越小质量越高。<a name="Gp8kS"></a># 控制是否覆盖![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686206387464-34aab456-d2c6-42eb-b0ec-054e3c10f61d.png#averageHue=%23c2c7cc&clientId=uff736556-ac5a-4&from=paste&height=96&id=u1e3663bb&originHeight=96&originWidth=482&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47058&status=done&style=none&taskId=u71aace21-91de-497f-991d-32ca517ce2d&title=&width=482)<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686206317187-2d0b3598-3a77-4f3f-83a5-7906aa9eda7a.png#averageHue=%2314305c&clientId=uff736556-ac5a-4&from=paste&height=34&id=ub34239bf&originHeight=34&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26946&status=done&style=none&taskId=u2c59d3a2-6931-4f20-af8a-0e1eea36da3&title=&width=697)<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686206376676-d456302e-ad81-404f-9788-5d55e48f2d99.png#averageHue=%23183562&clientId=uff736556-ac5a-4&from=paste&height=23&id=u8fd13bb1&originHeight=23&originWidth=668&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25471&status=done&style=none&taskId=ud3831a4a-f21b-4fa5-8452-5877189da09&title=&width=668)<a name="AWNE1"></a># 通过python调用ffmpeg<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FFMPEG_PATH = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/ffmpeg.exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_image_sequence</span>(<span class="params">image_seq_path, output_path, framerate=<span class="number">24</span>, crf=<span class="number">21</span>, preset=<span class="string">&quot;ultrafast&quot;</span>, audio_path=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd = FFMPEG_PATH</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -y&#x27;</span></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -framerate &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(framerate)</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(image_seq_path)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(audio_path)</span><br><span class="line">    </span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -c:v libx264 -crf &#123;0&#125; -preset &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(crf,preset)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -c:a aac -filter_complex &quot;[1:0] apad&quot; -shortest&#x27;</span></span><br><span class="line">    </span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(output_path)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(ffmpeg_cmd)</span><br><span class="line">    subprocess.call(ffmpeg_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    img_seq_path = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/_image_sequences/tears_of_steel_100_frames/overrun.%04d.png&quot;</span>    </span><br><span class="line">    audio_path = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/_audio/overrun.wav&quot;</span></span><br><span class="line">    output_path = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/overrun.mp4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    encode_image_sequence(img_seq_path,output_path,audio_path=audio_path)</span><br></pre></td></tr></table></figure><a name="h02ZQ"></a># 使用Pyside2制作带界面的视频转换工具<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TranscodeWindow</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FFMPEG_PATH = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/ffmpeg.exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    QUALITY_OPTIONS = [</span><br><span class="line">        [<span class="string">&quot;very high&quot;</span>, <span class="string">&quot;18&quot;</span>], <span class="comment"># combobox item label, crf value</span></span><br><span class="line">        [<span class="string">&quot;high&quot;</span>, <span class="string">&quot;20&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;medium&quot;</span>, <span class="string">&quot;23&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;low&quot;</span>, <span class="string">&quot;26&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">    QUALITY_DEFAULT = <span class="string">&quot;medium&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    PRESETS = [</span><br><span class="line">        [<span class="string">&quot;very slow&quot;</span>, <span class="string">&quot;veryslow&quot;</span>], <span class="comment"># combobox item label, preset value</span></span><br><span class="line">        [<span class="string">&quot;slower&quot;</span>, <span class="string">&quot;slower&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;slow&quot;</span>, <span class="string">&quot;slow&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;medium&quot;</span>, <span class="string">&quot;medium&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;fast&quot;</span>, <span class="string">&quot;fast&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;faster&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;very fast&quot;</span>, <span class="string">&quot;veryfast&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;ultra fast&quot;</span>, <span class="string">&quot;ultrafast&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">    PRESET_DEFAULT = <span class="string">&quot;medium&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TranscodeWindow, self).__init__(parent=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;FFmpeg Transcoder&quot;</span>)</span><br><span class="line">        self.setMinimumSize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line">        self.create_layout()</span><br><span class="line">        self.create_connections()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        self.input_path_le = QtWidgets.QLineEdit()</span><br><span class="line">        self.input_path_btn = QtWidgets.QPushButton(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">        self.input_path_btn.setFixedWidth(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.output_path_le = QtWidgets.QLineEdit()</span><br><span class="line">        self.output_path_btn = QtWidgets.QPushButton(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">        self.output_path_btn.setFixedWidth(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.video_codec_combo = QtWidgets.QComboBox()</span><br><span class="line">        self.video_codec_combo.addItem(<span class="string">&quot;h264&quot;</span>, <span class="string">&quot;libx264&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.quality_combo = QtWidgets.QComboBox()</span><br><span class="line">        <span class="keyword">for</span> quality_option <span class="keyword">in</span> self.QUALITY_OPTIONS:</span><br><span class="line">            self.quality_combo.addItem(quality_option[<span class="number">0</span>], quality_option[<span class="number">1</span>])</span><br><span class="line">        self.quality_combo.setCurrentText(self.QUALITY_DEFAULT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.preset_combo = QtWidgets.QComboBox()</span><br><span class="line">        <span class="keyword">for</span> preset <span class="keyword">in</span> self.PRESETS:</span><br><span class="line">            self.preset_combo.addItem(preset[<span class="number">0</span>], preset[<span class="number">1</span>])</span><br><span class="line">        self.preset_combo.setCurrentText(self.PRESET_DEFAULT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.audio_codec_combo = QtWidgets.QComboBox()</span><br><span class="line">        self.audio_codec_combo.addItem(<span class="string">&quot;aac&quot;</span>, <span class="string">&quot;aac&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.transcode_btn = QtWidgets.QPushButton(<span class="string">&quot;Transcode&quot;</span>)</span><br><span class="line">        self.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        input_grp = QtWidgets.QGroupBox(<span class="string">&quot;Input Path&quot;</span>)</span><br><span class="line">        input_grp_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        input_grp_layout.addWidget(self.input_path_le)</span><br><span class="line">        input_grp_layout.addWidget(self.input_path_btn)</span><br><span class="line">        input_grp.setLayout(input_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_grp = QtWidgets.QGroupBox(<span class="string">&quot;Output Path&quot;</span>)</span><br><span class="line">        output_grp_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        output_grp_layout.addWidget(self.output_path_le)</span><br><span class="line">        output_grp_layout.addWidget(self.output_path_btn)</span><br><span class="line">        output_grp.setLayout(output_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        video_options_grp = QtWidgets.QGroupBox(<span class="string">&quot;Video Options&quot;</span>)</span><br><span class="line">        video_options_grp_layout = QtWidgets.QFormLayout()</span><br><span class="line">        video_options_grp.setLayout(video_options_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        video_codec_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        video_codec_layout.addWidget(self.video_codec_combo)</span><br><span class="line">        video_codec_layout.addStretch()</span><br><span class="line">        video_options_grp_layout.addRow(<span class="string">&quot;Video Codec:&quot;</span>, video_codec_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        quality_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        quality_layout.addWidget(self.quality_combo)</span><br><span class="line">        quality_layout.ad</span><br><span class="line">        quality_layout.addStretch()</span><br><span class="line">        video_options_grp_layout.addRow(<span class="string">&quot;Quality:&quot;</span>, quality_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        preset_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        preset_layout.addWidget(self.preset_combo)</span><br><span class="line">        preset_layout.addStretch()</span><br><span class="line">        video_options_grp_layout.addRow(<span class="string">&quot;Preset:&quot;</span>, preset_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        audio_options_grp = QtWidgets.QGroupBox(<span class="string">&quot;Audio Options&quot;</span>)</span><br><span class="line">        audio_options_grp_layout = QtWidgets.QFormLayout()</span><br><span class="line">        audio_options_grp.setLayout(audio_options_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        audio_codec_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        audio_codec_layout.addWidget(self.audio_codec_combo)</span><br><span class="line">        audio_codec_layout.addStretch()</span><br><span class="line">        audio_options_grp_layout.addRow(<span class="string">&quot;Audio Codec:&quot;</span>, audio_codec_layout)</span><br><span class="line">        </span><br><span class="line">        options_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        options_layout.addWidget(video_options_grp)</span><br><span class="line">        options_layout.addWidget(audio_options_grp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(self.transcode_btn)</span><br><span class="line">        button_layout.addWidget(self.cancel_btn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        main_layout.addWidget(input_grp)</span><br><span class="line">        main_layout.addWidget(output_grp)</span><br><span class="line">        main_layout.addLayout(options_layout)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        self.input_path_btn.clicked.connect(self.set_input_path)</span><br><span class="line">        self.output_path_btn.clicked.connect(self.set_output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.transcode_btn.clicked.connect(self.transcode)</span><br><span class="line">        self.cancel_btn.clicked.connect(self.close)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_input_path</span>(<span class="params">self</span>):</span><br><span class="line">        filters = <span class="string">&quot;&quot;</span></span><br><span class="line">        selected_filter = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        input_path, selected_filter = QtWidgets.QFileDialog.getOpenFileName(self, <span class="string">&quot;Select an Input File&quot;</span>, <span class="string">&quot;&quot;</span>, filters, selected_filter)</span><br><span class="line">        <span class="keyword">if</span> input_path:</span><br><span class="line">            self.input_path_le.setText(input_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_output_path</span>(<span class="params">self</span>):</span><br><span class="line">        filters = <span class="string">&quot;*.mp4&quot;</span></span><br><span class="line">        selected_filter = <span class="string">&quot;*.mp4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_path, selected_filter = QtWidgets.QFileDialog.getSaveFileName(self, <span class="string">&quot;Save File As&quot;</span>, <span class="string">&quot;&quot;</span>, filters, selected_filter)</span><br><span class="line">        <span class="keyword">if</span> output_path:</span><br><span class="line">            self.output_path_le.setText(output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transcode</span>(<span class="params">self</span>):</span><br><span class="line">        </span><br><span class="line">        input_path = self.input_path_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> input_path:</span><br><span class="line">            QtWidgets.QMessageBox.critical(self, <span class="string">&quot;Transcode Error&quot;</span>, <span class="string">&quot;Input path not set&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(input_path):</span><br><span class="line">            QtWidgets.QMessageBox.critical(self, <span class="string">&quot;Transcode Error&quot;</span>, <span class="string">&quot;Input path does not exist&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_path = self.output_path_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> output_path:</span><br><span class="line">            QtWidgets.QMessageBox.critical(self, <span class="string">&quot;Transcode Error&quot;</span>, <span class="string">&quot;Output path not set&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        video_codec = self.video_codec_combo.currentData()</span><br><span class="line">        crf = self.quality_combo.currentData()</span><br><span class="line">        preset = self.preset_combo.currentData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        audio_codec = self.audio_codec_combo.currentData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        args = [self.FFMPEG_PATH]                                             <span class="comment"># executable path</span></span><br><span class="line">        args.extend([<span class="string">&quot;-hide_banner&quot;</span>, <span class="string">&quot;-y&quot;</span>])                                   <span class="comment"># global options</span></span><br><span class="line">        args.extend([<span class="string">&quot;-i&quot;</span>, input_path])                                       <span class="comment"># input path</span></span><br><span class="line">        args.extend([<span class="string">&quot;-c:v&quot;</span>, video_codec, <span class="string">&quot;-crf&quot;</span>, crf, <span class="string">&quot;-preset&quot;</span>, preset])    <span class="comment"># video output options</span></span><br><span class="line">        args.extend([<span class="string">&quot;-c:a&quot;</span>, audio_codec])                                    <span class="comment"># audio output options</span></span><br><span class="line">        args.append(output_path)                                              <span class="comment"># output path</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        subprocess.call(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        QtWidgets.QMessageBox.information(self, <span class="string">&quot;Transcode Complete&quot;</span>, <span class="string">&quot;File transcode operation complete.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window = TranscodeWindow()</span><br><span class="line">    window.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><a name="wxhmb"></a># 修剪视频<a name="n6eyl"></a>## 舍弃前面的视频内容![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300194202-542b1d59-9fe0-4a2e-9f41-46fdd21e46a5.png#averageHue=%23090909&clientId=u3813901e-6645-4&from=paste&height=896&id=u9d04f701&originHeight=896&originWidth=2383&originalType=binary&ratio=1&rotation=0&showTitle=false&size=396214&status=done&style=none&taskId=ue363f098-0bf3-4660-b6fb-c1a2ebdcfb6&title=&width=2383)<a name="rpVUA"></a>## 舍弃最后或中间的视频内容![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300292895-ab2f1585-7da6-4d84-a29c-cb5183d9ca08.png#averageHue=%23080808&clientId=u3813901e-6645-4&from=paste&height=1086&id=u1e938456&originHeight=1086&originWidth=2122&originalType=binary&ratio=1&rotation=0&showTitle=false&size=380639&status=done&style=none&taskId=ue9b618ec-c23c-460e-8cbe-6e54ea8f712&title=&width=2122)<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686301468647-c81def59-c870-4984-9281-4cbeae89f43d.png#averageHue=%23173159&clientId=u3813901e-6645-4&from=paste&height=38&id=u7d8e8d6e&originHeight=38&originWidth=1179&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54594&status=done&style=none&taskId=u0851f117-2246-4b95-9a00-ed5c94fdfd8&title=&width=1179)<a name="FyRSV"></a>## 输出指定时间的视频![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300686892-f137b300-3d65-4dc2-af60-e7c56175fd02.png#averageHue=%23070707&clientId=u3813901e-6645-4&from=paste&height=729&id=u64b10927&originHeight=729&originWidth=2366&originalType=binary&ratio=1&rotation=0&showTitle=false&size=228416&status=done&style=none&taskId=uf643b9b5-4e3a-4ab5-a5cf-2f6bd6ca01c&title=&width=2366)<a name="VBigi"></a>## 警告![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300777026-a3422b34-c23a-4155-bbd0-60065c2237a9.png#averageHue=%23090909&clientId=u3813901e-6645-4&from=paste&height=909&id=u5f2e2afa&originHeight=909&originWidth=1900&originalType=binary&ratio=1&rotation=0&showTitle=false&size=334576&status=done&style=none&taskId=u1b88ae88-1ca2-421f-bf9d-fc0cf6c2a40&title=&width=1900)<a name="qa6ga"></a># 提取视频的第一帧的图片获得视频的第一帧的图片：![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686302638281-804ddb84-1921-4383-a272-8ccec992fa64.png#averageHue=%23102c57&clientId=u3813901e-6645-4&from=paste&height=53&id=ue9d0966c&originHeight=53&originWidth=924&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37484&status=done&style=none&taskId=u22801a7e-ea0a-47ec-9339-37e4618236f&title=&width=924)<a name="Obkj2"></a># 提取视频的中间处的一帧图片其中ffprobe.exe是FFmpeg提供的用来查看视频信息的exe文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FFMPEG_PATH = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/ffmpeg.exe&quot;</span></span><br><span class="line">FFPROBE_PATH = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/ffprobe.exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_middle_image</span>(<span class="params">source_path, output_path</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffprobe_cmd = FFPROBE_PATH</span><br><span class="line">    ffprobe_cmd += <span class="string">&#x27; -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 &#x27;</span></span><br><span class="line">    ffprobe_cmd += source_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    duration = <span class="built_in">float</span>(subprocess.check_output(ffprobe_cmd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd = FFMPEG_PATH</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -y -i &#123;0&#125; -ss &#123;1&#125; -frames:v 1 &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(source_path, duration/<span class="number">2.0</span>, output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ffmpeg_cmd)</span><br><span class="line">    subprocess.call(ffmpeg_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_image_sequence</span>(<span class="params">image_seq_path, output_path, framerate=<span class="number">24</span>, crf=<span class="number">21</span>, preset=<span class="string">&quot;ultrafast&quot;</span>, audio_path=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd = FFMPEG_PATH</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -y &#x27;</span></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -framerate &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(framerate)</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(image_seq_path)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(audio_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -c:v libx264 -crf &#123;0&#125; -preset &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(crf, preset)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -c:a aac -filter_complex &quot;[1:0] apad&quot; -shortest&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ffmpeg_cmd)</span><br><span class="line">    subprocess.call(ffmpeg_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    source_path = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/bbb_shot_060.mp4&quot;</span></span><br><span class="line">    output_path = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/middle_frame.png&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    extract_middle_image(source_path, output_path)</span><br></pre></td></tr></table></figure><a name="MWVt3"></a># 通过过滤器添加水印![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304228275-5e64f1b7-abdd-417d-af1d-ea5fe7c97b85.png#averageHue=%23080808&clientId=u3813901e-6645-4&from=paste&height=992&id=ua5f5a6a7&originHeight=992&originWidth=2417&originalType=binary&ratio=1&rotation=0&showTitle=false&size=350093&status=done&style=none&taskId=u848aa727-8b57-486f-934b-f1f4e7b6b4f&title=&width=2417)<br />举例：<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304577780-2882741d-e0d7-4853-ade7-d17a496a50d6.png#averageHue=%23213d67&clientId=u3813901e-6645-4&from=paste&height=32&id=uc62a5349&originHeight=32&originWidth=1120&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44893&status=done&style=none&taskId=u5ad1e4b0-c799-4958-adab-0c8e8681621&title=&width=1120)<br />将图片放到视频的右下角<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304584475-f26b6af6-78e9-4a13-a504-31e1a2c5b011.png#averageHue=%23244471&clientId=u3813901e-6645-4&from=paste&height=38&id=uae6f2beb&originHeight=38&originWidth=185&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8030&status=done&style=none&taskId=u636266ba-2555-4cd5-9365-fe2769603c1&title=&width=185)这里的[0][1]可以不要，然后(W-w-20):(H-h-20)的意思是水印的位置，水印的位置左边如图所示：W为视频的宽度，w为图片的宽度<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304684459-6ec4506d-337a-43d2-ab30-b8a3234f5dd6.png#averageHue=%238da355&clientId=u3813901e-6645-4&from=paste&height=756&id=u499b5bd7&originHeight=756&originWidth=1140&originalType=binary&ratio=1&rotation=0&showTitle=false&size=853210&status=done&style=none&taskId=u8459d329-1180-4f83-a877-a3680fff499&title=&width=1140)<a name="HIx7i"></a># 通过过滤器调整添加的水印的大小的透明度![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686536873938-20b89753-bac8-4824-9507-fceecc57a21b.png#averageHue=%23163562&clientId=u3813901e-6645-4&from=paste&height=46&id=ud34da61d&originHeight=46&originWidth=1964&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84264&status=done&style=none&taskId=u0c432a9c-76ae-4e91-a53d-910228f8d05&title=&width=1964)<br />过滤器为蓝色的字体， [1]scale 是指将前面的输入中的第二个进行缩放。  iw为原图片的像素大小。 iw也可以换成数字代指像素，h=-1的意思是让ffmpeg根据前面的宽度w的大小自动调整高度h的大小。然后后面的[image_scaled]的意思是通过过滤器修改后的图片的名字（因为后面要用到这个更改过缩放的图片，因此先定义一个暂时的名字），[image_scaled]lut=a=val*0.4[image_final];的意思是在原来的基础上将alpha通道的大小调整为原来的0.4倍，然后再给个修改后的名字[image_final]，这个名字是自定义的。然后[0][image_final]overlay=(W-w-20):(H-h-20)为添加水印。<a name="s4cNX"></a># 刻录时间码![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686633394546-2439f3e8-dcf0-457c-bf4e-6ab6ee27e461.png#averageHue=%23244470&clientId=u2a7e5a9c-aa6d-4&from=paste&height=44&id=uebf751ac&originHeight=44&originWidth=2087&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91397&status=done&style=none&taskId=ua56ab983-5706-4f7c-b436-06f70a2a668&title=&width=2087)]]></content>
      
      
      <categories>
          
          <category> MayaPy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE角色表现</title>
      <link href="/2023/08/29/UE-UE%E8%A7%92%E8%89%B2%E8%A1%A8%E7%8E%B0/"/>
      <url>/2023/08/29/UE-UE%E8%A7%92%E8%89%B2%E8%A1%A8%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />[[官方培训]16-UE角色表现 | Epic 孙丹璐_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1i841177TS/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670555785700-f5f0a813-0e2d-4dd6-a193-2d17d8dd9523.png#averageHue=%23f8f7f7&clientId=u5ea4830a-6efe-4&from=paste&height=694&id=u36146edd&originHeight=625&originWidth=794&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145584&status=done&style=none&taskId=ub4bcd0a7-f3b0-4156-a909-9de3d99d347&title=&width=882.2222455931304)<a name="kkv3a"></a># 毛发![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670555803997-2ecf9384-0a99-4f26-bbfc-c16711794c49.png#averageHue=%23f9f9f9&clientId=u5ea4830a-6efe-4&from=paste&height=860&id=uca47bb8a&originHeight=774&originWidth=1056&originalType=binary&ratio=1&rotation=0&showTitle=false&size=174843&status=done&style=none&taskId=u1659f612-53f3-407d-b59d-13afb13cb01&title=&width=1173.3333644160525)<a name="qwmpF"></a>## 各向异性<a name="aymg3"></a>## ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670555859839-b931c494-0cef-40a1-a4ad-23312dd29ed0.png#averageHue=%23a9abb6&clientId=u5ea4830a-6efe-4&from=paste&height=583&id=udf12cba8&originHeight=525&originWidth=1058&originalType=binary&ratio=1&rotation=0&showTitle=false&size=377410&status=done&style=none&taskId=uc50a5bea-5443-44a2-affb-1ee94a10994&title=&width=1175.5555866971436)毛发材质![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556080304-d91e9b43-5cd1-40fa-85b4-782be32f50ef.png#averageHue=%23dfdede&clientId=u5ea4830a-6efe-4&from=paste&height=978&id=u5b994dd2&originHeight=880&originWidth=1101&originalType=binary&ratio=1&rotation=0&showTitle=false&size=349161&status=done&style=none&taskId=uc23909c0-b3f0-48fc-a35f-ae624a9dece&title=&width=1223.3333657406004)<a name="Jzv09"></a>## 毛发-建模(风格化)![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556215562-deee0fdc-4dbf-45ab-9467-b9b8ea6946a9.png#averageHue=%23f4f3f3&clientId=u5ea4830a-6efe-4&from=paste&height=650&id=uec34d6e5&originHeight=585&originWidth=911&originalType=binary&ratio=1&rotation=0&showTitle=false&size=244658&status=done&style=none&taskId=u6af419b5-2df7-4360-9f65-06f32aef7e6&title=&width=1012.2222490369545)<a name="XUcat"></a>## 毛发-建模（精细化）参考项目<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556233905-2efb32fb-e9d8-4eb4-8686-cfea978e18f5.png#averageHue=%237a5c18&clientId=u5ea4830a-6efe-4&from=paste&height=749&id=HqPGs&originHeight=674&originWidth=1708&originalType=binary&ratio=1&rotation=0&showTitle=false&size=397319&status=done&style=none&taskId=u86d3dadb-18a8-4ae8-b056-4b030cf6b54&title=&width=1897.7778280517214)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556317530-4101bac6-4937-4df5-9824-2f9ee9b03cbd.png#averageHue=%23f9f9f8&clientId=u5ea4830a-6efe-4&from=paste&height=581&id=uc7734c9a&originHeight=523&originWidth=711&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98717&status=done&style=none&taskId=u317d40fa-591b-4186-98e7-94882662c61&title=&width=790.0000209278536)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556356023-850c4743-5b0c-4060-bf5c-04591328f0dd.png#averageHue=%23f5f5f4&clientId=u5ea4830a-6efe-4&from=paste&height=344&id=u93c8eea8&originHeight=310&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99725&status=done&style=none&taskId=u1f041c77-b0f9-40da-a100-c95a112e89e&title=&width=725.5555747762144)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556464796-aa8679d9-a163-489e-b6b6-07d695a27848.png#averageHue=%23b4a296&clientId=u5ea4830a-6efe-4&from=paste&height=1187&id=ub80d16af&originHeight=1068&originWidth=2115&originalType=binary&ratio=1&rotation=0&showTitle=false&size=991759&status=done&style=none&taskId=ue80a66f7-c0fe-444c-8b5e-916cf3a5d80&title=&width=2350.000062253742)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556569479-fa4e8cc1-7742-4b51-96a8-38dbf6e0d1c1.png#averageHue=%23ededed&clientId=u5ea4830a-6efe-4&from=paste&height=108&id=uf939bb9e&originHeight=97&originWidth=192&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18750&status=done&style=none&taskId=u6310c1d0-c778-431c-97d0-547b214f957&title=&width=213.33333898473683)<a name="RAY6L"></a>## 插片毛发![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556610742-eecb369a-0a2a-427b-8722-a642b30e043f.png#averageHue=%23f9f9f8&clientId=u5ea4830a-6efe-4&from=paste&height=578&id=u3ed6bed9&originHeight=520&originWidth=776&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99904&status=done&style=none&taskId=u9a5b361a-c3a8-4c4c-98ec-804d256b185&title=&width=862.2222450633114)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556846079-d342e36c-5697-4163-aa96-c136eb0cc691.png#averageHue=%233b3939&clientId=u5ea4830a-6efe-4&from=paste&height=477&id=u585fe394&originHeight=429&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206234&status=done&style=none&taskId=ue06fcfa7-33f2-45a4-90ca-b2d759d384e&title=&width=960.0000254313157)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556893975-f5839ebe-60a9-480c-a40a-31f53c81d901.png#averageHue=%23f6f6f6&clientId=u5ea4830a-6efe-4&from=paste&height=649&id=u47cf3a7c&originHeight=584&originWidth=1061&originalType=binary&ratio=1&rotation=0&showTitle=false&size=216479&status=done&style=none&taskId=u5b184096-1fa9-4ec5-beaa-1622aa73b53&title=&width=1178.88892011878)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557143068-2026fff6-c809-49a2-8b15-25aacafd175c.png#averageHue=%238f887d&clientId=u5ea4830a-6efe-4&from=paste&height=699&id=u1068601e&originHeight=629&originWidth=1386&originalType=binary&ratio=1&rotation=0&showTitle=false&size=333774&status=done&style=none&taskId=u139fecb5-4b0d-4a44-8083-48516966ffe&title=&width=1540.000040796069)![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557157751-78c2257a-9893-49a6-9d5d-0db5b0eb74bd.png#averageHue=%23d0cfcf&clientId=u5ea4830a-6efe-4&from=paste&height=720&id=u38aa4420&originHeight=648&originWidth=1423&originalType=binary&ratio=1&rotation=0&showTitle=false&size=376868&status=done&style=none&taskId=u35c5427f-8457-4abd-b186-b752faf3657&title=&width=1581.1111529962527)<a name="NEYd1"></a>## Groom毛发参考项目<br />metahuman与meerkat demo![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557434902-21533028-dae0-475e-8fe2-a2ff03f2ec5f.png#averageHue=%237d6352&clientId=u5ea4830a-6efe-4&from=paste&height=361&id=uc64038df&originHeight=325&originWidth=814&originalType=binary&ratio=1&rotation=0&showTitle=false&size=251846&status=done&style=none&taskId=u2e8d2b10-de80-4d20-ae55-7161a74b7ad&title=&width=904.4444684040405)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557190031-3fc2eb15-d112-403a-92bd-b497ff70d806.png#averageHue=%23f8f8f8&clientId=u5ea4830a-6efe-4&from=paste&height=599&id=u9af49a0c&originHeight=539&originWidth=1008&originalType=binary&ratio=1&rotation=0&showTitle=false&size=143289&status=done&style=none&taskId=u659bc834-f90a-470b-be21-7dff96e1cca&title=&width=1120.0000296698684)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557246212-c9383c22-f5e0-43a2-858e-81fa56e62985.png#averageHue=%23f2f2f2&clientId=u5ea4830a-6efe-4&from=paste&height=532&id=ud44c957f&originHeight=479&originWidth=1023&originalType=binary&ratio=1&rotation=0&showTitle=false&size=254402&status=done&style=none&taskId=ub5faa41e-2c6f-4bf4-9bd4-b423af33761&title=&width=1136.666696778051)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557544714-9cd583b3-8cc1-4ac7-a970-7a7c275b29bb.png#averageHue=%23e3e2e2&clientId=u5ea4830a-6efe-4&from=paste&height=750&id=u10169682&originHeight=675&originWidth=1342&originalType=binary&ratio=1&rotation=0&showTitle=false&size=215461&status=done&style=none&taskId=uab12a6cf-18cb-4bc9-8045-e962d146749&title=&width=1491.111150612067)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557549863-54f4c274-9941-4986-9ed4-4b3f02922b78.png#averageHue=%23f7f7f6&clientId=u5ea4830a-6efe-4&from=paste&height=366&id=u75bfd51a&originHeight=329&originWidth=1055&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114386&status=done&style=none&taskId=u077b2718-bf6c-4e49-8ce5-1f36075dc90&title=&width=1172.222253275507)<br />做表情时可能毛发会变的分散，解决办法：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557612920-c809e1bb-de91-4420-b259-db49fe7cdbe9.png#averageHue=%23888a89&clientId=u5ea4830a-6efe-4&from=paste&height=746&id=udba45ee2&originHeight=671&originWidth=1477&originalType=binary&ratio=1&rotation=0&showTitle=false&size=651219&status=done&style=none&taskId=u19ee75ae-00b8-4f47-9dee-0c6d2820013&title=&width=1641.11115458571)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557663115-bf8287c4-b7c2-45e1-a68a-30d6ecec9eee.png#averageHue=%23f5f5f4&clientId=u5ea4830a-6efe-4&from=paste&height=319&id=u3609be69&originHeight=287&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99484&status=done&style=none&taskId=u8da6768c-99c1-4957-b1df-4a6adf3f228&title=&width=1042.222249831683)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557711636-632c7de3-4b3f-4637-ace7-34aae141554c.png#averageHue=%23d3bfa9&clientId=u5ea4830a-6efe-4&from=paste&height=677&id=ue3a6bcec&originHeight=609&originWidth=877&originalType=binary&ratio=1&rotation=0&showTitle=false&size=411764&status=done&style=none&taskId=u73bc1685-4601-4702-94b9-e645679cda4&title=&width=974.4444702584074)<br />毛发阴影的问题处理<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670558001299-4b4fc98c-e634-404f-b879-2a5daa60a965.png#averageHue=%23f6f5f5&clientId=u5ea4830a-6efe-4&from=paste&height=854&id=uf5d20dbe&originHeight=769&originWidth=1461&originalType=binary&ratio=1&rotation=0&showTitle=false&size=348376&status=done&style=none&taskId=ud0e38468-8342-4bf6-a37b-818a2a0ef95&title=&width=1623.333376336982)<br />2.<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557898050-4307dea1-52c6-4409-ae83-f7ae2531c6ec.png#averageHue=%233a2920&clientId=u5ea4830a-6efe-4&from=paste&height=836&id=uadc3fbda&originHeight=752&originWidth=1584&originalType=binary&ratio=1&rotation=0&showTitle=false&size=745909&status=done&style=none&taskId=uc67e77bc-00a4-4eee-8e91-987910e6670&title=&width=1760.000046624079)<br />3.cmd命令：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557924888-4102ac8f-f630-4765-94ab-19656f4cabe5.png#averageHue=%23171c1e&clientId=u5ea4830a-6efe-4&from=paste&height=48&id=ua85a8c63&originHeight=43&originWidth=335&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13700&status=done&style=none&taskId=u5ff5294b-f37c-47c9-847e-b63a74efdcc&title=&width=372.222232082744)默认是2048<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557949812-ff6ad8e4-2b81-4da8-af8c-9ef3930d8339.png#averageHue=%23141515&clientId=u5ea4830a-6efe-4&from=paste&height=47&id=u84c9fd92&originHeight=42&originWidth=307&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10332&status=done&style=none&taskId=u8e87bcea-5a94-4746-a538-df6927800b7&title=&width=341.1111201474698)默认是2<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670558072400-15892d06-7cbc-4c3f-ae6d-672df8ff5786.png#averageHue=%23f7f7f6&clientId=u5ea4830a-6efe-4&from=paste&height=771&id=u35d272bd&originHeight=694&originWidth=1594&originalType=binary&ratio=1&rotation=0&showTitle=false&size=268369&status=done&style=none&taskId=u61c5417f-70c4-45f7-9dc7-aa7acf167d9&title=&width=1771.111158029534)<a name="SqPXA"></a># 皮肤<a name="pJYt6"></a>## 建模![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562186218-65b1bf7c-c46d-4eed-bda1-3032bc6edbed.png#averageHue=%239ea09e&clientId=u5ea4830a-6efe-4&from=paste&height=971&id=udf95d4f3&originHeight=874&originWidth=1594&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1276335&status=done&style=none&taskId=uc1270559-074b-4018-89b6-9640b8604ae&title=&width=1771.111158029534)<a name="MpAON"></a>## 材质![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562277589-b3f8ebc4-d350-47c7-99d5-07f71af7a398.png#averageHue=%23eeeeee&clientId=u5ea4830a-6efe-4&from=paste&height=801&id=uc4734c8b&originHeight=721&originWidth=1346&originalType=binary&ratio=1&rotation=0&showTitle=false&size=216004&status=done&style=none&taskId=ucd282ff5-86a6-45ea-9d83-511b66ecebb&title=&width=1495.555595174249)<a name="yhxX4"></a>### 高光遮蔽![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562491464-958fbbb6-c618-4786-83e7-a32238944f70.png#averageHue=%23d7d7d7&clientId=u5ea4830a-6efe-4&from=paste&height=701&id=u15d0a307&originHeight=631&originWidth=1433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132350&status=done&style=none&taskId=u320dc5b1-35c2-4eb9-b4e1-5cc1472d295&title=&width=1592.2222644017077)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562520437-0681c365-37c9-4e4b-8cfd-ebcf6c2c141e.png#averageHue=%23f0f0f0&clientId=u5ea4830a-6efe-4&from=paste&height=737&id=u38fb5c46&originHeight=663&originWidth=1430&originalType=binary&ratio=1&rotation=0&showTitle=false&size=652360&status=done&style=none&taskId=u10461ce0-ebae-4fdf-832f-840bb0f2b53&title=&width=1588.8889309800713)<p><a name="dotoE"></a></p><h3 id="环境光遮蔽"><a href="#环境光遮蔽" class="headerlink" title="环境光遮蔽"></a>环境光遮蔽</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562566960-185ca0ac-cb1c-4d5e-9940-76d4274234d3.png#averageHue=%23e9f0e9&clientId=u5ea4830a-6efe-4&from=paste&height=724&id=u29b24fc4&originHeight=652&originWidth=1458&originalType=binary&ratio=1&rotation=0&showTitle=false&size=274126&status=done&style=none&taskId=ub0dea3aa-f0a7-4541-a023-d5da29a8d01&title=&width=1620.0000429153454" alt="image.png"><br><a name="G7JEj"></a></p><h3 id="Subsurface-Profile参数"><a href="#Subsurface-Profile参数" class="headerlink" title="Subsurface Profile参数"></a>Subsurface Profile参数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562840850-898cc796-be08-4dfa-9646-c7d1bdb51a9b.png#averageHue=%23f7f7f7&clientId=u5ea4830a-6efe-4&from=paste&height=878&id=ZzmjJ&originHeight=790&originWidth=1580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=300890&status=done&style=none&taskId=ueda94234-bc97-4277-b874-6bf0bdd6347&title=&width=1755.555602061897" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563034416-83024fdd-d141-4680-b08f-119834d113c3.png#averageHue=%23f5f5f5&clientId=u5ea4830a-6efe-4&from=paste&height=781&id=ufbcc849b&originHeight=703&originWidth=1452&originalType=binary&ratio=1&rotation=0&showTitle=false&size=315941&status=done&style=none&taskId=u415b8671-b132-42cf-87ed-2802c6e7746&title=&width=1613.3333760720723" alt="image.png"><br><a name="N72jC"></a></p><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563283494-cc6fadd3-e32d-4d9c-8336-9f5fb1c9d227.png#averageHue=%23f6f5f5&clientId=u5ea4830a-6efe-4&from=paste&height=288&id=ue8953a73&originHeight=259&originWidth=873&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86630&status=done&style=none&taskId=ucab0ee38-800e-4e1a-ac51-8fb470102bc&title=&width=970.0000256962253" alt="image.png"><br />表情动画纹理的贡献大于blendshape的贡献<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563396286-3db1d0a6-5f80-48fd-86da-37c69815d2e5.png#averageHue=%23765544&clientId=u5ea4830a-6efe-4&from=paste&height=1390&id=ufa9fe2f3&originHeight=1251&originWidth=1778&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1012597&status=done&style=none&taskId=ub7e352a2-40a5-4f22-80d1-ec602f66d55&title=&width=1975.5556078899067" alt="image.png"><br><a name="NfRRI"></a></p><h2 id="美型"><a href="#美型" class="headerlink" title="美型"></a>美型</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563577363-657111aa-e9e7-4bd1-9621-5a7162fd4224.png#averageHue=%23f5f5f4&clientId=u5ea4830a-6efe-4&from=paste&height=516&id=u2348ec08&originHeight=464&originWidth=1336&originalType=binary&ratio=1&rotation=0&showTitle=false&size=203897&status=done&style=none&taskId=u1d161479-829b-4c0e-936e-66fc8c26e6a&title=&width=1484.4444837687938" alt="image.png"><br><a name="pN0n3"></a></p><h1 id="眼部"><a href="#眼部" class="headerlink" title="眼部"></a>眼部</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563636919-9ddea78d-d963-4cce-818f-101a61eae3b3.png#averageHue=%23f6f6f6&clientId=u5ea4830a-6efe-4&from=paste&height=648&id=u63ffd2c2&originHeight=583&originWidth=1602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=249465&status=done&style=none&taskId=u47f030c1-9a9f-4c92-ae21-7df3bc4e0cf&title=&width=1780.000047153898" alt="image.png"><br />泪腺和眼睛遮蔽的材质要关掉Ray Traced Shadows<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563769001-d34ce089-6788-4fdd-81d6-b6b71ef1a5af.png#averageHue=%23252424&clientId=u5ea4830a-6efe-4&from=paste&height=509&id=u79b03761&originHeight=458&originWidth=696&originalType=binary&ratio=1&rotation=0&showTitle=false&size=65700&status=done&style=none&taskId=u444a1d94-30fc-4e7c-85f3-e77a484252e&title=&width=773.3333538196711" alt="image.png"></p><p><a name="TsxrK"></a></p><h1 id="服饰"><a href="#服饰" class="headerlink" title="服饰"></a>服饰</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563856912-d00ac5da-6215-41c4-ba23-71ef83e2b832.png#averageHue=%23f7f7f6&clientId=u5ea4830a-6efe-4&from=paste&height=177&id=u966a7b87&originHeight=159&originWidth=1009&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57551&status=done&style=none&taskId=u344b18b7-f81d-4c0b-866e-b75cec1615c&title=&width=1121.1111408104139" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563873739-05cd3047-e7db-4f68-935c-27d341afdd23.png#averageHue=%23dadad9&clientId=u5ea4830a-6efe-4&from=paste&height=630&id=ubeb5fae7&originHeight=567&originWidth=1371&originalType=binary&ratio=1&rotation=0&showTitle=false&size=159407&status=done&style=none&taskId=uff9faf8a-4ea9-48d1-ba3e-c1253922698&title=&width=1523.3333736878865" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564000119-8c01f2ac-8665-4bdd-b915-66590e8ad5c1.png#averageHue=%234b3c2e&clientId=u5ea4830a-6efe-4&from=paste&height=920&id=u74fb4ea3&originHeight=828&originWidth=1502&originalType=binary&ratio=1&rotation=0&showTitle=false&size=452797&status=done&style=none&taskId=u3cf32900-7ced-488e-b55b-bd006f4b3e3&title=&width=1668.8889330993475" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564025256-a838f15d-a536-4ed0-8771-eadfbaed21e8.png#averageHue=%23f9f9f8&clientId=u5ea4830a-6efe-4&from=paste&height=612&id=u7ea70d15&originHeight=551&originWidth=1337&originalType=binary&ratio=1&rotation=0&showTitle=false&size=142724&status=done&style=none&taskId=ua250348c-c492-4782-bd1c-ee8ec72f141&title=&width=1485.5555949093393" alt="image.png"><br />不开各向异性和金属度时像棉衣<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564079930-9bf2a326-8030-4b01-8af3-67926a852394.png#averageHue=%2324292a&clientId=u5ea4830a-6efe-4&from=paste&height=669&id=u4e8667ac&originHeight=602&originWidth=1235&originalType=binary&ratio=1&rotation=0&showTitle=false&size=256458&status=done&style=none&taskId=u171715c7-6999-4966-a0d9-a1e93b15b39&title=&width=1372.222258573698" alt="image.png"><br />开各向异性和金属度后<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564127505-03f705c2-b655-4048-bdc1-2475301bba41.png#averageHue=%23222728&clientId=u5ea4830a-6efe-4&from=paste&height=672&id=u7ba6a1a6&originHeight=605&originWidth=1189&originalType=binary&ratio=1&rotation=0&showTitle=false&size=293419&status=done&style=none&taskId=uf770af22-bd4c-4159-99b1-1392844d59f&title=&width=1321.1111461086048" alt="image.png"><br />法线与细节法线<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564166311-cc98195b-8d30-49c4-bcf8-628705663ee6.png#clientId=u5ea4830a-6efe-4&from=paste&height=924&id=u99979862&originHeight=832&originWidth=1639&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2287473&status=done&style=none&taskId=u9b15a22a-a5d3-45c1-a5b0-36e458f8ee7&title=&width=1821.1111593540816" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564932475-e7662ebe-bf60-4008-b529-a91a3b95089e.png#averageHue=%23f4f4f3&clientId=u5ea4830a-6efe-4&from=paste&height=549&id=u1af48ec3&originHeight=494&originWidth=934&originalType=binary&ratio=1&rotation=0&showTitle=false&size=181251&status=done&style=none&taskId=uf2405523-7bf4-4e1f-b91f-d3e25afd61b&title=&width=1037.7778052695012" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670565014005-235357ea-9232-435a-8da1-59025921306a.png#averageHue=%23f6f6f6&clientId=u5ea4830a-6efe-4&from=paste&height=977&id=u2c840fb7&originHeight=879&originWidth=1651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=351105&status=done&style=none&taskId=u936bfc26-b689-4c0a-9481-e8ed28cf637&title=&width=1834.4444930406278" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE资产以及版本管理</title>
      <link href="/2023/08/29/UE-UE%E8%B5%84%E4%BA%A7%E4%BB%A5%E5%8F%8A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2023/08/29/UE-UE%E8%B5%84%E4%BA%A7%E4%BB%A5%E5%8F%8A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />[[官方培训]20-资产及版本管理 | Epic 戴浩军(官方字幕)_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1wG4y1K7Ev/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480)<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677490032792-75d06f2c-b408-428d-827c-0785bbbd7e5c.png#averageHue=%23080808&clientId=u71e946fa-9ffb-4&from=paste&height=146&id=bjkml&originHeight=146&originWidth=1341&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=74036&status=done&style=none&taskId=uedfad366-4e6a-44f5-97ae-f9d92081df5&title=&width=1341)<a name="hG8E4"></a># UE影视动画项目资产和传统线性动画流程资产的异同![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677470086203-1e7bebd2-5457-4f01-842b-509ae995672d.png#averageHue=%23080808&clientId=ufef3a1a4-4586-4&from=paste&height=853&id=u23ff968f&originHeight=1308&originWidth=1393&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=589317&status=done&style=none&taskId=u62b752c9-65f4-4c31-9d19-a4f6937fd97&title=&width=908.7708740234375)<a name="DCjNq"></a>## 相同点：核心工作流和资产类型相似![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677474236265-ebbe734e-c8d2-4023-802e-ccf9fc0e2f4d.png#averageHue=%23696968&clientId=ufef3a1a4-4586-4&from=paste&height=809&id=u4800f56f&originHeight=728&originWidth=1545&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=223114&status=done&style=none&taskId=u1ed18721-a4f2-4e0a-97ac-64cfe59ad24&title=&width=1716.6667121428043)<a name="abB4B"></a>## 差异<a name="WJK9q"></a>### uasset文件![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677474372337-d99c1ff4-a031-4b66-9e86-ca9208d825fa.png#averageHue=%230b0b0b&clientId=u71e946fa-9ffb-4&from=paste&height=749&id=ue7ff0941&originHeight=927&originWidth=1661&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=207758&status=done&style=none&taskId=uc4026be3-6a88-4bfc-ab40-4aec30ef29d&title=&width=1341.5556640625)<a name="RIJfm"></a>### 工程资产相对零散，关系复杂，手动信息追踪难度较大![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677474429037-0daf66ec-e47d-4b64-a4d8-7a271322d628.png#averageHue=%23e0dfde&clientId=u71e946fa-9ffb-4&from=paste&height=809&id=ufb5e8baf&originHeight=1344&originWidth=2768&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=909237&status=done&style=none&taskId=ub04f2316-5393-4052-8818-404be21bc5a&title=&width=1665.5556640625)<a name="VYjHg"></a>### UE对部分资产会进行自动关联修改例如材质赋予不同实例所需要的材质设置不符合时UE会自动进行设置。<br />在骨骼网格体中添加插槽会自动的在对应的骨骼资产中进行修改。<a name="DM600"></a>### 通用资产可能会被多个岗位的资产共同引用对通用资产的修改有可能会影响多个岗位的工作<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677475009978-e54c19ef-8b1c-41f5-8994-0f9cc1bb31f3.png#averageHue=%23696968&clientId=u71e946fa-9ffb-4&from=paste&height=675&id=u98fed9f4&originHeight=1313&originWidth=2392&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=535653&status=done&style=none&taskId=u3a21c7a9-f399-472c-9e3f-642a1b2e5cd&title=&width=1229.7744140625)<a name="pXZmD"></a># UE版本管理使用方法建议<a name="fOaWd"></a>## 三大主流版本控制软件介绍（Perforce、Git、SVN）<a name="x8n1c"></a>### SVN![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677475416311-1e6d1cbd-46d5-4824-a086-823788343bd7.png#averageHue=%230d0d0d&clientId=u71e946fa-9ffb-4&from=paste&height=419&id=u4477191f&originHeight=652&originWidth=620&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=116173&status=done&style=none&taskId=udff70af4-1ff4-4d26-ae20-264873f8987&title=&width=398.888916015625)<a name="HneSN"></a>### Git![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476128450-1c074043-b736-484f-965e-7c896d566b4c.png#averageHue=%23100604&clientId=u71e946fa-9ffb-4&from=paste&height=419&id=u0a75a22c&originHeight=688&originWidth=642&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=83251&status=done&style=none&taskId=ueaaa4a3e-e1ac-4717-80d5-a51a1d0598d&title=&width=391.32293701171875)<br />下载好Git服务后可以去下载个GUI版本![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476211334-29e9c550-9028-4c10-a222-e61299b77fc4.png#averageHue=%23e9e7de&clientId=u71e946fa-9ffb-4&from=paste&height=738&id=u41017ef1&originHeight=664&originWidth=1053&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=495386&status=done&style=none&taskId=uca455b5a-2498-42e1-b199-4cd783bdf6f&title=&width=1170.0000309944162)<br />举例为tortoiseGit![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476234642-36f1743d-fffa-44ff-a93d-c00d6dbe5967.png#averageHue=%23f3f4ef&clientId=u71e946fa-9ffb-4&from=paste&height=248&id=ud5ecf404&originHeight=223&originWidth=281&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=52234&status=done&style=none&taskId=u16478a51-4364-4a26-a446-43652797412&title=&width=312.2222304932867)<a name="IXVIb"></a>#### Git特点允许在单机状态下在本地进行本地管理，联网后再把特定的版本推送到服务器中的远程版本库。<br />git本身是面向代码文件版本控制设计，因此默认只支持将50m以下的文件推送到远程仓库。<br />通过下载LFS可以帮助突破限制<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476715817-1a512577-f2fd-46dd-9d3d-f4314fd6c403.png#averageHue=%23e8e6dc&clientId=u71e946fa-9ffb-4&from=paste&height=486&id=u8649c21f&originHeight=437&originWidth=1274&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=179432&status=done&style=none&taskId=u1251f6df-d2c9-4994-88b0-dd3d93aab78&title=&width=1415.5555930549726)<a name="nMQUD"></a>#### 远程版本库的创建1.在服务器上安装git软件<br />2.创建一个.git结尾的文件目录<br />3.在文件目录下创建bare版本库<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476418401-faf56457-dfc2-4810-9dc6-5f0d11b24a61.png#averageHue=%23f9f7f7&clientId=u71e946fa-9ffb-4&from=paste&height=338&id=ub29518c4&originHeight=560&originWidth=488&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=68563&status=done&style=none&taskId=u0c6b8311-410b-4c17-a058-1c0196feee4&title=&width=294.22222900390625)![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476442853-775494df-09bd-4d66-b309-f63e7e0b8328.png#averageHue=%23e8e8e6&clientId=u71e946fa-9ffb-4&from=paste&height=241&id=u07974914&originHeight=217&originWidth=608&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=63465&status=done&style=none&taskId=u399d1c41-c5c3-499e-94f4-afdb3e387cd&title=&width=675.5555734516666)<br />4.在局域网内共享git文件目录<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476513033-535ceaea-79f2-497a-9acb-7c6ec295ac3e.png#averageHue=%23f6f5f4&clientId=u71e946fa-9ffb-4&from=paste&height=737&id=u88eac518&originHeight=663&originWidth=753&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=142610&status=done&style=none&taskId=u875b1fc5-4577-4d0d-93ca-48912e8a543&title=&width=836.6666888307648)<br />5.客户端push到服务器上的目录地址<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476596439-1918b101-aae5-4f90-a701-f314d63ec360.png#averageHue=%23efeeee&clientId=u71e946fa-9ffb-4&from=paste&height=644&id=u07d16bab&originHeight=580&originWidth=640&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=99490&status=done&style=none&taskId=u54faa1cd-aef9-46ce-87b5-ae534b9a61b&title=&width=711.1111299491228)<a name="bsxeg"></a>### Perforce![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476809509-52d3c63a-3201-48d9-8543-2fdb64c79bb4.png#averageHue=%23101010&clientId=u71e946fa-9ffb-4&from=paste&height=435&id=u516f3089&originHeight=1019&originWidth=880&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=149082&status=done&style=none&taskId=u6942ac9a-3f1b-44cd-a09c-70968a11505&title=&width=375.77783203125)<a name="kp2mV"></a>#### 客户端P4V![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477097677-23cfdc16-b1ca-4bec-be7e-be4c2caca167.png#averageHue=%23ebebeb&clientId=u71e946fa-9ffb-4&from=paste&height=780&id=u82cf647f&originHeight=702&originWidth=912&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=165690&status=done&style=none&taskId=u75b2aaae-0989-4103-a4e4-400c1823888&title=&width=1013.3333601775)<a name="v00oW"></a>#### 服务端P4D![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477229571-9cb36ade-915b-4de2-bca3-3dbf8e92da92.png#averageHue=%237f7e7c&clientId=u71e946fa-9ffb-4&from=paste&height=568&id=u4f54c99d&originHeight=846&originWidth=1029&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=216099&status=done&style=none&taskId=uf68940d3-d3bf-46b8-9693-74d37977983&title=&width=691.3333740234375)<a name="gfS4x"></a>#### 客户端使用![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477245616-a838fb72-2160-49fc-91bd-fc3e7a19075f.png#averageHue=%23e9e7e3&clientId=u71e946fa-9ffb-4&from=paste&height=251&id=u7ba386d2&originHeight=226&originWidth=656&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=65464&status=done&style=none&taskId=u321f6a98-03b7-4ae9-859e-3a615e71afc&title=&width=728.8889081978509)<br />可以通过P4Admin管理软件在客户端电脑上远程管理服务器上的版本库<br />创建账号：<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477321985-b6b856b2-0568-4c97-a1a0-887bce83e20b.png#averageHue=%23f9f9f9&clientId=u71e946fa-9ffb-4&from=paste&height=623&id=u5ddb56e6&originHeight=561&originWidth=1043&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=75542&status=done&style=none&taskId=ubb4ecb6d-23fa-4c0b-8c8f-a4ec420dc76&title=&width=1158.888919588961)<p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477359831-c5003a7d-f213-432b-a977-4c5f85c5286c.png#averageHue=%23eaeaea&clientId=u71e946fa-9ffb-4&from=paste&height=373&id=ub3a241ca&originHeight=336&originWidth=624&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=69446&status=done&style=none&taskId=ua177d675-28a7-4d7f-8f43-13fe0025ba0&title=&width=693.3333517003947" alt="image.png"><br><a name="ffuEO"></a></p><h3 id="控制软件的比较"><a href="#控制软件的比较" class="headerlink" title="控制软件的比较"></a>控制软件的比较</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477541331-2dfccdd9-83aa-4b32-9f1e-f347d79d49f2.png#averageHue=%236e6e6d&clientId=u71e946fa-9ffb-4&from=paste&height=1237&id=u324a2f4f&originHeight=1113&originWidth=2062&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=493588&status=done&style=none&taskId=uef0b0ed1-7aad-4b47-be46-43341293b87&title=&width=2291.11117180483" alt="image.png"></p><p><a name="rzm4k"></a></p><h2 id="UE编辑器版本管理设置和使用（以SVN为例）"><a href="#UE编辑器版本管理设置和使用（以SVN为例）" class="headerlink" title="UE编辑器版本管理设置和使用（以SVN为例）"></a>UE编辑器版本管理设置和使用（以SVN为例）</h2><p>1.可以在UE内部开启源码管理与SVN服务进行关联<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476053367-93618af0-3764-4700-9357-fe4991adf807.png#averageHue=%234e3329&clientId=u71e946fa-9ffb-4&from=paste&height=621&id=m3z9X&originHeight=559&originWidth=1023&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=580712&status=done&style=none&taskId=u71c8a91e-877f-48a5-b6a7-42478c15d1d&title=&width=1136.666696778051" alt="image.png"><br />2.针对要修改的文件使用检出功能来获得服务器上最新的文件并且可以锁定这个文件来通知其他用户防止冲突修改。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476112246-fae3f5aa-6007-49a3-9714-c6942fc9e8fd.png#averageHue=%232c2c2c&clientId=u71e946fa-9ffb-4&from=paste&height=254&id=nnZQ2&originHeight=229&originWidth=679&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=41729&status=done&style=none&taskId=u428b4483-8428-4ebc-adb8-21fefd8ec3f&title=&width=754.4444644303975" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477910181-728bc24d-6c3f-497d-a8ce-8b79235e74eb.png#averageHue=%23312f2e&clientId=u71e946fa-9ffb-4&from=paste&height=308&id=u65e37599&originHeight=277&originWidth=410&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=59969&status=done&style=none&taskId=uf84e0cc5-adb0-4fd7-b226-36da2fba4bf&title=&width=455.55556762365677" alt="image.png"><br />3.修改完成以后使用检入命令来提交并结束锁定状态。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677478003107-3d854a58-6411-4531-867c-6be4144ba743.png#averageHue=%23353434&clientId=u71e946fa-9ffb-4&from=paste&height=266&id=u6a4e0405&originHeight=239&originWidth=733&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=58401&status=done&style=none&taskId=ucd406be0-e9ea-4d1e-a147-b735623266f&title=&width=814.4444660198548" alt="image.png"><br />4.批量提交<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677478173456-ce1af59c-e36d-4fcc-91c1-e347d1a45df5.png#averageHue=%23434343&clientId=u71e946fa-9ffb-4&from=paste&height=191&id=uadae6dff&originHeight=172&originWidth=347&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=26540&status=done&style=none&taskId=uc527fd1f-61ef-402a-bb86-178b7280322&title=&width=385.55556576929" alt="image.png"></p><p><a name="SFTzh"></a></p><h1 id="UE影视动画项目对资产管理的现实需求以及方案参考"><a href="#UE影视动画项目对资产管理的现实需求以及方案参考" class="headerlink" title="UE影视动画项目对资产管理的现实需求以及方案参考"></a>UE影视动画项目对资产管理的现实需求以及方案参考</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677478409793-13903498-8771-4dc2-b717-f51682557a78.png#averageHue=%23828281&clientId=u71e946fa-9ffb-4&from=paste&height=734&id=u0bff5e4c&originHeight=661&originWidth=1017&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=349103&status=done&style=none&taskId=u80b6e5e9-0cca-46de-a67b-9b10993482e&title=&width=1130.000029934778" alt="image.png"><br><a name="X6iCJ"></a></p><h2 id="影视动画项目资产体量庞大"><a href="#影视动画项目资产体量庞大" class="headerlink" title="影视动画项目资产体量庞大"></a>影视动画项目资产体量庞大</h2><p>问题一：影视动画项目资产体量的庞大带来了大量的存储和传输成本。问题产生的原因是影视动画项目对美术的极致要求。但在实际项目中，很多效果有不同的实现路径，我们应该尽可能地采用性价比较高地方式来表现画面效果。根据画面对象地重要性，画面占比来分级别使用资产。而不是全部按最高级别堆砌资产。<br />解决办法：<br />1.比如远处地物体使用较低级别地LOD<br />2.某些大面积不需要实时交互的中远景烟雾特效不需要使用高精度流体解算来表现，而是使用面皮模型配合材质效果来代替。同样可以提供较好的整体美术效果。<br />3.对于一些确定不会近距离观察的模型可以考虑直接使用低分辨率的贴图，这样可以大大减小资产的体量。<br />4.尽可能提高资产的复用率。<br />5.对于需求类似的高精度贴图模型等，尽量只使用一份资产。<br />6.对于需要经常切换服装或道具的角色尽量使用蓝图拼装的方式制作。<br />7.在UE5中使用nanite技术以及静态虚拟纹理技术，允许我们在项目中直接使用超高精度的影视模型资产和贴图资产。<br />问题二：在大部分情况下，我们在UE编辑器中只会针对资产的编辑器属性进行调整，而不会对文件本身进行修改。每次修改属性都需要将整个uasset数据资产上传到服务器，会带来很大的存储和上传成本。<br />解决办法：<br />针对这个问题，UE5引入了Virtual Asset技术，可以让团队只上传或下载属性的元数据，而只在必要的时候才处理美术资产数据。在UE5.1版本中，虚拟资产技术率先提供了对贴图和音频资产的支持。<br><a name="AMME3"></a></p><h2 id="需要兼顾UE资产和DCC资产的管理"><a href="#需要兼顾UE资产和DCC资产的管理" class="headerlink" title="需要兼顾UE资产和DCC资产的管理"></a>需要兼顾UE资产和DCC资产的管理</h2><p>问题：由于UE采用了UAsset格式资产来提高数据的完整性和读写效率，造成了团队通常需要维护UE项目美术资产和外包DCC美术源文件。 <br />解决办法：<br />比较直接的思路：<br />1.把通用DCC资产和项目资产分开管理。通过盘符挂载的方式从本地加载远程项目盘中的资产，手动挑选并下载到本地导入UE使用。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480074230-9bc0b686-af98-4dff-8e75-62ed0e5dda00.png#averageHue=%23050404&clientId=u71e946fa-9ffb-4&from=paste&height=483&id=u49621e4a&originHeight=838&originWidth=1415&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=203449&status=done&style=none&taskId=u8feaea67-80da-495e-a132-045c21fa8a7&title=&width=816.2222900390625" alt="image.png"><br />2.通过开发UE编辑器插件并建立UE通用资产库。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480302367-e86ae11d-2cbd-40c0-8ce3-67ebe1accb7c.png#averageHue=%23070404&clientId=u71e946fa-9ffb-4&from=paste&height=500&id=u233eb846&originHeight=877&originWidth=1434&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=240182&status=done&style=none&taskId=u9b957ea6-b06c-4989-aefe-da300dde0be&title=&width=818.3333740234375" alt="image.png"><br />3.在服务器中通过UE工程的形式将各类资产分类整理成库，通过远程引用的方式加载到本地作为制作参考或资产效果预览。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480364120-de9301f8-8b89-4ef1-b059-aee3340aa8d2.png#averageHue=%23070605&clientId=u71e946fa-9ffb-4&from=paste&height=497&id=u8e633657&originHeight=827&originWidth=1352&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=233072&status=done&style=none&taskId=u4b9d6748-9995-4575-8f7d-3c8a9e8d376&title=&width=813.2222900390625" alt="image.png"><br />4.通过类似bridge或者sketchfab提供的高性价比的资产预览功能，确定符合项目需要后下载到本地使用，同时可以针对模型精度，贴图提供自动化的不同精度的资产文件。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480497459-1be36a2b-33ad-464d-9f4a-f52a67b9d74a.png#averageHue=%236b756e&clientId=u71e946fa-9ffb-4&from=paste&height=970&id=u16cab46a&originHeight=873&originWidth=1669&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=614963&status=done&style=none&taskId=u9520676f-8f6d-40d6-a891-032e730c9ab&title=&width=1854.4444935704469" alt="image.png"><br><a name="FRpn5"></a></p><h2 id="资产复用度高，多个岗位需要频繁访问同一套项目资产"><a href="#资产复用度高，多个岗位需要频繁访问同一套项目资产" class="headerlink" title="资产复用度高，多个岗位需要频繁访问同一套项目资产"></a>资产复用度高，多个岗位需要频繁访问同一套项目资产</h2><p>问题一：某一个资产的变化可能会影响到多个岗位的工作。这带来了资产精简，修改高效等好处，但同时对资产目录划分，权限管理提出了更高的要求。<br />解决办法：<br />1.我们在项目初始就根据团队岗位配置，和根据项目特点划分项目目录<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677481633866-ea219561-e8fb-4c19-9830-1249f77f0397.png#averageHue=%235b5448&clientId=u71e946fa-9ffb-4&from=paste&height=237&id=u16b8131c&originHeight=213&originWidth=376&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=40857&status=done&style=none&taskId=u9d4cfa9a-d1ba-46fd-873e-e428f7e6395&title=&width=417.7777888451096" alt="image.png"><br />2.在版本控制软件的服务端进行合理的用户组别和对应的项目目录权限进行设置，使每个岗位只有权限获取到岗位工作必要的资产，只对职责内的资产具备修改权限。这样即避免了多岗位同时修改资产带来的冲突风险，也能够大大降低客户端电脑对项目文件传输和存储的成本。<br />问题二：在UE编辑器中对于资产进行移动，重命名等操作时有时会产生重定向器。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677482004175-b92f0fe3-e6af-4ac5-8914-006c758fb2e6.png#averageHue=%232c2b29&clientId=u71e946fa-9ffb-4&from=paste&height=563&id=ud2438185&originHeight=507&originWidth=1961&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=286989&status=done&style=none&taskId=uec5f1c01-99ea-4679-8d66-c6cfdd24690&title=&width=2178.888946609734" alt="image.png"><br />原因：这是由于当前文件正在被其他资产引用，无法直接更新引用，引擎会创建默认隐藏的重定向资产来保持这个引用，这些重定向器在系统资源管理器中可以看到，同样是UAsset格式的文件。 <br />解决办法:通过自带的修复重定向器功能来修复。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677482250609-90ece5a7-aab9-47fb-9035-0924467f78e5.png#averageHue=%2339312a&clientId=u71e946fa-9ffb-4&from=paste&height=531&id=u765dec1d&originHeight=478&originWidth=1355&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=427689&status=done&style=none&taskId=u8f070323-1c40-42eb-a1a9-95c6b54f36c&title=&width=1505.5555954391584" alt="image.png"><br><a name="YIZUG"></a></p><h2 id="岗位协作量大，尤其是大规模场景和大量镜头"><a href="#岗位协作量大，尤其是大规模场景和大量镜头" class="headerlink" title="岗位协作量大，尤其是大规模场景和大量镜头"></a>岗位协作量大，尤其是大规模场景和大量镜头</h2><p>解决办法：<br />1.项目关卡，镜头拆分合理，使其能够确保并行工作。<br />2.对于关卡而言可以使用子关卡嵌套的方式，预先按岗位对大规模复杂关卡进行拆分，无论是按区域拆分还是按照光照关卡景物关卡甚至是室内室外关卡进行拆分，总体目标是为了方便将不同的关卡编辑工作保存在不同的关卡文件中，以此方便协作。<br />这样做的缺点是：关卡的编辑工作必须预先划分清楚，后期改变起来比较繁琐。<br />3.在UE5中可以发挥世界分区或者One File Per Actor(OFPA)的优势，允许在不提前划分子关卡的情况下多人可以同时编辑一个关卡，这是由于在传统的关卡管理方式中，所有actor对象的属性都是保存在UMap二进制关卡文件中，无法由多岗位分别进行同时修改后进行合并工作，而开启OFPA后关卡中Actor对象的属性信息将保存在关卡外部的针对每个actor对象创建的文件中，从而允许多人同时编辑同一个关卡，只要不同时修改相同的actor对象即可。</p><p>如果以开放世界为模板创建关卡将会自动勾选OFPA<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486635361-d48e85ad-f8e7-4d96-9c7e-6f4493832c3b.png#averageHue=%23312e2b&clientId=u71e946fa-9ffb-4&from=paste&height=520&id=u6f2882f5&originHeight=468&originWidth=552&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=106600&status=done&style=none&taskId=ud957a589-9fe1-4577-b002-51b0a5eca6a&title=&width=613.3333495811185" alt="image.png"></p><p>4.对于镜头文件，通过合理区分场景和镜头对象的方式来科学划分资产，比如在特定镜头中才会出现的对象，包括灯光相机后处理这些特定的场景对象，我们可以在sequence中通过可生成的方式来动态生成这些对象，而在关卡中只保留所有镜头都需要看到的通用对象，通过这种方式，将镜头特定数据和通用关卡数据进行解耦，不仅大大降低了多岗位协作过程中导致资产冲突的可能，也降低了镜头修改时产生的资产体量<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677487829111-c1b9be8b-9221-43fc-908f-53b11bb62463.png#averageHue=%23463936&clientId=u71e946fa-9ffb-4&from=paste&height=703&id=u4464a044&originHeight=633&originWidth=647&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=344416&status=done&style=none&taskId=ubc7cda65-b2be-4571-a90d-5a7761d260d&title=&width=718.8889079329414" alt="image.png"><br><a name="NT37J"></a></p><h3 id="OFPA的使用"><a href="#OFPA的使用" class="headerlink" title="OFPA的使用"></a>OFPA的使用</h3><p>确保勾选OFPA<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486040451-7a93804f-339c-4307-afe9-e544599b38fc.png#averageHue=%232a2a2a&clientId=u71e946fa-9ffb-4&from=paste&height=293&id=BCMv0&originHeight=264&originWidth=862&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=72593&status=done&style=none&taskId=u8fdb26b4-635b-4224-8ddc-16bab0c665b&title=&width=957.7778031502247" alt="image.png"><br />选中actor修改打包模式为外部<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486760778-73fd514f-951a-4668-a774-637ff2247ea2.png#averageHue=%2322201f&clientId=u71e946fa-9ffb-4&from=paste&height=912&id=u5ac449c7&originHeight=821&originWidth=592&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=251270&status=done&style=none&taskId=ubee334af-2dbd-4fcf-8218-f2eec1a77f0&title=&width=657.7777952029386" alt="image.png"><br />属性文件会放到__ExternalActors__文件目录下<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486888813-eabb0a81-9c92-4307-b17d-ee900ab6a94a.png#averageHue=%23fcfbfb&clientId=u71e946fa-9ffb-4&from=paste&height=229&id=u18137fdd&originHeight=206&originWidth=930&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=41853&status=done&style=none&taskId=ud5f814fe-50d2-4e65-b6d2-36ee8b36623&title=&width=1033.3333607073191" alt="image.png"><br><a name="MmcW0"></a></p><h2 id="项目周期紧，审查频繁"><a href="#项目周期紧，审查频繁" class="headerlink" title="项目周期紧，审查频繁"></a>项目周期紧，审查频繁</h2><p>这种问题需要通过快速迭代的方法来针对。<br />一方面可以通过IT手段确保传输效率，<br />另一方面也需要通过合理的任务拆分，和良好的项目管理和日常操作习惯来提升迭代效率。<br />比如每个岗位在修改资产前都应该使用检出命令通知其他岗位该文件正在编辑。在修改完成后第一时间检入，解除文件锁定。<br />还可以将多个相互关联的文件的修改划分到多个合理划分的变更列表中，修改完成后优先提交这个变更列表，让审查岗位优先看到这个镜头效果。<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488129518-82dcabf6-2764-458a-a505-1d14791744b9.png#averageHue=%232a2523&clientId=u71e946fa-9ffb-4&from=paste&height=506&id=u84ec6b03&originHeight=455&originWidth=758&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=275234&status=done&style=none&taskId=u260f0ffa-f08b-466d-b829-c52496be610&title=&width=842.2222445334924" alt="image.png"><br />UE5提供的插件：<br><a name="HNSQr"></a></p><h3 id="1-关卡快照："><a href="#1-关卡快照：" class="headerlink" title="1.关卡快照："></a>1.关卡快照：</h3><p>可以让我们对关卡编辑的某个时间创建快照数据，相比手动另存关卡，关卡快照数据更简洁，长期保存也不会带来大量的存储成本，并且会根据时间自动命名文件，同时提供了专门的编辑器来预览管理快照数据。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488187114-03a5d9a8-cd94-4315-90a6-261e7cb38023.png#averageHue=%232e2d29&clientId=u71e946fa-9ffb-4&from=paste&height=260&id=okrYA&originHeight=234&originWidth=879&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=63342&status=done&style=none&taskId=u927c8fe2-69c5-4a7f-8db4-badb171aa08&title=&width=976.6666925394984" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488752811-4b30b9fd-2858-42bf-8058-b4453f52f7e1.png#averageHue=%235f472f&clientId=u71e946fa-9ffb-4&from=paste&height=231&id=udb325287&originHeight=231&originWidth=1193&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=329290&status=done&style=none&taskId=u18e5e347-011d-42d9-93b8-c889664a5dd&title=&width=1193" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488782921-944caa55-7c36-410f-b446-b8f8493a85aa.png#averageHue=%23232323&clientId=u71e946fa-9ffb-4&from=paste&height=609&id=ue88b06f1&originHeight=609&originWidth=1170&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=191235&status=done&style=none&taskId=u74c3419b-1d6d-48e2-a001-7987011d328&title=&width=1170" alt="image.png"><br><a name="Ofp3Y"></a></p><h3 id="2-HDRIBackdrop"><a href="#2-HDRIBackdrop" class="headerlink" title="2.HDRIBackdrop"></a>2.HDRIBackdrop</h3><p>对于角色资产的审查，我们首先可以通过蓝图拼装的方式将多个角色部件拼接成不同版本的角色蓝图资产，降低资产的重复度，同时可以创建专门的角色lookdev关卡，并且启动自带的HDRIBackdrop插件配合hdri环境立方体贴图来提供标准的审查环境，而不是每次审查都要打开正在编辑中的关卡。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488857652-d96b5c66-95b0-4749-8c52-2e64dcb2cf03.png#averageHue=%2333352e&clientId=u71e946fa-9ffb-4&from=paste&height=166&id=u7970ed38&originHeight=166&originWidth=697&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=25922&status=done&style=none&taskId=ub9d99d43-5076-43ee-b4b1-b75bbcfc1f8&title=&width=697" alt="image.png"><br><a name="kc8dg"></a></p><h3 id="3-镜头"><a href="#3-镜头" class="headerlink" title="3.镜头"></a>3.镜头</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677489518247-fb63788c-7184-4d78-91a8-663c6e15cff4.png#averageHue=%23413e3d&clientId=u71e946fa-9ffb-4&from=paste&height=315&id=u3b792e45&originHeight=315&originWidth=1284&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=287211&status=done&style=none&taskId=u3c0f7500-44b1-466a-8ea0-f8de1f11471&title=&width=1284" alt="image.png"><br><a name="nkReX"></a></p><h3 id="4-制作工具"><a href="#4-制作工具" class="headerlink" title="4.制作工具"></a>4.制作工具</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677489549558-f219f5a4-384b-46ae-af36-06e22c0269bd.png#averageHue=%23222222&clientId=u71e946fa-9ffb-4&from=paste&height=449&id=uaed0c028&originHeight=449&originWidth=641&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=68040&status=done&style=none&taskId=u7ac7a206-459c-434b-89a0-8173bf01a4a&title=&width=641" alt="image.png"><br><a name="PvvUb"></a></p><h2 id="需要同时应对内部协作和外部协作，既要确保协作效率，又要保证信息安全"><a href="#需要同时应对内部协作和外部协作，既要确保协作效率，又要保证信息安全" class="headerlink" title="需要同时应对内部协作和外部协作，既要确保协作效率，又要保证信息安全"></a>需要同时应对内部协作和外部协作，既要确保协作效率，又要保证信息安全</h2><p>1.分级管理方式：IT团队将内部和外部团队使用的分别保存到单独的服务器，用独立的版本库进行管理，对外只提供外部服务器的IP地址，账号等信息，而内部版本库服务器会定期从外部版本库服务器获取资产，或者向外部版本库服务器新增参考资产，而外部团队完全感知不到内部版本库服务器的存在，在保证信息安全的同时还能够缓解内部资产服务器的压力。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677489729182-4c705cb5-06df-4189-9484-76229e4785ee.png#averageHue=%23010101&clientId=u71e946fa-9ffb-4&from=paste&height=506&id=u889d7b05&originHeight=506&originWidth=1252&originalType=binary&ratio=0.8999999761581421&rotation=0&showTitle=false&size=105635&status=done&style=none&taskId=uae879084-9cd9-4f24-bd89-babe570072d&title=&width=1252" alt="image.png"><br />2.在内部局域网中，通过限制只有特定MAC地址列表中的客户端电脑才能访问内部版本库服务器，以此来增强安全性。</p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maya开发实践</title>
      <link href="/2023/08/29/MayaPy-Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/08/29/MayaPy-Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="n8BWl"></a># 第一节<a name="tHDPL"></a>## Maya帮助文档的查阅方法<p><img src="https://lyzz.top/file/40770" alt="image.png"><br />第一个框住的是命令的名称，也可以叫他函数<br />第二个框住的是命令的标识与参数，只需要在其中找到自己需要的几个使用就可以了<br />第三个框住的是返回值<br />第四个框住的是与查询的命令相似的命令<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648298887735-1e30d740-1aa5-4c47-b499-823769712273.png#averageHue=%23f6f5f4&clientId=u72970d88-4bcf-4&from=paste&height=557&id=ub8a467f2&originHeight=557&originWidth=1510&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56812&status=done&style=none&taskId=u2dda7fa0-d51f-4def-836a-563e746f48e&title=&width=1510" alt="image.png"><br />Flags下面是命令的标识与参数的使用方法<br />最左边是每个标识的全称与简称，中间是标识所需要的参数的数量与类型，右边是标识的特性<br />标识的特性介绍：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299084864-38a11f11-3738-4db3-a7ce-c34f544b486a.png#averageHue=%23a1a19d&clientId=u72970d88-4bcf-4&from=paste&height=456&id=u6bbdbe28&originHeight=456&originWidth=1708&originalType=binary&ratio=1&rotation=0&showTitle=false&size=329338&status=done&style=none&taskId=u498d9385-1785-41c1-8bce-ed4be7b74b4&title=&width=1708" alt="image.png"><br />介绍一下M：例如设置球体半径，因为球体半径只有一个值，因此不能多次使用，但是创建曲线的时候，曲线由许多点构成，每个点都有不同的数值，在创建时可以多次使用他点位置的标识，然后跟上不同点的坐标，然后来创建一个曲线。<br />命令帮助文档的最下方是官方的帮助案例<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299280163-7bbbd788-757d-4fb8-b1f2-c463e4046daf.png#averageHue=%23f3f3f3&clientId=u72970d88-4bcf-4&from=paste&height=213&id=ud1f66f23&originHeight=213&originWidth=605&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8419&status=done&style=none&taskId=uc33f9dc5-72f4-4ded-be4a-dda3621ffa7&title=&width=605" alt="image.png"><br><a name="HuDs0"></a></p><h2 id="如何在maya中使用python"><a href="#如何在maya中使用python" class="headerlink" title="如何在maya中使用python"></a>如何在maya中使用python</h2><p>maya的命令在python中是以包的模式出现的。要使用maya的命令必须要先导入模块才能进行调用。<br />MEL命令与python命令在参数或者标识上调用的区别：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299745648-a3385da8-444e-4ac2-b6de-7ef26f72a26e.png#averageHue=%23605e4f&clientId=u72970d88-4bcf-4&from=paste&height=955&id=u26ac150b&originHeight=955&originWidth=1844&originalType=binary&ratio=1&rotation=0&showTitle=false&size=481675&status=done&style=none&taskId=u12c00128-6c3f-4884-b0b2-9bba71a2170&title=&width=1844" alt="image.png"><br><a name="Q6Dig"></a></p><h1 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h1><p><a name="x1FfQ"></a></p><h2 id="获取场景中的操作对象"><a href="#获取场景中的操作对象" class="headerlink" title="获取场景中的操作对象"></a>获取场景中的操作对象</h2><p>在编程中，在确定对一个物体进行操作之前需要通过命令找到要操作的对象。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648345237495-517645ca-74ef-43a5-a6f2-f7542e62ecdb.png#averageHue=%23474744&clientId=ue82b3c53-47c5-4&from=paste&height=582&id=u49798923&originHeight=582&originWidth=1437&originalType=binary&ratio=1&rotation=0&showTitle=false&size=234325&status=done&style=none&taskId=u486e58b3-21cd-46f4-803d-da6397294b0&title=&width=1437" alt="image.png"></p><ol><li>通过对象的名字获取单一物体</li><li>通过类型获取一类物体</li><li>通过UUID获取某一物体（在名字出现重复的情况下）</li></ol><p>获取对象的命令：ls<br />mc.ls()返回的结果是场景中所有的节点名称的列表<br />mc.ls(sl&#x3D;True)返回的结果是在窗口的选择的对象的名称  sl是selection的简称<br />mc.ls(typ&#x3D;(‘mesh’,’nurbsCurve’)) 作用是列举场景中的所有多边形和曲线两种类型的物体，typ是tpye的简称，因为type是python的关键字所以使用在maya中使用typ<br />ls命令列举的名字都是短名（物体本身的名字），为了防止出现重名的情况,通过long&#x3D;True列举它们的长名<br />mc.ls(typ&#x3D;(‘mesh’,’nurbsCurve’),long&#x3D;True) </p><p>如果想要列出指定类型的所有对象，但不列出该类型的后代对象。例如想要列举transform类型的对象（模型曲线等）但不想要列举由transform扩展出来的对象（例如骨骼）就可以通过<strong>exactType（et）</strong><br />mc.ls(et&#x3D;’transform’)<br />mc.ls(ext&#x3D;’transform’)       # excludeType(ext) 列举除了transform类型外的所有物体<br />根据名字过滤物体：<br />mc.ls(“<em><em>cn</em></em>“)  # *号代表多个字母<br />mc.ls(“blendShape??Set”) # 一个?号代表一个字符<br />根据UUID选择物体：<br />UUID查询方法：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347037508-2dca9d1b-e5f5-4580-821f-390623c21cac.png#averageHue=%234c4b4a&clientId=ue82b3c53-47c5-4&from=paste&height=466&id=u09e4f771&originHeight=466&originWidth=494&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23392&status=done&style=none&taskId=ub65ca394-320a-4e77-bd84-da63feb45cd&title=&width=494" alt="image.png">“<br />mc.(“UUID的名字”)<br />ls命令参数：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347140198-39287a14-8575-4491-936a-cd3c0dd95df9.png#averageHue=%239cb0cc&clientId=ue82b3c53-47c5-4&from=paste&height=929&id=u220f1100&originHeight=929&originWidth=1735&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1248469&status=done&style=none&taskId=u319a3e4f-e320-4e4d-a8c3-302a842b37c&title=&width=1735" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347152462-ba8b85e2-60af-4326-8624-c7c33db74c2a.png#averageHue=%2398adcb&clientId=ue82b3c53-47c5-4&from=paste&height=927&id=u2d696a29&originHeight=927&originWidth=1730&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1375151&status=done&style=none&taskId=ua7043b23-a9c8-43af-b3b8-6f7d3243bfe&title=&width=1730" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347179521-2b39c4e1-679b-4fb4-8c8c-6d609e49df4c.png#averageHue=%239bb0cf&clientId=ue82b3c53-47c5-4&from=paste&height=929&id=u99c6f9eb&originHeight=929&originWidth=1732&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1121096&status=done&style=none&taskId=u92937644-7185-4c3e-8872-397860f66b6&title=&width=1732" alt="image.png"><br><a name="pOJGE"></a></p><h2 id="rename命令"><a href="#rename命令" class="headerlink" title="rename命令"></a>rename命令</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347220026-7e04c1af-745c-484f-b58b-44359d9bb392.png#averageHue=%23363636&clientId=ue82b3c53-47c5-4&from=paste&height=436&id=ub1721049&originHeight=436&originWidth=745&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72460&status=done&style=none&taskId=uffedf7d1-fa1a-4ecd-9fde-ff5b5abcdae&title=&width=745" alt="image.png"><br />批量重命名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> shape <span class="keyword">in</span> mc.ls(typ=<span class="string">&#x27;mesh&#x27;</span>):</span><br><span class="line">    mc.rename(shape,<span class="string">&#x27;mesh_&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(shape))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648351793548-74dc4039-5b32-45c7-98e3-5023af821ead.png#averageHue=%233f3e3d&clientId=ue82b3c53-47c5-4&from=paste&height=320&id=u78e52cbf&originHeight=320&originWidth=214&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13931&status=done&style=none&taskId=u092ba3b2-1198-4d0a-8e1e-e6375914fdb&title=&width=214" alt="image.png"><br><a name="QgUf7"></a></p><h1 id="第三节获取与改变场景中的层级关系"><a href="#第三节获取与改变场景中的层级关系" class="headerlink" title="第三节获取与改变场景中的层级关系"></a>第三节获取与改变场景中的层级关系</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648356410300-86b3c513-619f-496e-8c04-acece4ec8855.png#averageHue=%233c3c3c&clientId=ue82b3c53-47c5-4&from=paste&height=694&id=u3ecf0d6c&originHeight=694&originWidth=798&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117446&status=done&style=none&taskId=u118e4e36-0d75-4461-bfcd-4ca584c37a7&title=&width=798" alt="image.png"><br />通过mc.listRelatives()命令可以处理层级关系<br />mc.listRelatives(‘Mery_grp’,p&#x3D;True) # 得到Mery_grp的父物体名字（只有一个）<br />mc.listRelatives(‘Mery_grp’,c&#x3D;True) # 得到Mery_grp的子物体名字（只得到“儿子”，没有“孙子”）<br />mc.listRelatives(‘Mery_grp’,ad&#x3D;True) # ad是allDescendents的简称，得到Mery_grp的所有子物体名字<br />mc.listRelatives(‘Mery_grp’,ad&#x3D;True,typ&#x3D;’joint’) # 得到Mery_grp的所有子物体名字（只要joint类型的）<br />mc.listRelatives(‘Mery_grp’,ad&#x3D;True,typ&#x3D;’joint’,f&#x3D;True)# f是fullPath的简称，防止子物体有重名的情况，列举长名<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648357759713-7d694590-c2c2-4fc5-920b-89c4082f91a1.png#averageHue=%239fb2d0&clientId=ue82b3c53-47c5-4&from=paste&height=943&id=u275f16bc&originHeight=943&originWidth=1211&originalType=binary&ratio=1&rotation=0&showTitle=false&size=823384&status=done&style=none&taskId=u2e957dbd-7965-44f4-b29b-08101bc678c&title=&width=1211" alt="image.png"><br><a name="jLgLU"></a></p><h2 id="修改物体的层级关系"><a href="#修改物体的层级关系" class="headerlink" title="修改物体的层级关系"></a>修改物体的层级关系</h2><p><strong>parent命令：</strong><br />mc.parent(‘pSphere1’,’Mery_grp’) # 讲pSphere1放到Mery_grp的下面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> mc.ls(sl=<span class="literal">True</span>) :</span><br><span class="line">    mc.parent(obj,<span class="string">&#x27;Mery_grp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>mc.parent(‘pSphere1’,w&#x3D;True) # w为world的缩写，这个命令的作用是将pSphere1放到世界层级的下边，这样pSphere1就没有任何父物体了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648358668411-10975296-0945-48cc-923a-887143b1a08b.png#averageHue=%2397abc9&clientId=ue82b3c53-47c5-4&from=paste&height=929&id=ua58ef5f8&originHeight=929&originWidth=1726&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1362801&status=done&style=none&taskId=u4c5068ad-f4c4-448b-af42-8a890a9195a&title=&width=1726" alt="image.png"><br /><strong>group命令：</strong><br />mc.group(mc.ls(sl&#x3D;True),name&#x3D;’ball_group’) # 将选择的物体进行打组并起组的名字叫ball_group，第一个参数接收的是一个<strong>列表</strong>，因为mc.ls(sl&#x3D;True)返回的就是一个列表，因此不需要再增加中括号了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648358915022-c4f65ec7-b548-480a-bbaf-79850e5a820e.png#averageHue=%239aafd0&clientId=ue82b3c53-47c5-4&from=paste&height=676&id=u2764c4b1&originHeight=676&originWidth=1757&originalType=binary&ratio=1&rotation=0&showTitle=false&size=951958&status=done&style=none&taskId=ub347cb79-93ae-49ee-941d-e016c73d854&title=&width=1757" alt="image.png"><br><a name="OcFZc"></a></p><h1 id="第四节"><a href="#第四节" class="headerlink" title="第四节"></a>第四节</h1><p><a name="KyKpU"></a></p><h2 id="获取与更改物体的属性"><a href="#获取与更改物体的属性" class="headerlink" title="获取与更改物体的属性"></a>获取与更改物体的属性</h2><p><a name="PCHmN"></a></p><h3 id="move，rotate，scale命令，移动，旋转，缩放"><a href="#move，rotate，scale命令，移动，旋转，缩放" class="headerlink" title="move，rotate，scale命令，移动，旋转，缩放"></a>move，rotate，scale命令，移动，旋转，缩放</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>mc.move(0,1,0,’pCube1’,r&#x3D;True)</td><td>将pCube1在y轴方向移动1个单位，r是relative的缩写，意思是自身坐标</td></tr><tr><td>mc.move(0,1,0,’pCube1’,a&#x3D;True)</td><td>将pCube1移动到世界坐标（0，1，0）的位置，a是absolute的缩写，意思是世界坐标</td></tr><tr><td>mc.rotate(0,10,0,’pCube1’,r&#x3D;True)</td><td>将pCube1在y轴方向旋转10度，r是relative的缩写，意思是自身坐标</td></tr><tr><td>mc.rotate(0,1,0,’pCube1’,a&#x3D;True)</td><td>将pCube1y轴的旋转属性值设置为10度，a是absolute的缩写，意思是世界坐标</td></tr><tr><td>mc.scale(1,5,1,’pCube1’,r&#x3D;True)</td><td>将pCube1在y轴方向放大5倍</td></tr><tr><td>mc.scale(1,5,1,’pCube1’,a&#x3D;True)</td><td>将pCube1的缩放属性设置为1，5，1</td></tr></tbody></table><p><a name="wwcRK"></a></p><h3 id="xform命令（不能使用缩放），可以做绑定上的无缝切换"><a href="#xform命令（不能使用缩放），可以做绑定上的无缝切换" class="headerlink" title="xform命令（不能使用缩放），可以做绑定上的无缝切换"></a>xform命令（不能使用缩放），可以做绑定上的无缝切换</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>_t &#x3D; mc.xform(‘locator1’,q&#x3D;True,t&#x3D;True)</td><td>查询locator1的移动属性(transform)并将结果传入给变量_t （列表）,q是查询的意思</td></tr><tr><td>mc.xform(‘locator2’,t&#x3D;_t )</td><td>将刚才定义的_t变量 的数值传递给locator2的移动属性,默认是以自身坐标空间改变</td></tr><tr><td>_ro &#x3D; mc.xform(‘locator1’,q&#x3D;True,ro&#x3D;True)</td><td>查询locator1的旋转属性(rotation)并将结果传入给变量_ro（列表）</td></tr><tr><td>mc.xform(‘locator2’,ro&#x3D;_ro )</td><td>将刚才定义的_t变量 的数值传递给locator2的旋转属性,默认是以自身坐标空间改变</td></tr><tr><td>tt &#x3D; mc.xform(‘locator1’,q&#x3D;True,t&#x3D;True,ws&#x3D;True)</td><td>ws为True意思是以世界坐标空间获取</td></tr><tr><td>mc.xform(‘pSphere1’,t&#x3D;tt,ws&#x3D;True)</td><td>将locator1的世界坐标信息给pSphere1。</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648371326540-67345798-b3f3-4d3e-baa7-051e0c87f255.png#averageHue=%23a6b7d4&clientId=ue82b3c53-47c5-4&from=paste&height=1016&id=u75eb237a&originHeight=1016&originWidth=1187&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1063536&status=done&style=none&taskId=ud9e586ee-3f09-42a0-a9d6-76f0d12f921&title=&width=1187" alt="image.png"><br><a name="D23lG"></a></p><h1 id="第五节常见节点、物体的创建"><a href="#第五节常见节点、物体的创建" class="headerlink" title="第五节常见节点、物体的创建"></a>第五节常见节点、物体的创建</h1><p><a name="EOEC8"></a></p><h2 id="创建某一确定物体的命令"><a href="#创建某一确定物体的命令" class="headerlink" title="创建某一确定物体的命令"></a>创建某一确定物体的命令</h2><p>创建球体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.polySphere(r=<span class="number">2</span>,sx=<span class="number">5</span>,sy=<span class="number">5</span>) <span class="comment"># 球体的半径为2，x，y的细分(subdivisions)都设置为5，</span></span><br></pre></td></tr></table></figure><p>创建圆环曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.circle(r=<span class="number">10</span>,s=<span class="number">20</span>,nr=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="comment"># 圆环的半径为10，段数(sections)设置为20，法线为（0，1，0）</span></span><br></pre></td></tr></table></figure><p>创建曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.curve(d=<span class="number">1</span>,p=[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]) <span class="comment"># d（degree）的意思是曲率，p的意思是点</span></span><br></pre></td></tr></table></figure><p>创建骨骼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) :</span><br><span class="line">    mc.joint(p=(<span class="number">0</span>,i,<span class="number">0</span>)) <span class="comment"># 使用此命令创建骨骼时，新创建的骨骼默认设置为当前选择的对象的子物体</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648378287550-9eef1c30-728b-4f9f-ae40-e560b6f199a3.png#averageHue=%23464646&clientId=ue82b3c53-47c5-4&from=paste&height=326&id=u50ff2ae1&originHeight=326&originWidth=431&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19389&status=done&style=none&taskId=u6a82b080-ea3a-401b-a889-116731e654f&title=&width=431" alt="image.png"><br><a name="QqnpH"></a></p><h2 id="万能创建法-createNode"><a href="#万能创建法-createNode" class="headerlink" title="万能创建法 createNode"></a>万能创建法 createNode</h2><p>这个方法是创建节点使用的。可以创建的节点如下：<br /><a href="https://help.autodesk.com/view/MAYAUL/2019/ENU/index.html?contextId=NODES-INDEX">https://help.autodesk.com/view/MAYAUL/2019/ENU/index.html?contextId=NODES-INDEX</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) :</span><br><span class="line">    mc.createNode(<span class="string">&#x27;joint&#x27;</span>) <span class="comment"># 创建的骨骼都是在同一层级下，createNode只是单纯创造节点使用的</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648379098018-a2a53c2a-96b0-401c-a3da-e27b052f6868.png#averageHue=%239db5db&clientId=ue82b3c53-47c5-4&from=paste&height=523&id=u649f1d70&originHeight=523&originWidth=1774&originalType=binary&ratio=1&rotation=0&showTitle=false&size=462176&status=done&style=none&taskId=u3889cc15-925b-4256-91a0-f4b8b3ea30b&title=&width=1774" alt="image.png"><br><a name="NOvug"></a></p><h1 id="第六节获取节点的类型和属性"><a href="#第六节获取节点的类型和属性" class="headerlink" title="第六节获取节点的类型和属性"></a>第六节获取节点的类型和属性</h1><p><a name="RBCtN"></a></p><h3 id="获取选择物体的类型nodeType"><a href="#获取选择物体的类型nodeType" class="headerlink" title="获取选择物体的类型nodeType"></a>获取选择物体的类型nodeType</h3><p>import maya.cmds as mc <br />sel &#x3D; mc.ls(sl&#x3D;True)[0]<br />print mc.nodeType(sel)<br><a name="r9jbq"></a></p><h3 id="获取物体所有属性listAttr"><a href="#获取物体所有属性listAttr" class="headerlink" title="获取物体所有属性listAttr"></a>获取物体所有属性listAttr</h3><p>import maya.cmds as mc <br />print mc.listAttr(‘pCube1’)</p><p><a name="dSOPf"></a></p><h3 id="获取物体可k帧属性"><a href="#获取物体可k帧属性" class="headerlink" title="获取物体可k帧属性"></a>获取物体可k帧属性</h3><p>import maya.cmds as mc <br />print mc.listAttr(‘pCube1’,k&#x3D;1)<br><a name="bJWtt"></a></p><h3 id="获取物体自定义属性（ud）"><a href="#获取物体自定义属性（ud）" class="headerlink" title="获取物体自定义属性（ud）"></a>获取物体自定义属性（ud）</h3><p>import maya.cmds as mc<br />box &#x3D; ‘pCube1’<br />for attr in mc.listAttr(box, ud&#x3D;True):<br />    print ‘{0}.{1}’.format(box, attr)<br><a name="BX4Oi"></a></p><h3 id="查询属性getAttr（参数是名称加上点加上属性名）"><a href="#查询属性getAttr（参数是名称加上点加上属性名）" class="headerlink" title="查询属性getAttr（参数是名称加上点加上属性名）"></a>查询属性getAttr（参数是名称加上点加上属性名）</h3><p>import maya.cmds as mc <br />print mc.getAttr(‘pCube1.sy’)<br><a name="VYI9L"></a></p><h3 id="修改属性setAttr"><a href="#修改属性setAttr" class="headerlink" title="修改属性setAttr"></a>修改属性setAttr</h3><p>import maya.cmds as mc <br />print mc.setAttr(‘pCube1.sy’,1)<br />如果属性是字符串类型的（用户自定义的属性）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648467132524-549002d8-f1ff-40c1-ad9f-6cffffd8990b.png#averageHue=%234e4e4e&clientId=ue4c50ca3-2f68-4&from=paste&height=564&id=u39635c7d&originHeight=564&originWidth=516&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23790&status=done&style=none&taskId=u4f0ca81a-093d-4b41-9d60-cb9ee7fecdc&title=&width=516" alt="image.png"><br />那么需要属性值是带引号的同时也需要在后面加一个typ&#x3D;’string’<br />举例<br />mc.setAttr(‘pCube1.str’,’1’,typ&#x3D;’string’)<br />mc.setAttr(‘pCube1.str’,’1’,typ&#x3D;’string’,l&#x3D;True) # 赋值后并将属性锁定<br><a name="pVg21"></a></p><h1 id="第七节连接属性、断开属性、属性联动"><a href="#第七节连接属性、断开属性、属性联动" class="headerlink" title="第七节连接属性、断开属性、属性联动"></a>第七节连接属性、断开属性、属性联动</h1><p><a name="txwY9"></a></p><h2 id="常见的连接属性的方法"><a href="#常见的连接属性的方法" class="headerlink" title="常见的连接属性的方法"></a>常见的连接属性的方法</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648543031243-9bd5873c-9f8b-48d8-8fc0-05057912678f.png#averageHue=%23474646&clientId=u783b1c22-f3a3-4&from=paste&height=659&id=u307f7f96&originHeight=659&originWidth=536&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36194&status=done&style=none&taskId=ua1588174-0769-4654-9e5c-15c799dbdc8&title=&width=536" alt="image.png"><br />左边的属性影响右边的属性。<br><a name="OKwGF"></a></p><h2 id="连接属性-connectAttr命令"><a href="#连接属性-connectAttr命令" class="headerlink" title="连接属性 connectAttr命令"></a>连接属性 connectAttr命令</h2><p>mc.connectAttr(‘pCube1.t’,’pSphere1.t’) # 将pCube1的translate属性与pSphere1的translate属性连接起来<br />mc.connectAttr(‘pCube2.t’,’pSphere1.t’) # 会提示错误，因为pSphere1已经处于连接状态<br />mc.connectAttr(‘pCube2.t’,’pSphere1.t’.f&#x3D;True) # f是force的简写，代表强制连接pCube2与pSphere1。<br><a name="ieC9p"></a></p><h2 id="断开属性-disconnectAttr命令"><a href="#断开属性-disconnectAttr命令" class="headerlink" title="断开属性 disconnectAttr命令"></a>断开属性 disconnectAttr命令</h2><p>mc.disconnectAttr(‘pCube2.t’,’pSphere1.t’)<br><a name="FLqE8"></a></p><h1 id="第八节获取节点的连接关系"><a href="#第八节获取节点的连接关系" class="headerlink" title="第八节获取节点的连接关系"></a>第八节获取节点的连接关系</h1><p><a name="TkcQV"></a></p><h2 id="命令：listConnections-获取节点的连接信息"><a href="#命令：listConnections-获取节点的连接信息" class="headerlink" title="命令：listConnections 获取节点的连接信息"></a>命令：listConnections 获取节点的连接信息</h2><p><strong>可用参数：</strong><br />source 简称s 上游，来源<br />destination简称d 下游，目标 <br />plugs 简称p 接口，返回连接的节点的属性的名字，参数为布尔类型（如果想要获取属性名字也可以通过connectionInfo命令获取）<br />type 简称t 根据类型返回节点信息<br /><strong>举例：</strong>mc.listConnections(‘blendColors1’,s&#x3D;True,d&#x3D;False,p&#x3D;True,t&#x3D;’lambert’)<br><a name="kHmPr"></a></p><h2 id="命令：connectionInfo-获取节点属性的连接信息"><a href="#命令：connectionInfo-获取节点属性的连接信息" class="headerlink" title="命令：connectionInfo 获取节点属性的连接信息"></a>命令：connectionInfo 获取节点属性的连接信息</h2><p><strong>可用参数：</strong><br />sourceFromDestination简称sfd，为True时返回上游属性（返回的是一个unicode）<br />destinationFromSource简称dfs，为True时返回下游属性（返回的是一个列表）<br />isSource不能用简称，因为is是关键词，为True时判断目标属性是否为上游属性（是否是用来输出的源）<br />isDestination不能用简称，因为id是关键词，为True时判断目标属性是否为下游属性<br /><strong>举例：</strong><br />mc.connectionInfo(‘blendColors1.output’,dfs&#x3D;True)<br><a name="w8SSs"></a></p><h1 id="第九节-约束"><a href="#第九节-约束" class="headerlink" title="第九节 约束"></a>第九节 约束</h1><p>常见的约束：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648559948601-8b2bdb3d-a8ce-4045-b140-3c1b0c76d6b3.png#averageHue=%23535252&clientId=u17e0615e-ed5e-4&from=paste&height=312&id=u0ed1d8ee&originHeight=312&originWidth=247&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11586&status=done&style=none&taskId=u2ae086d2-b2b3-4ea5-8217-05b7c06e503&title=&width=247" alt="image.png">从上到下依此为，父子约束、点约束、旋转约束、缩放约束、目标约束、极向量约束。<br />这里介绍一下点约束、旋转约束、父子约束。<br><a name="J5u4Y"></a></p><h2 id="点约束：pointConstraint"><a href="#点约束：pointConstraint" class="headerlink" title="点约束：pointConstraint"></a>点约束：pointConstraint</h2><p>能使用命令调用的属性都包含在这里面<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648560223121-cd9181bb-4688-4ec9-bc62-a40afbbbe679.png#averageHue=%23525251&clientId=u17e0615e-ed5e-4&from=paste&height=389&id=u4f5359bc&originHeight=389&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14552&status=done&style=none&taskId=u2eb3d0ae-3318-4e1d-a103-eee6b445367&title=&width=562" alt="image.png"><br />平时的约束操作：选择约束的物体然后再选择被约束的物体然后执行约束。<br />使用命令进行约束：mc.pointConstraint(‘pCube1’,’pSphere1’)第一个为约束的物体，第二个为被约束的物体<br />保持偏移的情况下进行约束：mc.pointConstraint(‘pCube1’,’pSphere1’,mo&#x3D;True)  mo为maintaniOffset的缩写 <br />约束的同时赋予约束节点名字: mc.pointConstraint(‘pCube1’,’pSphere1’,mo&#x3D;True,n&#x3D;’ball_cons’)<br />**约束信息的查询 **<br />查询一个被约束物体的约束节点名字：mc.pointConstraint(‘pSphere1’,q&#x3D;True,n&#x3D;True)<br />查询一个被约束物体的约束物体名字（列表）：mc.pointConstraint(‘pSphere1’,q&#x3D;True,tl&#x3D;True)  tl为targetList的简称<br />查询一个被约束物体的约束节点权重别名列表：mc.pointConstraint(‘pSphere1’,q&#x3D;True,wal&#x3D;True) wal为weightAliasList的简称<br><a name="ErPRh"></a></p><h2 id="旋转约束orientConstraint"><a href="#旋转约束orientConstraint" class="headerlink" title="旋转约束orientConstraint"></a>旋转约束orientConstraint</h2><p>跟点约束是一样的，就是把point改成orient 其他就都一样了<br><a name="Vj3S0"></a></p><h2 id="父子约束parentConstraint"><a href="#父子约束parentConstraint" class="headerlink" title="父子约束parentConstraint"></a>父子约束parentConstraint</h2><p>实例：利用控制器对骨骼进行约束<br />在实际运用中控制器（可以用曲线当控制器）的轴向要和骨骼的轴向一致。<br />因此可以先为控制器创建一个组，然后通过父子约束使骨骼约束控制器的组，这样控制器作为组的子物体就与骨骼轴向一致了，再将这个约束删除掉，再执行父子约束使控制器约束骨骼。就可以实现使控制器与骨骼轴向并且绑定到了一起。<br />代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">jt1=<span class="string">&#x27;joint1&#x27;</span></span><br><span class="line">ctg=<span class="string">&#x27;ctl_grp&#x27;</span></span><br><span class="line">ctl=<span class="string">&#x27;ctl&#x27;</span></span><br><span class="line">mc.delete(mc.parentConstraint(jt1,ctg))</span><br><span class="line">mc.parentConstraint(ctl,jt1)</span><br></pre></td></tr></table></figure><p><a name="jel5d"></a></p><h1 id="第十节-关键帧"><a href="#第十节-关键帧" class="headerlink" title="第十节 关键帧"></a>第十节 关键帧</h1><p><a name="OWGuS"></a></p><h2 id="设置关键帧setKeyframe"><a href="#设置关键帧setKeyframe" class="headerlink" title="设置关键帧setKeyframe"></a>设置关键帧setKeyframe</h2><table><thead><tr><th>命令</th><th>执行效果</th></tr></thead><tbody><tr><td>mc.setKeyframe()</td><td>为选择物体所有属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’)</td><td>为pSphere1所有属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at&#x3D;’tx’)</td><td>为pSphere1的tx属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at&#x3D;[‘tx’,’ty’])</td><td>为pSphere1的tx，ty属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at&#x3D;[‘tx’,’ty’,’r’])</td><td>为pSphere1的tx，ty,rx,ry,rz属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at&#x3D;[‘tx’,’ty’,’r’],v&#x3D;10)</td><td>为pSphere1的tx，ty,rx,ry,rz属性k帧,并指定属性的值为10</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at&#x3D;[‘tx’,’ty’,’r’],v&#x3D;10,t&#x3D;10)</td><td>为pSphere1的tx，ty,rx,ry,rz属性在第10帧k帧,并指定属性的值为10</td></tr></tbody></table><p> 可以通过此命令进行的实际案例举例：</p><ol><li>不通过Maya的导出动画工具，我们可以自定义导出类型，然后读进来，用这个命令给控制器赋值上动画，就可以做一个导出导入动画的工具了。</li><li>让一个物体按照数学曲线来实现他的运动，例如让一个球沿着原点旋转，可以让这个球的X轴为正弦，Z轴为余弦的方式配合着来实现让球转圈的运动。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">360</span>) :</span><br><span class="line">    x=math.sin(i*math.pi/<span class="number">180</span>)*<span class="number">10</span> <span class="comment"># 在程序中的数学计算默认是以弧度为单位进行运算的，因此将角度转换为弧度</span></span><br><span class="line">    z=math.cos(i*math.pi/<span class="number">180</span>)*<span class="number">10</span></span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tx&#x27;</span>,t=i,v=x)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tz&#x27;</span>,t=i,v=z)</span><br></pre></td></tr></table></figure><a name="kakFH"></a></li></ol><h2 id="获取与编辑关键帧keyframe"><a href="#获取与编辑关键帧keyframe" class="headerlink" title="获取与编辑关键帧keyframe"></a>获取与编辑关键帧keyframe</h2><table><thead><tr><th>命令</th><th>执行效果</th></tr></thead><tbody><tr><td>mc.keyframe(‘pSphere1’,q&#x3D;True,tc&#x3D;True)</td><td>tc为timeChange的缩写，返回的是一个列表，记录着物体所有存在关键帧的时间</td></tr><tr><td>mc.keyframe(‘pSphere1’,q&#x3D;True,vc&#x3D;True)</td><td>vc为valueChange的缩写，返回的是一个列表，记录着物体所有存在关键帧的数值</td></tr><tr><td>mc.keyframe(‘pSphere1’,q&#x3D;True,t&#x3D;(101,101),at&#x3D;”tx”,eval&#x3D;True)</td><td>得到pSphere1在101帧时tx属性的值</td></tr></tbody></table><p><a name="k1f0F"></a></p><h2 id="将物体的某一范围关键帧整体移动（编辑关键帧）"><a href="#将物体的某一范围关键帧整体移动（编辑关键帧）" class="headerlink" title="将物体的某一范围关键帧整体移动（编辑关键帧）"></a>将物体的某一范围关键帧整体移动（编辑关键帧）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">frame_tc=mc.keyframe(<span class="string">&#x27;pSphere1&#x27;</span>,q=<span class="literal">True</span>,tc=<span class="literal">True</span>)</span><br><span class="line">mc.keyframe(<span class="string">&#x27;pSphere1&#x27;</span>,e=<span class="literal">True</span>,time=(<span class="built_in">min</span>(frame_tc),<span class="built_in">max</span>(frame_tc)),tc=<span class="number">5</span>,r=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 解释一下这些参数的意思，e代表开启编辑模式，time代表帧数的范围，tc代表移动的值(正为右，负为左)，r代表相对模式</span></span><br></pre></td></tr></table></figure><p>执行前：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648723170267-6c854a51-c782-49a4-b0a1-32d16c7ba23a.png#averageHue=%23393838&clientId=u86956685-7471-4&from=paste&height=66&id=u7c89c0fb&originHeight=66&originWidth=536&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1816&status=done&style=none&taskId=u8295ef55-1fe0-41f0-9660-87cb00f4be5&title=&width=536" alt="image.png"><br />执行后：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648723174130-111ce6c6-779d-47e9-828f-7baa674be086.png#averageHue=%233a3939&clientId=u86956685-7471-4&from=paste&height=74&id=ud07db9b7&originHeight=74&originWidth=520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2146&status=done&style=none&taskId=uc6fefe1f-0eff-4bb9-b225-8e0664350eb&title=&width=520" alt="image.png"></p><p><a name="D3z5N"></a></p><h1 id="第十一节文件IO操作"><a href="#第十一节文件IO操作" class="headerlink" title="第十一节文件IO操作"></a>第十一节文件IO操作</h1><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td>**file命令 **</td><td><strong>处理文件与文件路径相关的</strong></td></tr><tr><td>mc.file(new&#x3D;True)</td><td>新建一个场景，如果没保存会无法执行</td></tr><tr><td>mc.file(new&#x3D;True,force&#x3D;True)</td><td>强制新建一个场景，没有保存的数据会清空且操作无法撤回。</td></tr><tr><td>mc.file(rename&#x3D;’D:&#x2F;ball.ma’)<br />mc.file(save&#x3D;True,typ&#x3D;’mayaAscii’)</td><td>这两行代码代表的意思为，第一行执行ctrl+s中的选择位置并命名指定格式的操作，第二行执行保存的操作（默认类型为mb格式，如果保存的类型为ma格式需要更改typ的参数为mayaAscii）</td></tr><tr><td>mc.file(save&#x3D;True,typ&#x3D;’mayaAscii’)</td><td>对于已经创建好的场景可以直接执行保存的命令</td></tr><tr><td>mc.file(‘D:&#x2F;ball.ma’,o&#x3D;True,f&#x3D;True)</td><td>强制打开对应的路径场景(需要带后缀名)</td></tr><tr><td>mc.file(q&#x3D;True,sn&#x3D;True)</td><td>查询场景的路径文件名（带路径名），sn是sceneName的缩写。</td></tr><tr><td>mc.file(q&#x3D;True,sn&#x3D;True,shn&#x3D;True)</td><td>查询场景的文件名（不带路径名），shn是shortName的缩写</td></tr><tr><td>mc.file(‘D:&#x2F;ball_export.ma’,ea&#x3D;True,typ&#x3D;’mayaAscii’)</td><td>导出所有物体并指定路径文件名，ea是exportAll的缩写</td></tr><tr><td>mc.file(‘D:&#x2F;ball_export.ma’,es&#x3D;True,typ&#x3D;’mayaAscii’)</td><td>导出选中的物体并指定路径文件，es为exportSelected的缩写</td></tr><tr><td>mc.file(‘D:&#x2F;ball_export.ma’,i&#x3D;True,ns&#x3D;’ball’)</td><td>进行导入文件操作并提供命名空间为ball，加命名空间的名字是为了区分物体，i是import的缩写使用简称，因为import是python的关键字，ns是namespace 的缩写<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648779775166-df7053af-a760-4225-94b0-9548ece5265b.png#averageHue=%23525250&clientId=u693e63da-04bd-4&from=paste&height=34&id=ubfeb4c31&originHeight=34&originWidth=424&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19004&status=done&style=none&taskId=u837a9d31-fa7c-4e26-8177-e261bb0a807&title=&width=424" alt="image.png"></td></tr><tr><td>mc.file(‘D:&#x2F;ball_export.ma’,r&#x3D;True,ns&#x3D;’ball’)</td><td>进行引用文件操作并提供命名空间为ball，r是reference的缩写。</td></tr><tr><td>mc.file(q&#x3D;True,r&#x3D;True)</td><td>查看当前场景引用的文件路径，返回的是一个列表</td></tr><tr><td>mc.file(‘D:&#x2F;ball_export.ma’,r&#x3D;True,ns&#x3D;’ball’)</td><td>查看当前场景中引用的D:&#x2F;ball_export.ma文件中的引用文件路径，针对嵌套引用进行的操作</td></tr><tr><td>**referenceQuery命令  **</td><td><strong>查询引用文件的信息</strong></td></tr><tr><td>mc.referenceQuery(‘D:&#x2F;ball_export.ma’,n&#x3D;True)</td><td>查询引用文件的所有节点信息（列表）</td></tr><tr><td>mc.referenceQuery(‘ball:pSphere50’,f&#x3D;True)</td><td>查询当前场景中的文件的文件路径，f为filename的缩写。</td></tr><tr><td>mc.referenceQuery(‘D:&#x2F;ball_export.ma{3}’,isLoaded&#x3D;True)</td><td>查询当前场景中引用的第四个文件有没有加载进场景中。</td></tr></tbody></table><p><a name="hDKYL"></a></p><h1 id="第十二节maya界面编程"><a href="#第十二节maya界面编程" class="headerlink" title="第十二节maya界面编程"></a>第十二节maya界面编程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648782901563-53023a75-6b89-44dc-acf6-9b09669ff4dc.png#averageHue=%23313332&clientId=u693e63da-04bd-4&from=paste&height=956&id=uabc08218&originHeight=956&originWidth=1229&originalType=binary&ratio=1&rotation=0&showTitle=false&size=115918&status=done&style=none&taskId=ubd402539-223c-4aaf-93bf-5c78d2339cd&title=&width=1229" alt="image.png"></p><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td>wnd&#x3D;mc.window()<br />mc.showWindow(wnd)</td><td>创建一个简单的窗口<br />显示窗口</td></tr><tr><td>wnd&#x3D;mc.window(w&#x3D;600,h&#x3D;800，t&#x3D;’My Window’)</td><td>创建一个宽600高800标题为My Window的窗口</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">wnd_name=<span class="string">&#x27;my_window&#x27;</span> <span class="comment"># 为窗口设置一个名字</span></span><br><span class="line"><span class="keyword">if</span> mc.window(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 如果界面中出现已经打开的窗口，就先删掉窗口，再执行下面的语句（创建窗口）</span></span><br><span class="line">    mc.deleteUI(wnd_name,wnd=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> mc.windowPref(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># Pref是preference(偏好)的简称，如果创建窗口后更改了窗口的大小，就会移除这个偏好设置，r为remove的简称。</span></span><br><span class="line">    <span class="comment"># 这个操作可以理解为初始化</span></span><br><span class="line">    mc.windowPref(wnd_name,r=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 生成一个窗口名称为wnd_name标题为My Window的窗口，用wnd来存取</span></span><br><span class="line">wnd = mc.window(wnd_name,w=<span class="number">400</span>,h=<span class="number">300</span>,t=<span class="string">&#x27;My Window&#x27;</span>)</span><br><span class="line">mc.showWindow(wnd)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">wnd_name=<span class="string">&#x27;my_window&#x27;</span></span><br><span class="line"><span class="keyword">if</span> mc.window(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    mc.deleteUI(wnd_name,wnd=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> mc.windowPref(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    mc.windowPref(wnd_name,r=<span class="literal">True</span>)</span><br><span class="line">wnd = mc.window(wnd_name,w=<span class="number">400</span>,h=<span class="number">300</span>,t=<span class="string">&#x27;My Window&#x27;</span>)</span><br><span class="line">mc.columnLayout() <span class="comment"># 垂直布局</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    mc.button(l=<span class="string">&#x27;Button_&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i),c=<span class="string">&#x27;print &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i)) <span class="comment"># 按钮以及对应事件</span></span><br><span class="line">mc.showWindow(wnd)</span><br></pre></td></tr></table></figure><p>可以在帮助文档中的这一栏找到生成界面的操作命令<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648792828376-99f3cddb-467d-4bce-83c0-197aee119740.png#averageHue=%23e6e6e6&clientId=u693e63da-04bd-4&from=paste&height=148&id=u67bb6d10&originHeight=148&originWidth=192&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3700&status=done&style=none&taskId=udb846596-45c4-4933-bca4-bfbdeb6b0b7&title=&width=192" alt="image.png"><br><a name="HaCXE"></a></p><h1 id="第十三节maya界面视图操作"><a href="#第十三节maya界面视图操作" class="headerlink" title="第十三节maya界面视图操作"></a>第十三节maya界面视图操作</h1><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td><strong>mc.getPanel命令</strong></td><td><strong>获取面板</strong></td></tr><tr><td>mc.getPanel(all&#x3D;True)</td><td>获取maya中的所有面板名字列表，all为（allPanels的缩写）</td></tr><tr><td>mc.getPanel(vis&#x3D;True)</td><td>获取显示的面板名字列表（一般会包括脚本编辑面板和大纲面板），vis为（visiblePanels的缩写）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648817058285-e3519439-fc5b-4e4e-ad72-1d4f6622f924.png#averageHue=%233b3a3a&clientId=u46a1ca6b-8b3c-4&from=paste&height=793&id=uf18f57ac&originHeight=793&originWidth=1894&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123883&status=done&style=none&taskId=ub3d15eaa-8a32-4277-9838-375f0baf319&title=&width=1894" alt="image.png"></td></tr><tr><td>mc.getPanel(typ&#x3D;’modelPanel’)</td><td>获取类型为modelPanel的面板，[u’modelPanel1’, u’modelPanel2’, u’modelPanel3’, u’modelPanel4’]<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648818332899-7f478f10-7af7-454e-bf62-461ac25a34f6.png#averageHue=%23535353&clientId=u46a1ca6b-8b3c-4&from=paste&height=511&id=u24518dfb&originHeight=511&originWidth=392&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19137&status=done&style=none&taskId=u36b7d83b-6d6b-4d0c-b8b5-bc775d30801&title=&width=392" alt="image.png"><strong>无论对应不同面板对应视图是什****么，面板名都不会改变</strong></td></tr><tr><td>mc.getPanel(withFocus&#x3D;True)</td><td>获取当前激活的面板名字。（实时获取需要将代码变成工具后才能实时获取）</td></tr><tr><td><strong>mc.modePanel命令</strong></td><td><strong>编辑面板</strong></td></tr><tr><td>mc.modelPanel(‘modelPanel4’,q&#x3D;True,cam&#x3D;True)</td><td>查询modelPanel4面板的相机名字</td></tr><tr><td>mc.modelPanel(‘modelPanel4’,q&#x3D;True,p&#x3D;True)</td><td>查询modelPanel4面板的父物体的名字</td></tr><tr><td>mc.modelPanel(‘modelPanel4’,e&#x3D;True,cam&#x3D;’camera1’)</td><td>编辑modelPanel4面板，使其相机设置为camera1</td></tr><tr><td>mc.modelPanel(‘modelPanel4’,e&#x3D;True,tearOff&#x3D;True)</td><td>将modelPanel4面板裁剪下来，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648819167054-d406a702-6586-4f4f-ab30-5c4551609b53.png#averageHue=%23545453&clientId=u46a1ca6b-8b3c-4&from=paste&height=593&id=u4899d308&originHeight=593&originWidth=878&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73520&status=done&style=none&taskId=ufaa052bf-201f-42a3-b5fe-9e6b515d95b&title=&width=878" alt="image.png"><br />要想恢复默认面板点击这个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648819187600-4bbfbc39-68f7-4c7b-b63c-a8912694e79e.png#averageHue=%23484646&clientId=u46a1ca6b-8b3c-4&from=paste&height=200&id=u7c2aa74f&originHeight=200&originWidth=106&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1825&status=done&style=none&taskId=ue175964b-a7a2-4f25-b659-8dc8178443c&title=&width=106" alt="image.png"></td></tr><tr><td><strong>mc.modelEditor命令</strong></td><td><strong>针对视图面板进行编辑操作</strong></td></tr><tr><td>mc.modelEditor(‘modelPanel4’,q&#x3D;True,cam&#x3D;True)</td><td>获取modelPanel4面板中的摄像机名字</td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e&#x3D;True,j&#x3D;False)</td><td>编辑modelPanle4面板，取消骨骼的显示</td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e&#x3D;True,pm&#x3D;False)</td><td>编辑modelPanle4面板，取消多边形的显示</td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e&#x3D;True,xray&#x3D;True)</td><td>编辑modelPanle4面板，是物体以x光的样式显示<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648819832918-9880594a-dd75-4265-8d59-7606bd95b66f.png#averageHue=%23606060&clientId=u46a1ca6b-8b3c-4&from=paste&height=74&id=u0e3d76a3&originHeight=74&originWidth=101&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1940&status=done&style=none&taskId=u78fb911b-2b04-466a-ace9-1d7320d43b4&title=&width=101" alt="image.png"></td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e&#x3D;True,grid&#x3D;False)</td><td>编辑modelPanle4面板，取消网格的显示</td></tr></tbody></table><p><a name="YqPsv"></a></p><h1 id="第十四节-Maya-ScriptJob-事件操作"><a href="#第十四节-Maya-ScriptJob-事件操作" class="headerlink" title="第十四节 Maya ScriptJob 事件操作"></a>第十四节 Maya ScriptJob 事件操作</h1><p><a name="KFZaj"></a></p><h2 id="时间变化事件"><a href="#时间变化事件" class="headerlink" title="时间变化事件"></a>时间变化事件</h2><p>mc.scriptJob(tc&#x3D;’print “xxx”‘) 意思是当时间轴变化的时候会输出“xxx”<br /><strong>每通过scriptJob创造一次事件后，会生成对应的ID来代表事件，如果重复使用scriptJob事件变化时，会产生多次事件操作，因此每创造一次事件操作后需要通过mc.scriptJob(kill&#x3D;对应事件的ID)来删除掉。</strong><br><a name="estH7"></a></p><h2 id="属性变化事件"><a href="#属性变化事件" class="headerlink" title="属性变化事件"></a>属性变化事件</h2><p>mc.scriptJob(attributeChange&#x3D;(‘pSphere1.tx’,’print “123”‘))意思是当pSphere1的x坐标发生改变时就输出123<br />mc.scriptJob(killAll&#x3D;True) 意思是删除所有变化事件<br><a name="Rk562"></a></p><h2 id="节点变化事件"><a href="#节点变化事件" class="headerlink" title="节点变化事件"></a>节点变化事件</h2><p>mc.scriptJob(nodeDeleted&#x3D;(‘pSphere1’,’print “ball delete”‘)) 当pSphere1节点被删除时输出ball delete<br />mc.scriptJob(nodeNameChanged&#x3D;(‘pSphere1’,’print “ball renamed”‘))  当pSphere1节点名字改变时，输出ball renamed，<strong>无论名字怎么变都能追踪到节点，但是无法追踪的更改后的名字。</strong>如果需要追踪的更改后的名字需要用到api的知识。<br />mc.scriptJob(nodeNameChanged&#x3D;(‘pSphere1’,’print “ball renamed”‘,permanent&#x3D;True)) permanent是永久的意思，为True时代表这个事件不会被kill掉，只有关闭maya时才会kill掉。<br><a name="Ziejv"></a></p><h2 id="根据条件是否成立进行的事件"><a href="#根据条件是否成立进行的事件" class="headerlink" title="根据条件是否成立进行的事件"></a>根据条件是否成立进行的事件</h2><p>mc.scriptJob(conditionTrue&#x3D;(‘autoKeyframeState’,’print “auto key enable”‘) )如果开启自动关键帧，则输出auto key enable<br />mc.scriptJob(conditionFalse&#x3D;(‘autoKeyframeState’,’print “auto key disable”‘) )如果关闭自动关键帧，则输出</p><p>mc.scriptJob(conditionFalse&#x3D;(‘SomethingSelected’,func) )如果选择了一个物体，则调用func函数（func函数是自己定义的）<br />mc.scriptJob(listConditions&#x3D;True) 列举所有可以判断的条件<br><a name="Ep3Td"></a></p><h1 id="第十六节Maya中的Pymel编程"><a href="#第十六节Maya中的Pymel编程" class="headerlink" title="第十六节Maya中的Pymel编程"></a>第十六节Maya中的Pymel编程</h1><p><a href="https://vannyyuan.github.io/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/">https://vannyyuan.github.io/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648969455562-a9471201-5f76-416b-88c7-71000227d7cd.png#averageHue=%23383837&clientId=ua9dc1804-c6e6-4&from=paste&height=693&id=u8ced480e&originHeight=693&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=237735&status=done&style=none&taskId=ucb71eae1-72d4-4664-9de4-8b2cbb906dd&title=&width=928" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648969694679-2da33bb3-91e4-45db-a0a4-5446c0e8f52f.png#averageHue=%23363635&clientId=ua9dc1804-c6e6-4&from=paste&height=688&id=u48255799&originHeight=688&originWidth=1541&originalType=binary&ratio=1&rotation=0&showTitle=false&size=434095&status=done&style=none&taskId=uc96d9b04-1d09-4d42-9478-32cb4156a01&title=&width=1541" alt="image.png"><br><a name="cC9ah"></a></p><h1 id="第十八节自定义maya环境"><a href="#第十八节自定义maya环境" class="headerlink" title="第十八节自定义maya环境"></a>第十八节自定义maya环境</h1><p><a name="iWEbO"></a></p><h2 id="为什么要修改maya的环境变量"><a href="#为什么要修改maya的环境变量" class="headerlink" title="为什么要修改maya的环境变量"></a>为什么要修改maya的环境变量</h2><p>我们可以通过环境变量来配置我们不同项目中所需要的maya环境，可以通过环境变量来存储、获取信息，也可以直接修改maya的配置，可以通过设置统一的环境变量，使每个人的环境设置都是统一的。如果我们使用动态设置环境变量的话，我们可以更方便地去切换配置来制定我们的运行环境。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974285639-8307f5dc-3fad-4dd6-93a9-37ca6d46ce5d.png#averageHue=%23f1f0ef&clientId=ua9dc1804-c6e6-4&from=paste&height=666&id=ufb0805fb&originHeight=666&originWidth=632&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37783&status=done&style=none&taskId=udb9a3237-1620-4b31-ab67-2dc3fa7f4e0&title=&width=632" alt="image.png"><br />上面一栏是针对用户的变量，系统变量不区分用户，只要用的是同一台电脑都会读取系统变量。<br />用户变量会覆盖系统变量，<br><a name="VuEty"></a></p><h2 id="在进程中设置环境变量"><a href="#在进程中设置环境变量" class="headerlink" title="在进程中设置环境变量"></a>在进程中设置环境变量</h2><p>在进程中设置的环境变量只针对当前运行的程序，在进程中设置是指，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974530936-92f75e29-8dec-404e-ab23-6b3e8f8a5760.png#averageHue=%23383838&clientId=ua9dc1804-c6e6-4&from=paste&height=188&id=ua27d14e8&originHeight=188&originWidth=540&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52373&status=done&style=none&taskId=ua5af8108-75c6-470d-8b88-9ceab9ed478&title=&width=540" alt="image.png"><br />关闭程序框之后设置的环境变量就消失了。<br><a name="ojerf"></a></p><h2 id="通过设置环境变量关闭maya的用户登录节省启动时间"><a href="#通过设置环境变量关闭maya的用户登录节省启动时间" class="headerlink" title="通过设置环境变量关闭maya的用户登录节省启动时间"></a>通过设置环境变量关闭maya的用户登录节省启动时间</h2><p>在搜索框中搜索env可以快速进入编辑环境变量的界面。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974632970-d824b63d-0ea5-4ece-b9dd-173db2f96959.png#averageHue=%231a6097&clientId=ua9dc1804-c6e6-4&from=paste&height=77&id=u2483008d&originHeight=77&originWidth=264&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11427&status=done&style=none&taskId=ufd13bde6-62e7-4c21-ae4e-1bbb837377d&title=&width=264" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974672749-51fb577e-e216-4985-bb58-a1be24045b0a.png#averageHue=%23eae9e9&clientId=ua9dc1804-c6e6-4&from=paste&height=190&id=u7b27031f&originHeight=190&originWidth=667&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10509&status=done&style=none&taskId=ue3fb4f62-e2da-44cc-9f95-313c0fbacfa&title=&width=667" alt="image.png"><br />常用的环境变量设置：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974783139-5563350b-98d3-4a6f-8ced-262b4af7cb2c.png#averageHue=%23f4f4f4&clientId=ua9dc1804-c6e6-4&from=paste&height=940&id=u32d73e3d&originHeight=940&originWidth=1577&originalType=binary&ratio=1&rotation=0&showTitle=false&size=504330&status=done&style=none&taskId=u0aac74f6-e652-46f0-8db7-5e62b90aed3&title=&width=1577" alt="image.png"><br><a name="cVpqZ"></a></p><h1 id="第十九节maya-api基础知识"><a href="#第十九节maya-api基础知识" class="headerlink" title="第十九节maya api基础知识"></a>第十九节maya api基础知识</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653280913082-51374dc0-392d-4e30-8419-99747223fb98.png#averageHue=%2397a36a&clientId=u83265a8a-3f59-4&from=paste&height=634&id=u3890b232&originHeight=634&originWidth=988&originalType=binary&ratio=1&rotation=0&showTitle=false&size=149416&status=done&style=none&taskId=uddea111d-2eab-41b3-99b6-df12b83781c&title=&width=988" alt="image.png"><br><a name="EKEk1"></a></p><h2 id="API编译的插件后缀"><a href="#API编译的插件后缀" class="headerlink" title="API编译的插件后缀"></a>API编译的插件后缀</h2><p>Linux：.so<br />Windows: .mll<br />Mac OS X: .bundle<br />通用型插件: .py 直接运行<br><a name="xMUzJ"></a></p><h2 id="API的内置库"><a href="#API的内置库" class="headerlink" title="API的内置库"></a>API的内置库</h2><p>OpenMaya 基本的操作工具类<br />OpenMayaUI 界面工具类<br />OpenMayaAnim 动画工具类<br />OpenMayaFX 特效工具类<br />OpenMayaRender 渲染工具类<br><a name="FzR2w"></a></p><h2 id="API命名规则"><a href="#API命名规则" class="headerlink" title="API命名规则"></a>API命名规则</h2><p>M classes - 基本的数据类型   比如：类似于python的字符串、整数<br />MFn - Function 函数工具类型<br />MIt - lterator 迭代器类型<br />MPx - 代理类型，扩展Maya功能需要继承的类  </p><p>MayaAPI通过MFn把不同的物体方法归类，我们可以通过这些方法，针对不同的物体进行各自的操作<br />MIt开头的迭代器类型：这种类型对于我们批量访问物体也就是说对于一批物体我们要逐个访问的时候，我们要使用这种迭代器类型，然后用循环挨个访问它们的元素。<br />MPx类型这个类型不是由我们来访问的，是我们按照这种格式编写好了一个插件，那么加载上之后，Maya就去根据他定义好的固定的格式来去加载这些插件，MPx类型就是我们由人工来编写，Maya自己来识别的这个命令</p><p><a name="XChwZ"></a></p><h2 id="DependencyNode和DagNode"><a href="#DependencyNode和DagNode" class="headerlink" title="DependencyNode和DagNode"></a>DependencyNode和DagNode</h2><p>在maya中，所有的节点都是一个DependencyNode也就是说依赖节点，我们所有的数据都是依赖于节点来计算的，每个节点存储了我们所需要的数据，那么节点之间的相互计算，形成节点网络，也就形成了我们最终的文件。<br />DependencyNode是最基本的节点，类似于我们的材质节点，这种独立的单个节点。<br />Maya DagNode是带有层级关系的，在大纲里，我们可以设置它的父子关系，这种叫DagNode，DagNode是从DependencyNode扩展而来的，DagNode拥有DependencyNode的所有方法，我们可以用DependencyNode的方法来处理任何一个DagNode，但是类似于层级操作这种，比如说获取它的物体的上下级关系这种不属于DependencyNode里面的方法，我们就要用DagNode它自有的方法，也就是我们面向对象里面的，子类的那种方法。<br><a name="dTJpY"></a></p><h2 id="MObject-：Maya最基本的对象指针"><a href="#MObject-：Maya最基本的对象指针" class="headerlink" title="MObject ：Maya最基本的对象指针"></a>MObject ：Maya最基本的对象指针</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653288864645-b0a7fcbd-b4fa-4f97-a0c6-ec56f647b08a.png#averageHue=%23323232&clientId=u83265a8a-3f59-4&from=paste&height=488&id=u4e48a232&originHeight=488&originWidth=1447&originalType=binary&ratio=1&rotation=0&showTitle=false&size=279544&status=done&style=none&taskId=u087d5467-e700-433a-b5a2-a9a58803911&title=&width=1447" alt="image.png"><br />MObject是maya最基本的一个对象，也就是说如果使用API的话这个就是我们处理的最基本的一个数据，就像python编程一样，我们一个变量，虽然是字符串或者整数，那么它都是一个python的基本对象，这个MObject是MayaAPI的基本对象。在MayaAPI中，它不能以字符串这种来处理节点，它必须要转化成一个MObject才能处理，也就是说Maya中任何一个对象都是一个MObject，当然处理类似于它的名字、它的属性值这种字符串或者数值例外。也就是说这是一个最基本的索引，它指向 了每一个节点，我们在处理某一个节点就认为它是一个MObject</p><p>我们要处理任何一个Maya节点都要把它实例成一个MObject才能使用它的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">ball_node = pm.PyNode(<span class="string">&#x27;pSphere1&#x27;</span>) <span class="comment"># 将”pSphere1“改为pymel节点</span></span><br><span class="line">ball_api_node = ball_node.__apimobject__() <span class="comment"># 利用pymel节点的方法创建一个MObject对象指向pSphere1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过pymel转化的MObject已经有了对象</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node.isNull() <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 通过OpenMaya直接创建的MObject是空的</span></span><br><span class="line"><span class="built_in">print</span> OpenMaya.MObject().isNull() <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询api类型</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node.apiType() <span class="comment"># 110</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node.apiTypeStr() <span class="comment"># kTransform</span></span><br><span class="line">ballshape_api_node = pm.PyNode(<span class="string">&#x27;pSphereShape1&#x27;</span>).__apimobject__()</span><br><span class="line"><span class="built_in">print</span> ballshape_api_node.apiType() <span class="comment"># 296</span></span><br><span class="line"><span class="built_in">print</span> ballshape_api_node.apiTypeStr() <span class="comment"># kMesh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 == != 判断两个物体是否相等</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node == ballshape_api_node <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 使用 = 直接赋值</span></span><br><span class="line">ballshape_api_node = ball_api_node</span><br><span class="line"><span class="built_in">print</span> ballshape_api_node.apiTypeStr()</span><br></pre></td></tr></table></figure><p><a name="amNP3"></a></p><h2 id="如何查询API的帮助文档"><a href="#如何查询API的帮助文档" class="headerlink" title="如何查询API的帮助文档"></a>如何查询API的帮助文档</h2><p><a href="https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_index_html">https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_index_html</a><br />帮助文档是C++的风格，<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653291601023-9de8eeeb-6c65-4443-bccd-226ba3a42d79.png#averageHue=%23d6dde9&clientId=u83265a8a-3f59-4&from=paste&height=208&id=u0342c47f&originHeight=208&originWidth=312&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13455&status=done&style=none&taskId=u73376463-7488-40a2-b405-14e7642c102&title=&width=312" alt="image.png"><br />modules是我们可以导入的模块，查询一般都是查询modules里面的内容<br />例如查询MObject<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653291953243-7e5ce736-0b3a-4abc-b0ba-a586d5927065.png#averageHue=%23f3f6fa&clientId=u83265a8a-3f59-4&from=paste&height=549&id=u4acf9a0a&originHeight=549&originWidth=932&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54163&status=done&style=none&taskId=u90bca0ff-6f2c-4306-bf5c-10b3bfa0abd&title=&width=932" alt="image.png"><br />前三行：在最一开始我们可以通过第一行创建一个空的MObject，或者通过第二行从另一个MObject转过来它就指到这一个原来那个MObject那个节点上了。第三行带~的学名叫做析构函数，意思是被销毁时执行的操作。一般不会用到它，除非我们编写节点的时候，需要用到它来清理内存。<br />下面的蓝色的部分是它可以使用的方法，前面的是当前方法的返回值，括号里面是当前方法需要的参数，后面是它的描述。<br /><strong>静态方法：意思是不需要实例化就可以使用的方法</strong></p><p><a name="WRd71"></a></p><h2 id="MDagPath"><a href="#MDagPath" class="headerlink" title="MDagPath"></a>MDagPath</h2><p>MDagPath是最基本的物体对象，我们可以把大纲里的物体通过它来交给API来处理，可以从MDagPath里面找到物体对应的MObject，也可以通过传入MObject，给物体定义好一个DagPath来处理它的层级关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空的MDagPath</span></span><br><span class="line">ball_dag_path = OpenMaya.MDagPath()</span><br><span class="line"><span class="comment"># 建立DagPath联系</span></span><br><span class="line">OpenMaya.MDagPath.getAPathTo(ball_api_node,ball_dag_path)</span><br><span class="line"><span class="comment"># 获取DagPath名字</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.fullPathName() <span class="comment"># |pSphere1</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.partialPathName() <span class="comment"># pSphere1</span></span><br><span class="line"><span class="comment"># 判断是否显示</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.isVisible() <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 通过MDagPath获取API类型</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.apiType() <span class="comment"># 110</span></span><br><span class="line"><span class="comment"># 通过MDagPath返回MObject</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.node() <span class="comment"># &lt;maya.OpenMaya.MObject; proxy of &lt;Swig Object of type &#x27;MObject *&#x27; at 0x0000014894705F90&gt;</span></span><br></pre></td></tr></table></figure><p><a name="dXjGA"></a></p><h1 id="第二十节-MFn、MIt、MPx（函数库、迭代器、代理）"><a href="#第二十节-MFn、MIt、MPx（函数库、迭代器、代理）" class="headerlink" title="第二十节 MFn、MIt、MPx（函数库、迭代器、代理）"></a>第二十节 MFn、MIt、MPx（函数库、迭代器、代理）</h1><p><a name="kMnOj"></a></p><h2 id="MFn"><a href="#MFn" class="headerlink" title="MFn"></a>MFn</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653379132076-ae3a87ef-4af8-43b0-80de-6961a3499f80.png#averageHue=%23343434&clientId=u7707d889-cb75-4&from=paste&height=718&id=ubd1e52a1&originHeight=718&originWidth=1304&originalType=binary&ratio=1&rotation=0&showTitle=false&size=250768&status=done&style=none&taskId=u97b20b69-d851-475e-bd37-314e47bd1b1&title=&width=1304" alt="image.png"><br />MFnDependencyNode用来处理任何一个节点的普通方法<br />MFnDagNode用来处理大纲内的物体的一些常用方法<br />MFnMesh用来处理多边形的操作<br />MFn记录了Maya内所有的节点的类型也就是说我们用MObject获取的那个apiType返回的数值就是它在MFn列表中的索引值<br><a name="S5GWo"></a></p><h2 id="MIt"><a href="#MIt" class="headerlink" title="MIt"></a>MIt</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653379457368-a53666cf-f95b-48a5-813c-5d6a4a0cff46.png#averageHue=%23313130&clientId=u7707d889-cb75-4&from=paste&height=841&id=u071fd3f3&originHeight=841&originWidth=1391&originalType=binary&ratio=1&rotation=0&showTitle=false&size=310906&status=done&style=none&taskId=u838416df-de52-4897-8a87-685e9f3da86&title=&width=1391" alt="image.png"><br />MIt是为了批量处理而设计的，比如挨个处理每个层级的物体。或者比如说有一个球的任何一个节点都可以通过MItMesh来访问，然后来访问它的任何一个点线面。<br />MItDag：处理大纲里的层级关系<br />MItCurveCV：处理曲线的点<br />MItMeshEdge：处理多边形的线的循环<br />MItMeshFaceVertex: 以面点的方式处理<br />MItMeshPolygon：处理面<br />MItMeshVertex：处理顶点<br />MItSelectionList：处理一个列表中的任何物体（跟MItDag有区别，MItDag是处理大纲里的所有物体，MItSelectionList是处理我们自己创建的列表中的物体）</p><p>MItDependencyGraph：通过一个节点寻找它上下游所有的节点<br />MItDependencyNodes：可以使用它来过滤场景里面任何一个节点，Maya中的节点都可以通过它来逐个访问到<br><a name="UC68R"></a></p><h2 id="MPx"><a href="#MPx" class="headerlink" title="MPx"></a>MPx</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653380549470-f6f7ebc9-6faa-4aaa-af9c-269bed2d53c7.png#averageHue=%23323232&clientId=u7707d889-cb75-4&from=paste&height=784&id=uae30f1b1&originHeight=784&originWidth=1379&originalType=binary&ratio=1&rotation=0&showTitle=false&size=309040&status=done&style=none&taskId=u46b56290-7d6b-4b79-86e8-c625e98e985&title=&width=1379" alt="image.png"><br />当要真正编写一个Maya中没有的物体的话，就需要继承MPx里边的内容。<br />我们如果要写一个命令的话，那么，它就要继承MPxCommand，如果我们要写一个节点的话就要继承一个MPxNode。如果要写一个变形器的话，那就要继承DeformerNode。<br />当然还有灯光材质或者其他的那些，我们要选择对应的代理类去继承然后使用。<br />比如，我们要编写一个新的节点的话，我们可以继承MPxNode，里面我们可以选择对应的类型，我们可以不用继承一个最基本的一个类型，比如我们要写一个新的Locator的话，我们可以直接定义他的初始化类型Locator。那么，这些方法我们都是要定义同样的方法，同样的参数，然后写我们不同的处理方法。Maya会自动访问这些方法，来根据我们的计算反映出不同的数值。compute方法是计算方法，是节点最核心的方法，我们所有的算法都要存在这里边然后返回不同的结果。<br />这只是一个单纯的节点，我们如果要编写一个新的节点的话，我们还需要在给这个节点他添加上我们所需要的属性，那么在compute方法里面，我们通过不同的算法，把不同的数值返回给我们的属性，那么它就会输出到其他的节点，从而达到我们真正所需要的想法。<br><a name="KuNx7"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653383481384-24e48f5e-810b-491c-b363-6573e4368e27.png#averageHue=%23333333&clientId=u7707d889-cb75-4&from=paste&height=785&id=ua211a22f&originHeight=785&originWidth=1389&originalType=binary&ratio=1&rotation=0&showTitle=false&size=315867&status=done&style=none&taskId=ub1647ad2-883e-4e9c-a1b2-3a3244dfe3b&title=&width=1389" alt="image.png"><br><a name="DXONy"></a></p><h1 id="第二十一节MSelectionList与MItSelection-List"><a href="#第二十一节MSelectionList与MItSelection-List" class="headerlink" title="第二十一节MSelectionList与MItSelection List"></a>第二十一节MSelectionList与MItSelection List</h1><p><a name="kQTS4"></a></p><h2 id="MSelectionList"><a href="#MSelectionList" class="headerlink" title="MSelectionList"></a>MSelectionList</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653384147890-bcfa673a-f9e9-4629-a5f3-d6b7df49a6f0.png#clientId=u7707d889-cb75-4&from=paste&height=1011&id=u89ecb4e3&originHeight=1011&originWidth=1283&originalType=binary&ratio=1&rotation=0&showTitle=false&size=291687&status=done&style=none&taskId=u92e44cd3-f5cb-4cbb-a605-ee2b6aff3fe&title=&width=1283" alt="image.png"><br />MSelectionList只是一个普通的节点列表。用来存储节点或者物体的列表。<br />MSelectionList类的方法：<br />isEmpty：用来判断实例化的对象是否是一个空的MSelectionList，返回布尔类型<br />add： 可以添加的类型有MObject、MDagPath、MString、MPlug、MUuid。其中MString可以是确切的物体的名字，也可以包含通配符的。例如add(“pSphere*”)就会挨个添加pSphere1、pSphere2等，这里的*就是通配符可以指代所有字符<br />length：返回列表中的元素个数<br />merge（合并） : 把参数中的列表内容添加到使用此方法的对象上。例如： ball_lst.merge(box_lst)就是将box_lst的内容添加到ball_lst列表里面<br />intersect（交集）：同理merge得到两个列表（调用方法的对象和方法中的参数）的交集<br />remove：移除<br><a name="Dpv2T"></a></p><h2 id="MItSelectionList"><a href="#MItSelectionList" class="headerlink" title="MItSelectionList"></a>MItSelectionList</h2><p>MItSelectionList是SelectionList 的迭代器，用于逐个访问MSelectionList里的项目<br />生成迭代器需要传入MSelectionList对象<br />常用方法：<br />next： 通过next访问下一个元素<br />reset： 返回到某一位置重新继续next<br />getDagPath：获取里面的DagPath<br />getDependencyNode:获取里面的MObject<br /><strong>举例，迭代SelectionList里的内容</strong><br />通过lst_iter &#x3D; OpenMaya.MItSelectionList(sel_lst)来创建sel_lst的迭代器，然后迭代列表中的内容，输出dag_path<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653398043743-3b190bc6-c1ad-46df-8c24-8b9576eaf1ec.png#clientId=u7707d889-cb75-4&from=paste&height=442&id=u680240fe&originHeight=442&originWidth=733&originalType=binary&ratio=1&rotation=0&showTitle=false&size=204123&status=done&style=none&taskId=u556cb6a2-ea33-410a-8a52-f3c999808ac&title=&width=733" alt="image.png"><br />最重要的是框住的那些内容，如果不写这些会造成死循环，如果要迭代执行应该首先写这两个内容。<br><a name="s4nyD"></a></p><h1 id="第二十二节MGlobal全局操作类"><a href="#第二十二节MGlobal全局操作类" class="headerlink" title="第二十二节MGlobal全局操作类"></a>第二十二节MGlobal全局操作类</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653460030778-cab5a9e7-748b-46df-8294-66239100e37d.png#clientId=u9947dbe0-b82a-4&from=paste&height=545&id=ucbe51d44&originHeight=545&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127099&status=done&style=none&taskId=ue7133d2d-e668-4a79-a8f4-8c2baeb2ea1&title=&width=976" alt="image.png"><br />重点：不需要实例化<br />静态方法：<br />mayaVersion：返回当前maya的版本号<br />getActiveSelectionList(MSelectionList的对象)：将我们在maya中选择的内容存入到传递的实例化的MSelectionList中（会替换列表中的内容，例如选择了5个物体执行命令列表会有5个，再选择1个物体执行命令列表会变成1个）。<br />setActiveSelectionList(MSelectionList的对象): 类似于select命令后面跟一组列表，将列表中的物体选择。<br />executeCommand:参数中写mel命令，可以通过api使用这些命令<br />executePythonCommand：参数中写python命令，可以通过api使用这些命令<br />isYAxisUp：判断场景的向上轴是否为Y轴，如果是返回True，如果不是返回False。同理isZAxisUp<br />displayInfo：显示输出信息，参数是字符串<br />displayWarning：输出显示警告信息<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653461558722-6d62fc39-94a0-4d2d-9a96-b22de5ea1b2c.png#clientId=u9947dbe0-b82a-4&from=paste&height=57&id=u91af9ddd&originHeight=57&originWidth=300&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1723&status=done&style=none&taskId=ua7776fb5-4a3e-4c2a-9fa9-6ff5f848d51&title=&width=300" alt="image.png"><br />displayError： 输出显示错误信息<br />viewFrame: 参数为整数，调整当前帧的位置<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653461723498-23836da2-e0a1-4893-864d-0c0d59c33a59.png#clientId=u9947dbe0-b82a-4&from=paste&height=817&id=u869cdd62&originHeight=817&originWidth=1091&originalType=binary&ratio=1&rotation=0&showTitle=false&size=424890&status=done&style=none&taskId=u1a550001-cef8-460c-a626-0e4af3d449a&title=&width=1091" alt="image.png"><br><a name="h291n"></a></p><h1 id="第二十三节MFileIO文件操作类"><a href="#第二十三节MFileIO文件操作类" class="headerlink" title="第二十三节MFileIO文件操作类"></a>第二十三节MFileIO文件操作类</h1><p>MFileIO同样是一个全局的操作类，使用它不需要实例化<br />currentFile: 返回当前的场景的路径<br />setCurrentFile： 更改当前场景的名字路径，参数为字符串<br />fileType： 返回当前场景文件类型<br />查看可以保存的文件类型（结果在列表中）：<br />——————————————–<br />lst &#x3D; list()<br />OpenMaya.MFileIO.getFileTypes(lst)<br />[u’mayaAscii’, u’mayaBinary’, u’mel’, u’OBJ’, u’directory’, u’plug-in’, u’audio’, u’move’, u’EPS’, u’Adobe(R) Illustrator(R)’, u’image’, u’fluidCache’, u’editMA’, u’editMB’, u’IGES_ATF’, u’JT_ATF’, u’PARASOLID_ATF’, u’SAT_ATF’, u’STEP_ATF’, u’WIRE_ATF’, u’CATIAV4_ATF’, u’CATIAV5_ATF’, u’DWG_ATF’, u’DXF_ATF’, u’NX_ATF’, u’PROE_ATF’, u’IGES_ATF Export’, u’JT_ATF Export’, u’PARASOLID_ATF Export’, u’SAT_ATF Export’, u’STEP_ATF Export’, u’WIRE_ATF Export’, u’CATIAV5_ATF Export’, u’DWG_ATF Export’, u’DXF_ATF Export’, u’NX_ATF Export’, u’FBX’, u’FBX export’, u’DAE_FBX’, u’DAE_FBX export’, u’SVG’, u’ASS Export’, u’ASS’, u’Alembic’, u’OBJexport’, u’BIF’]<br />——————————————-<br />newFile(True)：创建一个新的场景（强制）<br />save：保存场景<br />saveAs:另存场景，第一个参数为保存路径，第二个参数为保存类型（例如’mayaBinary’,’mayaAscii’）<br />exportSelected：导出选择的物体，也是两个参数，第一个参数为文件路径，第二个参数为文件类型<br />exportAll:导出所有物体。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653466792218-28a24098-7fd7-4296-a138-44a7aac9970f.png#clientId=u9947dbe0-b82a-4&from=paste&height=982&id=u497fff7a&originHeight=982&originWidth=1079&originalType=binary&ratio=1&rotation=0&showTitle=false&size=324039&status=done&style=none&taskId=u7d5ef7f6-9fca-411d-aad6-a8f0d64865e&title=&width=1079" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653466815616-30af3357-ac40-41ac-9c98-78731d1e5c29.png#clientId=u9947dbe0-b82a-4&from=paste&height=968&id=ub5ccc466&originHeight=968&originWidth=1195&originalType=binary&ratio=1&rotation=0&showTitle=false&size=478134&status=done&style=none&taskId=uc93c2107-05f1-483e-aac8-c724f721797&title=&width=1195" alt="image.png"><br><a name="JV6lB"></a></p><h1 id="第二十四节MFnDependencyNode与MItDependencyNodes"><a href="#第二十四节MFnDependencyNode与MItDependencyNodes" class="headerlink" title="第二十四节MFnDependencyNode与MItDependencyNodes"></a>第二十四节MFnDependencyNode与MItDependencyNodes</h1><p><a name="JaA1h"></a></p><h2 id="MFnDependencyNode"><a href="#MFnDependencyNode" class="headerlink" title="MFnDependencyNode"></a>MFnDependencyNode</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653467327390-60981704-8b89-453a-827d-7b4c35f5aabc.png#clientId=u9947dbe0-b82a-4&from=paste&height=438&id=u9208539b&originHeight=438&originWidth=849&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121025&status=done&style=none&taskId=u706087b2-8e51-4a49-ba74-3907f436030&title=&width=849" alt="image.png"><br />在maya中所有的物体都是以节点的形式来存在的，它们最基本的模式就是一个DependencyNode，带有层级的那些节点都是从DependencyNode扩展而来，变成了DagNode，通过不同的继承发展成不同的节点。<br />在maya中的所有的节点，都可以使用MFnDependencyNode方法<br />创建MFnDependencyNode的方法：<br />第一个：如果直接通过 MFnDependencyNode()语句创建，这样创建出来的不能与任何节点进行连接，创建出来的实际上是一个空的，没有任何意义。<br />第二个：通过传入一个MObject来实例化一个MFnDependencyNode，通过MObject，maya可以追踪到任何一个节点。<br />配合pymel快速传入MObject：<br />mfn &#x3D; OpenMaya.MFnDependencyNode(pm.ls(sl&#x3D;True)[0].<strong>apimobject</strong>())<br /><strong>MFnDependencyNode的常用方法：</strong><br />typeName:返回节点类型<br />name：返回节点名字<br />setName(要更改的名字)：更改节点的名字<br />attributeCount：查询节点有多少个属性<br />attribute：通过属性的名字返回MObject(指针)<br />findPlug：同样是返回属性<br />isLocked：判断是否锁定<br />hasAttribute ：判断有没有属性<br />icon：节点查询图标<br />setIcon ： 设置图标<br><a name="OQEbn"></a></p><h2 id="MItDependencyNodes"><a href="#MItDependencyNodes" class="headerlink" title="MItDependencyNodes"></a>MItDependencyNodes</h2><p>MItDependencyNodes可以过滤场景中的所有基本节点，我们可以通过这个迭代器来达到我们命令中使用ls的这种效果。<br />iterator &#x3D; OpenMaya.MItDependencyNodes(OpenMaya.MFn.kMesh)  #创建一个迭代器对象，用来过滤场景中的所有多边形类型<br />在maya中所有的迭代器都有一个isDone方法用来判断迭代器是否已经迭代完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="comment"># 创建一个过滤mesh类型的迭代器</span></span><br><span class="line">iterator = OpenMaya.MItDependencyNodes(OpenMaya.MFn.kMesh)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    <span class="comment"># 通过iterator.thisNode()得到迭代器中的节点（MObject）</span></span><br><span class="line">    <span class="comment"># 然后将MObject给MFnDependencyNode来使用DependencyNode的方法（name）</span></span><br><span class="line">    <span class="built_in">print</span> OpenMaya.MFnDependencyNode(iterator.thisNode()).name() <span class="comment"># 输出场景中的多边形的名字</span></span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p><a name="xsfp9"></a></p><h1 id="第二十五节MFnDagNode和MItDag"><a href="#第二十五节MFnDagNode和MItDag" class="headerlink" title="第二十五节MFnDagNode和MItDag"></a>第二十五节MFnDagNode和MItDag</h1><p><a name="kb5QR"></a></p><h2 id="MFnDagNode"><a href="#MFnDagNode" class="headerlink" title="MFnDagNode"></a>MFnDagNode</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654467583261-8453b27c-0de0-473a-b13e-8675228c40d8.png#clientId=u004a41f6-956d-4&from=paste&height=801&id=ubd4048a4&originHeight=801&originWidth=1171&originalType=binary&ratio=1&rotation=0&showTitle=false&size=224149&status=done&style=none&taskId=ue94af028-6444-442e-8b33-5a9f6974d01&title=&width=1171" alt="image.png"><br />MFnDagNode常用方法：<br />parent<br />child<br />hasParent<br />hasChild<br />isParentOf<br />isChildOf<br />dagPath<br />fullPathName<br />partialPathName</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="comment"># pm.PyNode(&#x27;pSphere1&#x27;).__apiobject__()找到场景中类型为MDagPath的pSphere1</span></span><br><span class="line"><span class="comment"># 当指定后,即使后续更改物体的名字,maya依然能够找到对应的物体。</span></span><br><span class="line"><span class="comment"># api和pymel是一样的,都是直接绑定到节点上的,不依据字符串查找,即使节点发生变化依然可以追踪到。</span></span><br><span class="line">mfn=OpenMaya.MFnDagNode(pm.PyNode(<span class="string">&#x27;pSphere1&#x27;</span>).__apiobject__())</span><br><span class="line">mfn.partialPathName() <span class="comment"># 得到pSphere1的短名</span></span><br><span class="line">mfn.fullPathName() <span class="comment"># 得到pSphere1的长名 </span></span><br><span class="line">mfn.childCount() <span class="comment"># 查询pSphere1的下一级有几个物体（包含shape）</span></span><br><span class="line">mfn.child(<span class="number">0</span>) <span class="comment"># 得到pSphere1的第一个子物体 类型为MObject</span></span><br><span class="line">mfn.parent(<span class="number">0</span>) <span class="comment"># 得到pSphere1的第一个父物体 类型为MObject</span></span><br><span class="line">OpenMaya.MFnDagNode(mfn.parent(<span class="number">0</span>)).partialPathName() <span class="comment"># 输出pSphere1的第一个父物体的短名</span></span><br><span class="line">mfn.removeChildAt(<span class="number">1</span>) <span class="comment"># 移除pSphere1的第二个子物体（第一个子物体是pSphereShape1），也会携带着移除第二个子物体的所有子级</span></span><br></pre></td></tr></table></figure><p><a name="vzQEv"></a></p><h2 id="MItDag"><a href="#MItDag" class="headerlink" title="MItDag"></a>MItDag</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654473278734-4567a1ed-d4ed-4f3c-8e10-d4e34c5dfd12.png#averageHue=%23303030&clientId=u004a41f6-956d-4&from=paste&height=375&id=u882e443f&originHeight=375&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86367&status=done&style=none&taskId=udaf4fc99-848b-4735-8118-b0860a2939e&title=&width=920" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line">iterator = OpenMaya.MItDag()</span><br><span class="line"><span class="comment"># 将迭代器的迭代起始点为group4，方式为广度优先，迭代类型为mesh类型</span></span><br><span class="line">iterator.reset(pm.PyNode(<span class="string">&#x27;group4&#x27;</span>).__apiobject__(),OpenMaya.MItDag.kBreadthFirst,OpenMaya.MFn.kMesh) </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    <span class="built_in">print</span> iterator.partialPathName() </span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p>其中迭代器的自带方法中的 partialPathName是返回的字符串，代表当前迭代项的名字，如果使用currentItem返回的是当前迭代项的MObject。</p><p><a name="gFqip"></a></p><h1 id="第二十六节MFnMesh与MItMesh"><a href="#第二十六节MFnMesh与MItMesh" class="headerlink" title="第二十六节MFnMesh与MItMesh"></a>第二十六节MFnMesh与MItMesh</h1><p><a name="T4pYL"></a></p><h2 id="MFnMesh"><a href="#MFnMesh" class="headerlink" title="MFnMesh"></a>MFnMesh</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654481092141-3ce18d58-c913-4d13-8f5d-9ce8e07c3aaa.png#averageHue=%23313131&clientId=u7402bc27-1154-4&from=paste&height=594&id=uc0293a34&originHeight=594&originWidth=1783&originalType=binary&ratio=1&rotation=0&showTitle=false&size=247196&status=done&style=none&taskId=ua7839acf-dd70-495f-8896-187bf243ce7&title=&width=1783" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">mfn = OpenMaya.MFnMesh(pm.PyNode(<span class="string">&#x27;pSphere1&#x27;</span>).__apiobject__())</span><br><span class="line">mfn.numVertices()  <span class="comment"># 查询pSphere1有多少个顶点。</span></span><br><span class="line">mfn.numEdges()  <span class="comment"># 查询有多少根线。</span></span><br><span class="line">mfn.numPolygons()  <span class="comment"># 查询有多少个面。</span></span><br><span class="line">point = OpenMaya.MPoint() <span class="comment"># 定义一个空的MPoint类型的对象</span></span><br><span class="line">mfn.getPoint(<span class="number">0</span>, point) <span class="comment"># 将pSphere1的序列号为0的顶点赋予刚才定义的MPoint类型的对象</span></span><br><span class="line"><span class="built_in">print</span> point.x, point.y, point.z <span class="comment"># 输出赋予顶点后的point的xyz</span></span><br><span class="line">point1 = OpenMaya.MPoint(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 定义一个携带数值的MPoint类型的对象</span></span><br><span class="line">mfn.setPoint(<span class="number">381</span>, point1) <span class="comment"># 将pSphere1的序列号为381的顶点的数值设置为point1携带的数值</span></span><br></pre></td></tr></table></figure><p><a name="poySg"></a></p><h2 id="MItMesh"><a href="#MItMesh" class="headerlink" title="MItMesh"></a>MItMesh</h2><p>MItMesh有四种类型分别是MItMeshPolygon，MItMeshVertex，MItMeshEdge，MItMeshFaceVertex<br />用的最多的是Vertex，polygon，edge</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">iterator = OpenMaya.MItMeshVertex(pm.PyNode(<span class="string">&#x27;pSphereShape1&#x27;</span>).__apimobject__()) <span class="comment"># 使用apimobject得到MObject类型的对象</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    <span class="built_in">print</span> iterator.index()  <span class="comment"># 得到迭代器中的顶点的序列号</span></span><br><span class="line"></span><br><span class="line">    point = iterator.position()  <span class="comment"># 通过position方法得到携带位置信息的MPoint类型的顶点，然后赋予point</span></span><br><span class="line">    <span class="built_in">print</span> point.x, point.y, point.z  <span class="comment"># 配合while输出每个顶点的位置信息</span></span><br><span class="line">    <span class="comment"># 将所有顶点的位置设置为0，0，0</span></span><br><span class="line">    point1 = OpenMaya.MPoint(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    iterator.setPosition(point1)</span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="JcUo4"></a></p><h1 id="第二十七节PythonApi与指针"><a href="#第二十七节PythonApi与指针" class="headerlink" title="第二十七节PythonApi与指针"></a>第二十七节PythonApi与指针</h1><p>有些方法需要传递带类型的指针，因此如果使用python语句就需要通过MScriptUtil来定义对应类型的指针。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654485856359-79877248-42b0-4e43-a0b8-2d0fbccacca3.png#averageHue=%23333333&clientId=u7402bc27-1154-4&from=paste&height=692&id=ub2b77fe0&originHeight=692&originWidth=1576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=271237&status=done&style=none&taskId=ufff90242-4aa4-4542-aeeb-c047e5bfda4&title=&width=1576" alt="image.png">带有Util的一般都是通用的工具函数<br />有些方法是需要传入 float2 类型的指针，为了能够在python中使用因此需要通过MScriptUtil<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654500263988-a2847039-6d46-469c-9d4a-6dc5333729d4.png#averageHue=%23e2e6e9&clientId=ue46ddd59-53b5-4&from=paste&height=94&id=u8e25b979&originHeight=94&originWidth=780&originalType=binary&ratio=1&rotation=0&showTitle=false&size=70299&status=done&style=none&taskId=ube991ac4-903a-4e97-9e7c-652a4c41fdc&title=&width=780" alt="image.png"><br />MScriptUtil的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">iterator = OpenMaya.MItMeshVertex(pm.PyNode(<span class="string">&#x27;pSphereShape1&#x27;</span>).__apimobject__())  <span class="comment"># 使用apimobject得到MObject类型的对象</span></span><br><span class="line"></span><br><span class="line">s_util = OpenMaya.MScriptUtil()  <span class="comment"># 定义一个MScriptUtil</span></span><br><span class="line">uv_ptr = s_util.asFloat2Ptr()  <span class="comment"># 通过使用MScriptUtil中的方法定义一个float2类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    iterator.getUV(uv_ptr)  <span class="comment"># 将顶点的UV值传递给自定义的float2类型的uv_ptr指针</span></span><br><span class="line">    <span class="built_in">print</span> s_util.getFloat2ArrayItem(uv_ptr, <span class="number">0</span>, <span class="number">0</span>),  <span class="comment"># 输出指针中的0，0对应的值（u坐标）</span></span><br><span class="line">    <span class="built_in">print</span> s_util.getFloat2ArrayItem(uv_ptr, <span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 输出指针中的0，1对应的值（v坐标）</span></span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据所需要的指针类型加上as就可以直接得到了。<br />如果要在指针中求值就需要使用get开头的方法，传进去指针就可以了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654500969237-24272dcd-ee4d-4a59-8f61-3103436ee83c.png#averageHue=%23353534&clientId=ue46ddd59-53b5-4&from=paste&height=1275&id=ufd27250b&originHeight=1275&originWidth=1326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=513694&status=done&style=none&taskId=uefdd3dbd-8583-480a-b7bb-4623a8fe137&title=&width=1326" alt="image.png"><br><a name="K4Qaz"></a></p><h1 id="第二十八节MayaAPI事件触发-MMessage"><a href="#第二十八节MayaAPI事件触发-MMessage" class="headerlink" title="第二十八节MayaAPI事件触发 - MMessage"></a>第二十八节MayaAPI事件触发 - MMessage</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654501986078-41f36b55-24c8-4bfc-b0d7-82964a96311a.png#averageHue=%23303030&clientId=u7402bc27-1154-4&from=paste&height=1312&id=u69829333&originHeight=1312&originWidth=2131&originalType=binary&ratio=1&rotation=0&showTitle=false&size=463350&status=done&style=none&taskId=ua80f079c-67e8-43a8-9112-b9490cdfdd3&title=&width=2131" alt="image.png"><br />要操作物体层级相关的，就用MDagMessage<br />要操作普通节点相关的，就用MDGMessage<br />调用命令的时候就用MCommandMessage<br />要绑定某一个节点上的事件，比如说属性变化时可以使用MNodeMessage<br />可以使用多边形的MPolyMessage<br />场景变化或更新时可以使用MSceneMessage<br><a name="X1SeI"></a></p><h2 id="案例MTimerMessage"><a href="#案例MTimerMessage" class="headerlink" title="案例MTimerMessage"></a>案例MTimerMessage</h2><p>首先了解一下MTimerMessage的一个方法，addTimerCallback,其中callback的意思是回调函数，什么是回调函数？作为参数传递的那个函数就被叫为回调函数。<br /> <img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654504577713-39ade796-d258-40d2-9d5a-25c2b7476346.png#averageHue=%23dee5ea&clientId=ufbfe3503-7f09-4&from=paste&height=61&id=uf1977945&originHeight=61&originWidth=1336&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61741&status=done&style=none&taskId=u440d3a93-00bf-4074-aa97-27cab4baf8f&title=&width=1336" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>): <span class="comment"># 定义回调函数,输出1以及传入的参数（传入的第一个是间隔时间，第二个是持续时间）</span></span><br><span class="line">    <span class="built_in">print</span> <span class="number">1</span>,args</span><br><span class="line">callback_id = OpenMaya.MTimerMessage.addTimerCallback(<span class="number">2</span>,func) <span class="comment"># 每隔两秒执行一次定义的回调函数</span></span><br><span class="line">OpenMaya.MTimerMessage.removeCallback(callback_id) <span class="comment"># 移除刚才定义的定时器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="Z3oXB"></a></p><h2 id="案例MEventMessage"><a href="#案例MEventMessage" class="headerlink" title="案例MEventMessage"></a>案例MEventMessage</h2><p>MEventMessage的addEventCallback方法所需要的参数：<br />第一个参数是事件名字。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654504982544-1f60d9ed-08b6-43fd-8ef1-c84d589b71e9.png#averageHue=%23e1e5e8&clientId=ufbfe3503-7f09-4&from=paste&height=66&id=u99fc771c&originHeight=66&originWidth=1782&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105273&status=done&style=none&taskId=u0984e5b5-e490-4d9f-8508-47da561cd61&title=&width=1782" alt="image.png"><br />MEventMessage通过事件触发，而这些事件都是哪些可以通过getEventNames来得到：<br />得到MEventMessage所支持的事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line">event_names = <span class="built_in">list</span>() <span class="comment"># 定义一个空列表用来存取事件名字</span></span><br><span class="line">OpenMaya.MEventMessage.getEventNames(event_names) <span class="comment"># 将事件名字存入到列表event_names中</span></span><br><span class="line"><span class="built_in">print</span> event_names <span class="comment"># 输出列表</span></span><br></pre></td></tr></table></figure><p>其中常用的事件：<br />deleteAll，undoSupressed（撤销后的返回），undo（撤销），timeChanged（时间轴变化）<br />其他事件的解释可以通过scriptjob命令的帮助文档找到:<br /><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>): <span class="comment"># 定义回调函数,输出1以及传入的参数（传入的第一个是间隔时间，第二个是持续时间）</span></span><br><span class="line">    <span class="built_in">print</span> <span class="number">1</span>,args</span><br><span class="line">callback_id = OpenMaya.MEventMessage.addEventCallback(<span class="string">&#x27;timeChanged&#x27;</span>,func) <span class="comment"># 当时间轴变化时触发回调函数</span></span><br><span class="line">OpenMaya.MEventMessage.removeCallback(callback_id) <span class="comment"># 移除刚才定义事件触发器</span></span><br></pre></td></tr></table></figure><p><a name="Pb0Ga"></a></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><a name="OVFgx"></a></p><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299847402-394103f7-8a94-4d67-8f38-44e7dbcc2297.png#averageHue=%23343434&clientId=u72970d88-4bcf-4&from=paste&height=800&id=ud66ae093&originHeight=800&originWidth=1803&originalType=binary&ratio=1&rotation=0&showTitle=false&size=287685&status=done&style=none&taskId=uc703759d-d406-4ea1-adb0-fc4653abb8a&title=&width=1803" alt="image.png"><br />circle;<br />circle -r 2;<br />circle - r 2 -nr 0 1 0;<br />curve -d 1 -p -2 0 -2 -p 3 0 -2 -p 3 0 3 -p -2 0 3 -p -2 0 -2;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.circle()</span><br><span class="line">mc.circle(r=<span class="number">2</span>)</span><br><span class="line">mc.circle(r=<span class="number">2</span>,nr=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">mc.curve(d=<span class="number">1</span>,p=[(-<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>),(<span class="number">3</span>,<span class="number">0</span>,-<span class="number">2</span>),(<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>),(-<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>),(-<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>)])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="iUXKm"></a></p><h2 id="第二节-1"><a href="#第二节-1" class="headerlink" title="第二节"></a>第二节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347312751-5a08ec69-1a66-4cf8-b7e8-4ef9b2c6bbb0.png#averageHue=%233c3c3c&clientId=ue82b3c53-47c5-4&from=paste&height=196&id=ue3bbf5ea&originHeight=196&originWidth=1023&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69465&status=done&style=none&taskId=u9bc20f7f-ead1-4439-b4dc-c6556544a40&title=&width=1023" alt="image.png"><br />这个跟课中讲的批量重命名应该差不多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> shape <span class="keyword">in</span> mc.ls(typ=<span class="string">&#x27;mesh&#x27;</span>):</span><br><span class="line">    mc.rename(shape,<span class="string">&#x27;mesh_&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(shape))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="qFEMn"></a></p><h2 id="第五节"><a href="#第五节" class="headerlink" title="第五节"></a>第五节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648470105020-ae661d75-bd1a-467a-9154-77f197eb8ae5.png#averageHue=%233e3e3e&clientId=uf7c342ae-9460-4&from=paste&height=85&id=u996515ec&originHeight=85&originWidth=675&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27474&status=done&style=none&taskId=u147f72b4-92ea-4079-8765-81df4dab0fd&title=&width=675" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line">sel = mc.ls(sl=<span class="number">1</span>)</span><br><span class="line">info = []</span><br><span class="line">info_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">    posx = mc.getAttr(i + <span class="string">&#x27;.tx&#x27;</span>)</span><br><span class="line">    posy = mc.getAttr(i + <span class="string">&#x27;.ty&#x27;</span>)</span><br><span class="line">    posz = mc.getAttr(i + <span class="string">&#x27;.tz&#x27;</span>)</span><br><span class="line">    <span class="built_in">type</span> = mc.objectType(i)</span><br><span class="line">    info.append([i, posx, posy, posz,<span class="built_in">type</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">    info_str = info_str + i[<span class="number">0</span>]+<span class="string">&#x27; type:&#x27;</span>+i[<span class="number">4</span>] + <span class="string">&#x27;\r\nposx:&#x27;</span> + <span class="built_in">str</span>(i[<span class="number">1</span>]) + <span class="string">&#x27;\r\nposy:&#x27;</span> + <span class="built_in">str</span>(i[<span class="number">2</span>]) + <span class="string">&#x27;\r\nposz:&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">        i[<span class="number">3</span>]) + <span class="string">&#x27;\r\n\r\n&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;D:\\posInfo.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">    f.write(info_str)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p><a name="TruIa"></a></p><h2 id="第七节"><a href="#第七节" class="headerlink" title="第七节"></a>第七节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648544898343-44bafffa-267a-4e1a-bbef-542fe65f0039.png#averageHue=%234f4f4f&clientId=u783b1c22-f3a3-4&from=paste&height=704&id=u4a5230dd&originHeight=704&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=186745&status=done&style=none&taskId=u77b41c6e-4c88-4a8f-91b9-56a09b39dab&title=&width=1159" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) :</span><br><span class="line">    lam=mc.createNode(<span class="string">&#x27;lambert&#x27;</span>)</span><br><span class="line">mc.createNode(<span class="string">&#x27;blendColors&#x27;</span>)</span><br><span class="line">mc.connectAttr(<span class="string">&#x27;lambert2.oc&#x27;</span>,<span class="string">&#x27;blendColors1.c1&#x27;</span>)</span><br><span class="line">mc.connectAttr(<span class="string">&#x27;lambert3.oc&#x27;</span>,<span class="string">&#x27;blendColors1.c2&#x27;</span>)</span><br><span class="line">mc.connectAttr(<span class="string">&#x27;blendColors1.output&#x27;</span>,<span class="string">&#x27;lambert4.c&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="qv1xR"></a></p><h2 id="第十节"><a href="#第十节" class="headerlink" title="第十节"></a>第十节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648779599871-a2c84be5-3707-4833-982d-b0d82b0da25a.png#averageHue=%23383838&clientId=u693e63da-04bd-4&from=paste&height=123&id=u75cbb5d0&originHeight=123&originWidth=755&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31039&status=done&style=none&taskId=ubd9b41fe-1047-41e0-bbd3-e9943cfbfa8&title=&width=755" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    pox=random.randrange(-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    poy=random.randrange(-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    poz=random.randrange(-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tx&#x27;</span>,t=i,v=pox)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;ty&#x27;</span>,t=i,v=poy)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tz&#x27;</span>,t=i,v=poz)</span><br></pre></td></tr></table></figure><p><a name="zKmGS"></a></p><h2 id="第十二节"><a href="#第十二节" class="headerlink" title="第十二节"></a>第十二节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648792874713-ce4a46bc-01e9-4b68-a8f1-ab2626d86522.png#averageHue=%23484848&clientId=u693e63da-04bd-4&from=paste&height=119&id=u1921642e&originHeight=119&originWidth=911&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74932&status=done&style=none&taskId=ub1e57a2c-e477-4249-b0a7-c3ee19e1776&title=&width=911" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ShowWindow</span>():</span><br><span class="line">    wnd_name=<span class="string">&#x27;my_window&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> mc.window(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">        mc.deleteUI(wnd_name,wnd=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> mc.windowPref(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">        mc.windowPref(wnd_name,r=<span class="literal">True</span>)</span><br><span class="line">    wnd = mc.window(wnd_name,w=<span class="number">400</span>,h=<span class="number">300</span>,t=<span class="string">&#x27;My Window&#x27;</span>)</span><br><span class="line">    mc.gridLayout(numberOfColumns=<span class="number">2</span>, cellWidth=<span class="number">200</span>)</span><br><span class="line">    mc.text(l=<span class="string">&#x27;num:&#x27;</span>)</span><br><span class="line">    mc.intField(<span class="string">&#x27;numInt&#x27;</span>)</span><br><span class="line">    mc.text(l=<span class="string">&#x27;radius:&#x27;</span>)</span><br><span class="line">    mc.floatField(<span class="string">&#x27;radiusFloat&#x27;</span>)</span><br><span class="line">    mc.button(<span class="string">&#x27;ok&#x27;</span>,command=onCreateClick)</span><br><span class="line">    mc.showWindow(wnd)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onCreateClick</span>(<span class="params">*args</span>):</span><br><span class="line">    num=mc.intField(<span class="string">&#x27;numInt&#x27;</span>,q=<span class="literal">True</span>,v=<span class="literal">True</span>)</span><br><span class="line">    radius=mc.floatField(<span class="string">&#x27;radiusFloat&#x27;</span>,q=<span class="literal">True</span>,v=<span class="literal">True</span>)</span><br><span class="line">    create(num,radius)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">num,radius</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mc.polySphere(r=radius)</span><br><span class="line">ShowWindow()</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648813456649-b8fb708d-93e6-4916-8798-d473c6d944b9.png#averageHue=%23515151&clientId=u46a1ca6b-8b3c-4&from=paste&height=339&id=uae1b55f6&originHeight=339&originWidth=416&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6016&status=done&style=none&taskId=u302f8c63-c8e3-4850-94de-9ea1f01b9eb&title=&width=416" alt="image.png">通过点击ok根据num和radius创建对应的球体</p>]]></content>
      
      
      <categories>
          
          <category> MayaPy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE资产优化</title>
      <link href="/2023/08/29/UE-UE%E8%B5%84%E4%BA%A7%E4%BC%98%E5%8C%96/"/>
      <url>/2023/08/29/UE-UE%E8%B5%84%E4%BA%A7%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />[[官方培训]22-UE资产优化 | Epic 肖月_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1FT411x7hU/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480)<a name="wsIVK"></a># stat命令行stat fps 显示fps<br />stat unit 显示更详细的各项指标<br />stat unitgraph 在unit的基础上添加曲线图<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606320677-efb2a5c3-144b-48cf-ab7b-4079f8dcfde1.png#averageHue=%232d261d&clientId=u8195db48-42bc-4&from=paste&height=991&id=uf86704cb&originHeight=991&originWidth=2323&originalType=binary&ratio=1&rotation=0&showTitle=false&size=770722&status=done&style=none&taskId=ua83f0b3e-ac1f-4473-878e-82a4989a3c0&title=&width=2323)<br />如果瓶颈在渲染线程那么可以使用<br />stat scenerendering 命令展开详细的渲染线程中各部的实际消耗以及场景渲染信息<br />initViews是做可见性剔除时的消耗<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606570028-a7af7816-67d2-4f4f-90e1-ebaf785320a5.png#averageHue=%23181614&clientId=u8195db48-42bc-4&from=paste&height=982&id=u6d820b89&originHeight=982&originWidth=2443&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1408310&status=done&style=none&taskId=u93222905-0641-4046-8e76-b24e8ad68e4&title=&width=2443)<br />通过stat initviews可先详细展开剔除过程中的消耗<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606819451-e3cdcb42-96fe-4db1-acf7-af198ee121d6.png#averageHue=%233d382f&clientId=u8195db48-42bc-4&from=paste&height=987&id=u7e85227b&originHeight=987&originWidth=1483&originalType=binary&ratio=1&rotation=0&showTitle=false&size=995092&status=done&style=none&taskId=udaf7c56f-b309-4342-83e2-0dc8da87aed&title=&width=1483)<br />stat RHI 显示各个buffer在显存中的占用<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606876999-b07a85d3-fe9d-40a3-8714-fe22449fcc0c.png#averageHue=%23453f34&clientId=u8195db48-42bc-4&from=paste&height=955&id=u91fb0019&originHeight=955&originWidth=2226&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1475319&status=done&style=none&taskId=ua3da331f-bb67-487d-8e13-ea73d5e649f&title=&width=2226)<br />stat GPU 查看GPU各个Pass的消耗<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606971531-0e4897b8-edcc-4e43-b54b-e485c140af7b.png#averageHue=%23302d28&clientId=u8195db48-42bc-4&from=paste&height=878&id=u3e3ce981&originHeight=878&originWidth=2327&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1086674&status=done&style=none&taskId=ueeda9ca4-c57a-458e-8080-577f53987f0&title=&width=2327)<a name="L4oOX"></a># 快捷键通过ctrl+shift+逗号可以打开GPU查看器<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607036697-e86c3e34-4381-4cad-bb1a-301e577b7b2d.png#averageHue=%233d3d3c&clientId=u8195db48-42bc-4&from=paste&height=956&id=u49f17ce1&originHeight=956&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&size=278083&status=done&style=none&taskId=u7b25dcd2-d062-4fff-8d12-107e19cb371&title=&width=871)<p><a name="IiuFe"></a></p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607257820-ab719eb4-c18a-4e92-bde6-a988caab724e.png#averageHue=%230d0d0d&clientId=u8195db48-42bc-4&from=paste&height=709&id=u4e5f5151&originHeight=709&originWidth=1994&originalType=binary&ratio=1&rotation=0&showTitle=false&size=256779&status=done&style=none&taskId=u8887e6a2-ed6e-4fce-af91-36143feec02&title=&width=1994" alt="image.png"><br><a name="f09x5"></a></p><h2 id="Culling剔除"><a href="#Culling剔除" class="headerlink" title="Culling剔除"></a>Culling剔除</h2><p>当不适用Nanite时剔除是逐物体&#x2F;Instance剔除的，只能通过距离剔除的设置来进行优化，或者针对模型进行优化。<br />而使用Nanite时，Nanite的剔除更加高效，它的单位不是单个个体，而是会针对细化到模型内部相邻的三角面组成的Cluster，剔除的工作大部分是在GPU上高效进行的。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607490997-0d698a86-0860-413c-82fd-e57aa95b40cd.png#averageHue=%23070707&clientId=u8195db48-42bc-4&from=paste&height=500&id=ua1241790&originHeight=500&originWidth=759&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123973&status=done&style=none&taskId=ub85d9d8b-1e0e-4b85-a4cc-d0819f8d839&title=&width=759" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607624468-1b01403c-9040-4fd4-baad-b5b796993b33.png#averageHue=%230c0c0c&clientId=u8195db48-42bc-4&from=paste&height=301&id=u4e8195a0&originHeight=301&originWidth=444&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57209&status=done&style=none&taskId=ud962ab9d-b3d0-4c65-8c1d-f7077be0e85&title=&width=444" alt="image.png"><br><a name="MXYfF"></a></p><h2 id="DrawCall"><a href="#DrawCall" class="headerlink" title="DrawCall"></a>DrawCall</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607795816-1ac93eb5-890e-46a6-b671-eb22df9b5548.png#averageHue=%23131313&clientId=u8195db48-42bc-4&from=paste&height=395&id=u4d656409&originHeight=395&originWidth=929&originalType=binary&ratio=1&rotation=0&showTitle=false&size=160544&status=done&style=none&taskId=u4e447b4f-924c-48d7-9ad4-c1c1b2c889c&title=&width=929" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608086157-0d9312e2-ff7d-4be2-9602-da536cd422da.png#averageHue=%230c0c0c&clientId=u8195db48-42bc-4&from=paste&height=405&id=ua8efe4b3&originHeight=405&originWidth=925&originalType=binary&ratio=1&rotation=0&showTitle=false&size=120971&status=done&style=none&taskId=u14698bb0-bd07-4006-9336-7984198ea08&title=&width=925" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608107103-cb65d586-cf29-42ef-b0fe-6f81d90e010a.png#averageHue=%23191919&clientId=u8195db48-42bc-4&from=paste&height=860&id=u8671d121&originHeight=860&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=201343&status=done&style=none&taskId=ued9e4aa5-c616-4840-b34e-ce209952514&title=&width=801" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608163597-f76725e7-59fe-4902-b52e-8d1b16a0285e.png#averageHue=%23121211&clientId=u8195db48-42bc-4&from=paste&height=311&id=ud974e658&originHeight=311&originWidth=870&originalType=binary&ratio=1&rotation=0&showTitle=false&size=102226&status=done&style=none&taskId=u795eda15-0623-47f3-bf2b-a5044e2686b&title=&width=870" alt="image.png"><br><a name="sEIdu"></a></p><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608190470-501b6786-e699-480d-ac96-229cd9e6274c.png#averageHue=%23080808&clientId=u8195db48-42bc-4&from=paste&height=516&id=uc2b96cfa&originHeight=516&originWidth=1346&originalType=binary&ratio=1&rotation=0&showTitle=false&size=199306&status=done&style=none&taskId=uc814b638-af30-428b-a1fe-d01e629afd1&title=&width=1346" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608425906-71952c9e-2011-4b0d-bee1-7c13027cbe33.png#averageHue=%23050505&clientId=u8195db48-42bc-4&from=paste&height=581&id=u86bb9238&originHeight=581&originWidth=1269&originalType=binary&ratio=1&rotation=0&showTitle=false&size=238794&status=done&style=none&taskId=ufd7ae8e1-67f0-432e-a579-6c0e8fac2b0&title=&width=1269" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608469069-8d93cb5a-132a-4038-8123-02c3a47aa9cd.png#averageHue=%230c0c0c&clientId=u8195db48-42bc-4&from=paste&height=291&id=u63f7f497&originHeight=291&originWidth=636&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54026&status=done&style=none&taskId=u16111898-b546-4931-a3f0-17ff194af40&title=&width=636" alt="image.png"><br><a name="DMY60"></a></p><h2 id="Nanite"><a href="#Nanite" class="headerlink" title="Nanite"></a>Nanite</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608557517-91366832-70cb-464f-8bc1-75097e3703bd.png#averageHue=%236b6931&clientId=u8195db48-42bc-4&from=paste&height=994&id=ud15991a5&originHeight=994&originWidth=1865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1764201&status=done&style=none&taskId=u17fbf1fa-23f1-4403-a8e0-23534216343&title=&width=1865" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608832279-f78cbf08-3fdf-491a-9f01-066a778d614e.png#averageHue=%230f0f0f&clientId=u8195db48-42bc-4&from=paste&height=577&id=u44a009a9&originHeight=577&originWidth=1248&originalType=binary&ratio=1&rotation=0&showTitle=false&size=207410&status=done&style=none&taskId=u349410f2-beb4-4aa0-8e9b-9df990a3f8c&title=&width=1248" alt="image.png"><br />UE有自带bool合并工具可以修穿插<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608859381-a9154a8b-8333-4a03-973c-450a2e7ad794.png#averageHue=%23282524&clientId=u8195db48-42bc-4&from=paste&height=274&id=u6a48d177&originHeight=274&originWidth=758&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57719&status=done&style=none&taskId=ue699b607-90e4-4a4f-adb4-31397ae3144&title=&width=758" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608874634-656a88dc-db4b-4c75-bf0d-bd5ea17901b2.png#averageHue=%23070707&clientId=u8195db48-42bc-4&from=paste&height=979&id=u3299dcba&originHeight=979&originWidth=1314&originalType=binary&ratio=1&rotation=0&showTitle=false&size=310334&status=done&style=none&taskId=u411ebcb0-db6a-4336-bedd-f4e0bd3af41&title=&width=1314" alt="image.png"><br><a name="MLEpS"></a></p><h1 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609020669-46238efe-627b-46d3-b928-c735889dd3b0.png#averageHue=%230e0d0d&clientId=u8195db48-42bc-4&from=paste&height=1168&id=ue238c828&originHeight=1168&originWidth=2427&originalType=binary&ratio=1&rotation=0&showTitle=false&size=632181&status=done&style=none&taskId=u31c7fef7-9fe8-4a24-beb7-f099374df88&title=&width=2427" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609060761-543fd9db-b068-4c34-a26e-2ecaaf075bba.png#averageHue=%231e1e1e&clientId=u8195db48-42bc-4&from=paste&height=969&id=u26b9ca59&originHeight=969&originWidth=2288&originalType=binary&ratio=1&rotation=0&showTitle=false&size=559795&status=done&style=none&taskId=u8f6544db-1e73-4b28-ae4a-470c5d2f00e&title=&width=2288" alt="image.png"><br />fully rough：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609157070-cd1a8ca8-0127-4247-ab2f-ed4b8e73d248.png#averageHue=%23787769&clientId=u8195db48-42bc-4&from=paste&height=729&id=uc8c7e59f&originHeight=729&originWidth=751&originalType=binary&ratio=1&rotation=0&showTitle=false&size=318472&status=done&style=none&taskId=udbcea58f-c6d2-4fb7-8c2d-d50b01262a5&title=&width=751" alt="image.png"><br><a name="UpVmJ"></a></p><h1 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609214543-07f28433-ea25-45fe-bd7d-738c37b434c0.png#averageHue=%230c0c0c&clientId=u8195db48-42bc-4&from=paste&height=651&id=u23809031&originHeight=651&originWidth=1275&originalType=binary&ratio=1&rotation=0&showTitle=false&size=179073&status=done&style=none&taskId=u4ca0bb6a-26ad-4bfb-952b-20026750580&title=&width=1275" alt="image.png"><br><a name="KsJxG"></a></p><h1 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609271688-ff387963-50f9-4623-a8c3-614c8c8305f4.png#averageHue=%231f1e1e&clientId=u8195db48-42bc-4&from=paste&height=1205&id=u981660e4&originHeight=1205&originWidth=2446&originalType=binary&ratio=1&rotation=0&showTitle=false&size=560781&status=done&style=none&taskId=u4b5feb48-6898-4063-9fac-96701bd29aa&title=&width=2446" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609358977-878283c0-a2b1-4616-88ab-9ec95521ea6a.png#averageHue=%23262524&clientId=u8195db48-42bc-4&from=paste&height=985&id=u7a0568be&originHeight=985&originWidth=2390&originalType=binary&ratio=1&rotation=0&showTitle=false&size=539733&status=done&style=none&taskId=u6da55a67-1f9f-40c8-b0cf-d807351cb0d&title=&width=2390" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609628119-05a27dd7-d9d0-43eb-8139-b3a99836e86f.png#averageHue=%23080808&clientId=u8195db48-42bc-4&from=paste&height=444&id=u726bc5f7&originHeight=444&originWidth=773&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99803&status=done&style=none&taskId=uc7277288-d34a-4f7d-81ac-b280837dc81&title=&width=773" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609784314-359ae1ab-73fa-4f4e-9800-3b4009de72cb.png#averageHue=%23040404&clientId=u8195db48-42bc-4&from=paste&height=599&id=u9553111f&originHeight=599&originWidth=1040&originalType=binary&ratio=1&rotation=0&showTitle=false&size=233101&status=done&style=none&taskId=u77dc0983-e288-40ac-a34f-418514e6277&title=&width=1040" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609939021-0e7af55e-6817-4a11-86ff-a346a57ac753.png#averageHue=%2323201f&clientId=u8195db48-42bc-4&from=paste&height=577&id=u7baa2617&originHeight=577&originWidth=1538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=348837&status=done&style=none&taskId=u9c1a9aa0-bf05-42ab-ae4c-95c3325d0dc&title=&width=1538" alt="image.png"><br><a name="aqKLD"></a></p><h1 id="Lumen与资产制作"><a href="#Lumen与资产制作" class="headerlink" title="Lumen与资产制作"></a>Lumen与资产制作</h1><p>影视一般使用硬件的Ray Tracing精度</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609957079-10510399-f191-4174-9c49-b179eb9fae0f.png#averageHue=%23211d1b&clientId=u8195db48-42bc-4&from=paste&height=1182&id=ue3081588&originHeight=1182&originWidth=2472&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1484625&status=done&style=none&taskId=uee2212d6-5f77-4971-98a1-82284f3874b&title=&width=2472" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611519095-56d908bc-21a7-4f7b-a622-e57efbcfd1b2.png#averageHue=%230a0909&clientId=u8195db48-42bc-4&from=paste&height=1237&id=u85433e5d&originHeight=1237&originWidth=1908&originalType=binary&ratio=1&rotation=0&showTitle=false&size=447268&status=done&style=none&taskId=uff9ce93d-ef32-4a53-a9e7-624cebcb250&title=&width=1908" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611617189-b39f1dda-aa0c-48b7-b900-3350dd2dac91.png#averageHue=%23626051&clientId=u8195db48-42bc-4&from=paste&height=1264&id=ub5bac2de&originHeight=1264&originWidth=2461&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1358301&status=done&style=none&taskId=u8d613c93-02f0-4f8a-bc87-16067a92b48&title=&width=2461" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611655799-306f037d-66e1-4820-bda1-8b6fadca37d1.png#averageHue=%23222120&clientId=u8195db48-42bc-4&from=paste&height=1425&id=u995c5efe&originHeight=1425&originWidth=2664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1072247&status=done&style=none&taskId=u324ba142-6a1e-4be2-88ec-dd7b9a6b903&title=&width=2664" alt="image.png"><br><a name="hpl5G"></a></p><h1 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611702549-91def887-9bd4-4d30-96b5-a7798e9f10b1.png#averageHue=%230f0f0f&clientId=u8195db48-42bc-4&from=paste&height=1194&id=uaf1ab5f3&originHeight=1194&originWidth=2103&originalType=binary&ratio=1&rotation=0&showTitle=false&size=595796&status=done&style=none&taskId=ua2945f62-f240-441a-bd72-dd7fd2c5b15&title=&width=2103" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE非线性动画制作流程</title>
      <link href="/2023/08/29/UE-UE%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/08/29/UE-UE%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="HBLu7"></a># 推荐链接[Technical Guide to Linear Content Creation | Learning path](https://dev.epicgames.com/community/learning/paths/YJ/technical-guide-to-linear-content-creation)<br />[https://cdn2.unrealengine.com/animation-field-guide-v1-2-8-zhcn-d338b3986f3f.pdf](https://cdn2.unrealengine.com/animation-field-guide-v1-2-8-zhcn-d338b3986f3f.pdf)<br />[https://cdn2.unrealengine.com/Unreal+Engine%2FEGC%2F%28CHS%29Fortnite-Trailer-Developing-a-real-time-pipeline-for-a-faster-workflow-dc2016593b1a879342feb037c7a0f6162dea4867.pdf](https://cdn2.unrealengine.com/Unreal+Engine%2FEGC%2F%28CHS%29Fortnite-Trailer-Developing-a-real-time-pipeline-for-a-faster-workflow-dc2016593b1a879342feb037c7a0f6162dea4867.pdf)<br />[https://www.unrealengine.com/zh-CN/animation-field-guide ](https://www.unrealengine.com/zh-CN/animation-field-guide )<a name="j1eFb"></a># UE非线性动画制作流程的概念和价值<a name="tuNFU"></a>## 流程创建目标：<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686023326482-3fdb94e5-a193-484f-a2a3-79dd59c24454.png#averageHue=%23f7f6f5&clientId=u0e4b6326-6d4a-4&from=paste&height=334&id=u11bbecfc&originHeight=334&originWidth=702&originalType=binary&ratio=1&rotation=0&showTitle=false&size=179870&status=done&style=none&taskId=u7fc42403-541a-4847-be93-f08224b49e6&title=&width=702)<br />任务：<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1686023363068-5d75e24a-6b6e-4a08-8ba9-bd9d11574330.png#averageHue=%23f9f8f5&clientId=u0e4b6326-6d4a-4&from=paste&height=770&id=u518a49c8&originHeight=770&originWidth=685&originalType=binary&ratio=1&rotation=0&showTitle=false&size=273331&status=done&style=none&taskId=uc543a736-1a12-4110-9007-708bbdff3fe&title=&width=685)<p><a name="ROYHi"></a></p><h2 id="实时流程和线性渲染流程的差异与讲解"><a href="#实时流程和线性渲染流程的差异与讲解" class="headerlink" title="实时流程和线性渲染流程的差异与讲解"></a>实时流程和线性渲染流程的差异与讲解</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686027945944-7ba4f098-ee75-4e32-8a80-7de6b7086b80.png#averageHue=%23a8a5a2&clientId=u0e4b6326-6d4a-4&from=paste&height=1027&id=BRDBw&originHeight=1027&originWidth=1497&originalType=binary&ratio=1&rotation=0&showTitle=false&size=627080&status=done&style=none&taskId=uf969346f-39ec-4235-80fe-481c383f057&title=&width=1497" alt="image.png"><br><a name="vJlEk"></a></p><h3 id="制作工具的差异"><a href="#制作工具的差异" class="headerlink" title="制作工具的差异"></a>制作工具的差异</h3><p>在线性流程中很多项目的岗位间习惯通过类似贴图alembic fbx等中间数据进行衔接，因此可以不存在整个项目的中心工具，甚至可以允许每个岗位根据自己的喜好选择dcc工具来制作中间数据，最终以镜头为单位将序列帧素材在后期软件中进行组装。<br />而在实时渲染流程中并不是指资产制作也必须都在ue中完成，而是强调以ue为中心，平台将通过其他dcc软件制作的资产在ue中进行整合。同时各岗位围绕ue进行工作，最终通过ue直接输出成片。<br><a name="agQF3"></a></p><h3 id="工作流的差异"><a href="#工作流的差异" class="headerlink" title="工作流的差异"></a>工作流的差异</h3><p>工作流的差异主要在于不同环节的工作并行度，由于在实时流程中各岗位都能通过ue协作，镜头设计，拆分，资产整合，场景制作，渲染输出都在ue中完成，同时借助版本管理软件来保障资产管理和协作，因此才能实现不同岗位，不同环节在同一个中心制作平台上的平行工作。要强调一下的是，这里的平行工作并不是指多个岗位可以同时制作同一个环节的不同工作，比如分别制作多个模型资产，这在线性流程中也能够轻松实现。而是指原本需要相互等待的镜头设计，场景搭建，资产制作等环节在统一的项目工程，统一的技术标准，统一的ue数据格式进行衔接的基础上同时开展分别迭代实时预览，最大程度地降低环节之间的等待时间。<br><a name="qrzaJ"></a></p><h3 id="数据组织管理"><a href="#数据组织管理" class="headerlink" title="数据组织管理"></a>数据组织管理</h3><p>表格中所指的数据组织管理的实时流程的中心化相对于线性流程的分散，指的就是将各类dcc制作的资产通过ue这个中心技术平台以一个完整工程的形式进行整合和协作。同时这里的中心化从技术上并不是指所有岗位都同时操作一个项目的股本，而是在各自本地的项目副本中进行工作然后通过版本管理软件根据服务器上的权威版本进行同步等管理。允许客户端只在必要时访问服务器，既保证了工程的统一，又保留了各自工作的灵活度。<br><a name="kEJ69"></a></p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>这里的严格和自由是相对的，比如常用的文件名前后缀关键词在实时流程中应该也是有明确要求的，只是在例如文件保存时间，版本号等信息保存方面在不少线性流程项目中，依然习惯于通过文件名体现。而在实时流程项目中更多的是通过版本管理软件来自动记录，文件名可以只保留核心信息，相对自由。<br><a name="CdEF7"></a></p><h3 id="版本资源控制"><a href="#版本资源控制" class="headerlink" title="版本资源控制"></a>版本资源控制</h3><p>线性流程项目趋向于手动管理，当然目前也有不少业务管理软件可以实现例如自动修改文件名等自动化功能。<br />在实时流程中整个工程通常要通过版本控制软件自动管理更新迭代。<br><a name="LySR8"></a></p><h3 id="输出形式"><a href="#输出形式" class="headerlink" title="输出形式"></a>输出形式</h3><p>线性流程习惯于输出分层通道序列图然后到后期软件中进行合成<br />实时流程最推荐的方式是在游戏中直接输出最终画面，对于一些具有特殊要求的项目，ue也支持通过movie rq插件输出分层图片mrq插件输出分层图片，具体细节查看<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686029460215-911bcbb1-e651-41f2-9bb3-d2b16f6835c5.png#averageHue=%23d8caaa&clientId=u0e4b6326-6d4a-4&from=paste&height=344&id=u8085ab69&originHeight=344&originWidth=340&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86728&status=done&style=none&taskId=u17016de5-3736-494f-8a09-6bc227a4347&title=&width=340" alt="image.png"><br><a name="SqGKx"></a></p><h3 id="资源要求"><a href="#资源要求" class="headerlink" title="资源要求"></a>资源要求</h3><p>线性流程通常允许直接使用最高精度的模型贴图资产。<br />实时流程中需要对资产进行适度优化，在UE5中，由于新增了nanite，虚拟纹理等技术，对影视及美术资产的兼容性正在不断提高。具体技术细节回顾<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686029603666-d4f2420d-197d-4cb9-a5aa-32db788c5ac0.png#averageHue=%23bbb49f&clientId=u0e4b6326-6d4a-4&from=paste&height=313&id=u8d388357&originHeight=313&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88341&status=done&style=none&taskId=u8e697751-200b-4561-9f20-aaa6e242d34&title=&width=326" alt="image.png"><br><a name="t0oRJ"></a></p><h3 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686029721842-d9053b3b-6c01-4700-beff-28efdcb11dd3.png#averageHue=%23f0f0f0&clientId=u0e4b6326-6d4a-4&from=paste&height=1352&id=u34c04e8f&originHeight=1352&originWidth=1482&originalType=binary&ratio=1&rotation=0&showTitle=false&size=298293&status=done&style=none&taskId=ue85b18e3-8d0b-4a2f-94c2-b64d7b4c7e9&title=&width=1482" alt="image.png">虽然线性流程和实时流程在最终都需要渲染输出影片，但两者在整个项目周期中的渲染时机有很大不同。<br />在线性流程中建模绑定动画模拟场景编辑后期等多个工作阶段，审核人员通常不会直接获取并打开dcc工作文件。而是要求各岗位将当前的工作进度以图像或视频的形式进行输出，并根据视觉进行审核和反馈。因此在整个项目生命周期中需要非常频繁地进行渲染输出，某些阶段输出速度较快，而某些阶段消耗的时间较多，累积后的整体时间成本相当可观，并且频繁的渲染等待时间会打断创作和制作的持续性，带来后续的很多回忆相关的工作。在实时渲染非线性流程中由于除最终画面以外的各阶段的最终结果都是以实时渲染方式呈现，因此可以理解为每时每刻都在渲染输出，因此审查人员可以针对开发岗位当前编辑器中的实际画面通过截屏录屏甚至是像素流的方式实时审核反馈，整个过程快速连续，只在生成最终版本视频阶段，为了最大化画面细节，才需要渲染输出。<br><a name="zMHcB"></a></p><h3 id="工作流的并行程度差异"><a href="#工作流的并行程度差异" class="headerlink" title="工作流的并行程度差异"></a>工作流的并行程度差异</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686030176165-d89c960c-7b9e-4be9-a5e0-7785d7c991c6.png#averageHue=%23030303&clientId=u0e4b6326-6d4a-4&from=paste&height=1333&id=ube87d9f9&originHeight=1333&originWidth=2569&originalType=binary&ratio=1&rotation=0&showTitle=false&size=546609&status=done&style=none&taskId=u6389ac2e-58b4-45bf-9330-d35ca754966&title=&width=2569" alt="image.png">线性流程中各阶段工作通常依赖上一阶段的成果需要在上一阶段成果审查通过后才能够执行。<br />在实时流程中多岗位工作是可以并行推进的，各阶段有各自的审查标准，在特定阶段才会审查各类工作成果整合后的最终效果。<br />这项差异本质上来自于两个方面，一个是数据的统一性，二是成果审查方式。<br />线性流程中各岗位之间是通过中间格式文件来交换数据的，各自使用的dcc源文件并不衔接，整个项目也通常是以镜头为单位进行拆分，而不是以统一的工程形式进行中心化管理，这样导致整个项目在多个阶段的数据都是通过中间文件塌陷过的，并不统一连续。这就导致下一个工序对上一个工序的结果中间文件产生了很强的依赖，无法基于工作文件同步推进。一旦某个阶段的工作成果需要修改，那么之后的所有岗位必然也会增加相应的修改工作量。<br />实时流程中各岗位围绕统一的中心化的工程进行协作，每个岗位之间的工作都是通过引用关系，和其他岗位进行自动整合。并且由于实时渲染的特性，整合后的当前最终结果都是可以在ue中实时预览到的，并不需要再进行输出，因此客观上省略了中间文件的衔接工作。各岗位的工作数据都是在统一连续的状态下持续推进的。<br />至于审查方式：<br />在线性流程中由于通常以各阶段的像素结果为审查对象忽略中间过程同样不影响审查，导致的结果就是每个阶段通过将成果塌陷成中间文件的方式来确保数据的确定性，也就导致了对上一个岗位工作结果的依赖。<br />而在实时流程中各岗位围绕同一个工程进行协作，很多过程中产生的问题会直观反映在实时渲染的结果中无法忽略，因此审查的对象就不再只是最终呈现出的像素，而是中间数据也要正确。例如pbr材质框架中的关键参数，角色的绑定方式，镜头动画数据等大量数据都会实时互相产生影响。客观上增加了可能出现的问题种类提高了审查要求。但这种通过中间过程及时定位问题的审查方式确保了各岗位间可以并行工作，快速暴露问题快速定位和解决问题。<br />此外基于ue的实时流程可以活用很多编辑器自带工具或编写脚本工具来辅助进行数据审查，可以大大提升审查效率。<br><a name="zstwH"></a></p><h3 id="岗位管理模式差异"><a href="#岗位管理模式差异" class="headerlink" title="岗位管理模式差异"></a>岗位管理模式差异</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686030683745-50473c86-1efb-4812-bcae-b2797de9af35.png#averageHue=%23040404&clientId=u0e4b6326-6d4a-4&from=paste&height=1336&id=u1098419e&originHeight=1336&originWidth=2377&originalType=binary&ratio=1&rotation=0&showTitle=false&size=599850&status=done&style=none&taskId=u126bfd8c-047a-4b5b-ae2c-562f0a31eb8&title=&width=2377" alt="image.png"><br><a name="ZIEH0"></a></p><h3 id="分层输出的差异"><a href="#分层输出的差异" class="headerlink" title="分层输出的差异"></a>分层输出的差异</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686030857772-cb61bf20-8279-447e-ada4-9188254aaad0.png#averageHue=%23ebebeb&clientId=u0e4b6326-6d4a-4&from=paste&height=634&id=u29d82236&originHeight=634&originWidth=625&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100624&status=done&style=none&taskId=ubb2c0a7d-03b2-4382-a0dc-eab126b46a3&title=&width=625" alt="image.png"><br><a name="IbEVc"></a></p><h2 id="流程举例与展开讲解"><a href="#流程举例与展开讲解" class="headerlink" title="流程举例与展开讲解"></a>流程举例与展开讲解</h2><p>比较旧了，现在ue5加入了模型编辑模式和control rig，当前我们可以在ue编辑器中完成的工作其实比这张图中描述的还要多<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686031115260-8428d81c-5e3d-446e-afeb-075ee9ade2d5.png#averageHue=%23f9f9f8&clientId=u0e4b6326-6d4a-4&from=paste&height=1164&id=ue58ff07e&originHeight=1164&originWidth=1263&originalType=binary&ratio=1&rotation=0&showTitle=false&size=173330&status=done&style=none&taskId=u8cbea1c8-0025-4b72-99e7-75609653b96&title=&width=1263" alt="image.png"><br><a name="rRxV6"></a></p><h3 id="故事和布局设计"><a href="#故事和布局设计" class="headerlink" title="故事和布局设计"></a>故事和布局设计</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686031513044-fee26b96-9902-42d1-a681-0dedfaf43a5b.png#averageHue=%231d1c1b&clientId=u0e4b6326-6d4a-4&from=paste&height=917&id=u4324ce09&originHeight=917&originWidth=1588&originalType=binary&ratio=1&rotation=0&showTitle=false&size=427986&status=done&style=none&taskId=u100900a8-51c5-485b-a627-30dd39d2d9e&title=&width=1588" alt="image.png"><br />首先是2d故事版创作阶段,这个过程和线性流程一致,通过手绘的方式创作故事版图片,具象化描述故事情节和场景气氛并导入视频编辑软件生成故事样片。然后根据2d故事版，在UE的sequence工具中拆分镜头，幕，节拍，并且在拆分好的sequence中直接创作粗略的3d分镜，而不是先在玛雅等dcc软件中创作分镜以后再把镜头动画导入到ue。这一步看似只是分镜创作时使用的工具不同，但其实决定了整个项目的整合方式，通过ue制作粗略分镜的方式可以让所有镜头在第一时间呈现出大致的面貌。中间的资产引用，镜头组织结构等信息都已经明确。而不是先分镜头在dcc中分别制作，然后再进行整合。这个阶段得到的分镜后续肯定会不断修改，但由于相关信息已经统一整合到一个工程中，并且通过实时渲染的方式直观呈现出来，未来的修改可以用很高的效率围绕sequence进行。关于sequence作为ui动画制作核心的内容<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686031708093-838dfc81-b7ab-41b1-bd2d-91bfc7e2ac7a.png#averageHue=%23bab18a&clientId=u0e4b6326-6d4a-4&from=paste&height=222&id=u922c7588&originHeight=222&originWidth=229&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47138&status=done&style=none&taskId=u67ff6b0e-55c6-45bd-9620-18a43d57948&title=&width=229" alt="image.png">。<br><a name="hTz6l"></a></p><h3 id="第一单位可视化预览"><a href="#第一单位可视化预览" class="headerlink" title=" 第一单位可视化预览"></a><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686032010016-04663999-bd24-4459-bc31-5c799283c782.png#averageHue=%23e1dcd7&clientId=u0e4b6326-6d4a-4&from=paste&height=894&id=uce388cb8&originHeight=894&originWidth=1130&originalType=binary&ratio=1&rotation=0&showTitle=false&size=993806&status=done&style=none&taskId=ub04da3b4-1aa9-4ce5-bccb-c763935a1f3&title=&width=1130" alt="image.png"> 第一单位可视化预览</h3><p>第一单位可视化预览阶段可以理解为角色动画实时3d分镜。首先根据剧情通过临时占位资产搭建大致的场景布局，比如地面建筑等。然后请动作捕捉演员根据粗略场景进行首次动作表演，演员可以根据剧本进行多次演出并通过sequence的镜头实拍功能进行组织，导演可以随时决定并切换使用哪个take（试拍），并在未来以此为基础进行评审，重新动捕或截取动作。<br />传统线性动画流程更倾向于将场景制作，3d镜头调整和角色动画分为明确的三个阶段<br />实时流程更倾向于在同一个场地，同一个时间根据最终效果实时调整场景，角色和镜头之间的关系，统一调度，并同时记录角色动画表演和相机镜头动画，这个过程和拍摄真人实景电影的逻辑很相似。不同之处在于实时流程不仅可以灵活调度角色镜头，甚至连场景也可以瞬间切换。<br><a name="uf0QT"></a></p><h3 id="sequence的组织形式"><a href="#sequence的组织形式" class="headerlink" title="sequence的组织形式"></a>sequence的组织形式</h3><p>白皮书在这里也提到了sequence的具体组织形式，就是有一个完整的level sequence动画序列。包含了镜头动画序列，角色动画序列，这些序列又各自包含了不同版本的take（镜头试拍），随着动画创作的推进会持续增长，同时可以根据镜头进行剪辑。由于项目围绕ue实时渲染展开创作，每个阶段的成果和过程都会持续累积保留，随时可以查询或回溯，客观上确保了各岗位并行工作的可能，同时也对项目的统一管理提出了严格的要求。<br />为了方便管理和协作，项目将所有关卡通过UE子关卡工具分为场景子关卡，角色子关卡，镜头子关卡，灯光子关卡，蓝图子关卡，后期子关卡。其中分别包含各自的专用对象，然后一起包含在一个母关卡中，母关卡对应的是影视拍摄中的幕，通常可以是一个空关卡，然后根据需要添加相关的子关卡。这样做的明显的好处是例如场景设计师，动画设计师，灯光设计师等岗位可以同时打开同一个游戏工程针对同一个镜头分别编辑各自的子关卡而不会导致工作冲突，进一步保证了各岗位并行工作。在ue5 中由于引入了word partition，世界分区和level instance关卡实例等技术和工具使我们在组织关卡时拥有更多的方案实现子关卡方式难以实现的高效率和灵活度。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686033068346-e5430cbb-babc-4c72-8980-db5506f2f562.png#averageHue=%23847468&clientId=u0e4b6326-6d4a-4&from=paste&height=1017&id=ud444892c&originHeight=1017&originWidth=1274&originalType=binary&ratio=1&rotation=0&showTitle=false&size=126124&status=done&style=none&taskId=u40a24f6e-6b06-4664-b16f-dd2f917c611&title=&width=1274" alt="image.png"><br />上图中的sequence指的都是关卡序列，资产轨迹指的是序列中的轨道，文件夹指的是sequence工具中用来管理轨道的文件夹。<br><a name="sEogN"></a></p><h2 id="中期制作阶段"><a href="#中期制作阶段" class="headerlink" title="中期制作阶段"></a>中期制作阶段</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686034164487-a8b29a9b-42f9-4e50-b0df-298822d50eff.png#averageHue=%23f5f4f3&clientId=u0e4b6326-6d4a-4&from=paste&height=706&id=u3dd0be29&originHeight=706&originWidth=1155&originalType=binary&ratio=1&rotation=0&showTitle=false&size=686222&status=done&style=none&taskId=u72908a4d-98c7-40a8-9ddb-0344d3ba486&title=&width=1155" alt="image.png"><br />角色面部是通过alembic格式导出的<br />在dcc软件中需要在面次层级指定材质<br />并且在导出时需要勾选face set<br><a name="awSEz"></a></p><h2 id="特效和后期"><a href="#特效和后期" class="headerlink" title="特效和后期"></a>特效和后期</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686034632865-bf3683ce-a606-4972-ae1c-61d7ba2e95df.png#averageHue=%23dddcd8&clientId=u0e4b6326-6d4a-4&from=paste&height=861&id=u8c3b532a&originHeight=861&originWidth=985&originalType=binary&ratio=1&rotation=0&showTitle=false&size=674385&status=done&style=none&taskId=u29b2e2f1-6a26-4c2c-a4db-a8bf13f3908&title=&width=985" alt="image.png"></p><p><a name="OBvLc"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MayaPythonAPI_Zurbrigg</title>
      <link href="/2023/08/29/MayaPy-MayaPythonAPI-Zurbrigg/"/>
      <url>/2023/08/29/MayaPy-MayaPythonAPI-Zurbrigg/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />[Maya Python OpenMaya 教学第一卷 Zurbrigg - Maya Python API (Volume1)_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1MG4y1W7oH/)<br />[00_introduction_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ge4y1H7wy?p=1&vd_source=b1de3fe38e887eb40fc55a5485724480)<br />[Maya Python OpenMaya 教学第三卷 Zurbrigg - Maya Python API (Volume3)_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ye4y1r7Yv/)<a name="lj7rs"></a># 第一卷<a name="hJDLu"></a>## Maya API的应用场景:maya api 主要应用于扩展maya，例如它可以用来为maya添加新的：节点，命令，工具，发射器等<br />当需要遍历很多数据时，使用maya api 要比maya command要快很多<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1667383421121-2ac3d043-5149-48d8-891e-ce6e905f4252.png#averageHue=%230a0a0a&clientId=u9187013c-10f8-4&from=paste&height=644&id=u3947ac1b&originHeight=580&originWidth=557&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93832&status=done&style=none&taskId=u9e3feeec-c18c-4ec6-b6fd-08c68cfaa93&title=&width=618.8889052838459)<a name="ojBpd"></a>## C++的利与弊与python的利与弊<a name="NizdK"></a>### C++左边是好处，右边是坏处<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1667460561714-02cc79bc-5a09-4d66-ae5b-4b14952c5fa9.png#averageHue=%23070707&clientId=u7c600ae3-8851-4&from=paste&height=450&id=uef85ad53&originHeight=405&originWidth=1576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=137560&status=done&style=none&taskId=ua2aeee3a-e970-4573-81f2-14523c3abaa&title=&width=1751.1111574997149)<a name="UJU6c"></a>### python左边是好处，右边是坏处<br /> ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1667460536414-c4f0fd77-9fb9-41cd-a74c-e00835523e53.png#averageHue=%23070707&clientId=u7c600ae3-8851-4&from=paste&height=411&id=uc30849e2&originHeight=370&originWidth=1463&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119984&status=done&style=none&taskId=u34a04e09-3889-467a-9564-6e9e0908df3&title=&width=1625.555598618073)<a name="JEY1o"></a>## api2.0与api1.0的一些区别api2.0：![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1667463343036-0b4a6649-ed06-4c3e-8202-5373d1f8462d.png#averageHue=%232a2b27&clientId=u7c600ae3-8851-4&from=paste&height=48&id=wST9g&originHeight=43&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14164&status=done&style=none&taskId=u18be0ca0-c1b6-4516-9fec-fb2da4c89af&title=&width=370.00000980165294)<br />api1.0：![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1667463365727-46e6f487-7ebd-4849-a895-5b83867057b0.png#averageHue=%232b2c2a&clientId=u7c600ae3-8851-4&from=paste&height=49&id=uf79a2471&originHeight=44&originWidth=286&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12305&status=done&style=none&taskId=ube2ab404-30cb-49ac-9062-8f80bc9e075&title=&width=317.77778619601423)<p>api2.0自带MFnPlugin方法，而api1.0没有MFnPlugin方法，api1.0需要额外导入OpenMayaMPx模块来使用这个模块的MFnPlugin，MPxNode，MPxCommand等方法</p><p><a name="ctKU8"></a></p><h2 id="脚本-scripts-与插件-plugin-的区别"><a href="#脚本-scripts-与插件-plugin-的区别" class="headerlink" title="脚本(scripts)与插件(plugin)的区别"></a>脚本(scripts)与插件(plugin)的区别</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667464768035-cae1e0b8-6c17-4c09-8690-5441abfb36ab.png#averageHue=%23060606&clientId=u7c600ae3-8851-4&from=paste&height=573&id=u01c321c5&originHeight=516&originWidth=1601&originalType=binary&ratio=1&rotation=0&showTitle=false&size=193951&status=done&style=none&taskId=u88d271e3-3583-4dac-843e-bc4ff1b0da5&title=&width=1778.8889360133526" alt="image.png"></p><p><a name="Y4Hry"></a></p><h2 id="一种简单的让maya识别到自定义插件的方式"><a href="#一种简单的让maya识别到自定义插件的方式" class="headerlink" title="一种简单的让maya识别到自定义插件的方式"></a>一种简单的让maya识别到自定义插件的方式</h2><p>在maya的版本文档下新建一个plug-ins文件夹，将插件放到这个文件夹下。<br />这种方式虽然简单，但是有个缺点是如果有多个版本的maya，那么需要在每个版本的maya文件夹下都要新建plug-ins文件夹。<br><a name="sVFQs"></a></p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667464831496-229a0aaa-265e-4126-93bd-cb14db98d2a9.png#averageHue=%23eae4ce&clientId=u7c600ae3-8851-4&from=paste&height=344&id=u5f2fcb0a&originHeight=310&originWidth=496&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77486&status=done&style=none&taskId=u2e7496e4-e5e6-44d4-8cc4-adfe38f0d22&title=&width=551.1111257105701" alt="image.png"></h1><p><a name="JXzvq"></a></p><h2 id="写maya插件的模板"><a href="#写maya插件的模板" class="headerlink" title="写maya插件的模板"></a>写maya插件的模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya，使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后，在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;empty_plugin.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="dJth8"></a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p><a name="k9ZiZ"></a></p><h3 id="HelloWorld命令"><a href="#HelloWorld命令" class="headerlink" title="HelloWorld命令"></a>HelloWorld命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldCmd</span>(om.MPxCommand):</span><br><span class="line">    COMMAND_NAME = <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(HelloWorldCmd, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, args</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 执行的命令 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 注册maya命令时使用的方法，用来得到类的实例 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HelloWorldCmd()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向maya注册一个新命令,第一个参数是命令的名字，第二个参数是类的实例</span></span><br><span class="line">        plugin_fn.registerCommand(HelloWorldCmd.COMMAND_NAME, HelloWorldCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldCmd.COMMAND_NAME))  <span class="comment"># 注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterCommand(HelloWorldCmd.COMMAND_NAME)  <span class="comment"># 取消注册新命令</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldCmd.COMMAND_NAME))  <span class="comment"># 取消注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后，在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;command_01_HelloWorld.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="YBdwl"></a></p><h3 id="HelloWorld节点"><a href="#HelloWorld节点" class="headerlink" title="HelloWorld节点"></a>HelloWorld节点</h3><p>这里是创建一个helloworld节点，创建节点后会在maya界面上绘制字体<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667802585667-f2101105-470f-4ada-aa46-9822ecb9f68d.png#averageHue=%23494848&clientId=u559e9f03-b86e-4&from=paste&height=1276&id=uc1059362&originHeight=1148&originWidth=2431&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101624&status=done&style=none&taskId=ua9341f0d-6724-40be-9c6f-c75be391c03&title=&width=2701.1111826661213" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaRender <span class="keyword">as</span> omr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya，使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldNode</span>(omui.MPxLocatorNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007f7f7</span>)</span><br><span class="line">    DRAW_CLASSIFICATION = <span class="string">&quot;drawdb/geometry/helloworld&quot;</span></span><br><span class="line">    DRAW_REGISTRANT_ID = <span class="string">&quot;HelloWorldNode&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(HelloWorldNode, self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> HelloWorldNode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldDrawOverride</span>(omr.MPxDrawOverride):</span><br><span class="line">    NAME = <span class="string">&quot;HelloWorldDrawOverride&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>(HelloWorldDrawOverride, self).__init__(obj, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepareForDraw</span>(<span class="params">self, obj_path, camera_path, frame_context, old_data</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">supportedDrawAPIs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> omr.MRenderer.kAllDevices</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasUIDrawables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addUIDrawables</span>(<span class="params">self, obj_path, draw_manager, frame_context, data</span>):</span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.text2d(om.MPoint(<span class="number">100</span>, <span class="number">100</span>), <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> HelloWorldDrawOverride(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(HelloWorldNode.TYPE_NAME,</span><br><span class="line">                               HelloWorldNode.TYPE_ID,</span><br><span class="line">                               HelloWorldNode.creator,</span><br><span class="line">                               HelloWorldNode.initialize,</span><br><span class="line">                               om.MPxNode.kLocatorNode,</span><br><span class="line">                               HelloWorldNode.DRAW_CLASSIFICATION)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.registerDrawOverrideCreator(HelloWorldNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                      HelloWorldNode.DRAW_REGISTRANT_ID,</span><br><span class="line">                                                      HelloWorldDrawOverride.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.deregisterDrawOverrideCreator(HelloWorldNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                        HelloWorldNode.DRAW_REGISTRANT_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(HelloWorldNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后，在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;hello_world_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;helloworld&quot;)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="WjwE1"></a></p><h2 id="maya官方给的maya-python-api示例"><a href="#maya官方给的maya-python-api示例" class="headerlink" title="maya官方给的maya python api示例"></a>maya官方给的maya python api示例</h2><p>首先下载maya开发者工具包，下载压缩后在devkitBase\devkit\plug-ins\scripted目录下可以看到各种示例<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668756899011-a00cc1a7-62fa-4227-a20e-6fe3d5068eda.png#averageHue=%23f8f5f2&clientId=ubf5ae5a3-31c1-4&from=paste&height=361&id=u9826c00d&originHeight=325&originWidth=414&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32253&status=done&style=none&taskId=u4195e815-ad0b-4071-ad90-33cf4da6b01&title=&width=460.0000121858388" alt="image.png">py开头的是使用了maya api 2.0的，其他的是使用了maya api 1.0<br><a name="uhzNA"></a></p><h2 id="maya-api-基础"><a href="#maya-api-基础" class="headerlink" title="maya api 基础"></a>maya api 基础</h2><p>maya api 的四种对象类型：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757424116-5bcafdfe-528a-4e28-8fa2-2776830786e9.png#averageHue=%230d0d0d&clientId=ubf5ae5a3-31c1-4&from=paste&height=413&id=u45e06f43&originHeight=372&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72263&status=done&style=none&taskId=u053e978a-be3a-4a87-a7ae-c7da6792118&title=&width=644.4444615163925" alt="image.png"><br><a name="HbQrQ"></a></p><h3 id="MObject"><a href="#MObject" class="headerlink" title="MObject"></a>MObject</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757463577-ad1d2012-8326-4cc5-964f-d200e864d8df.png#averageHue=%23090909&clientId=ubf5ae5a3-31c1-4&from=paste&height=403&id=u9adfb691&originHeight=363&originWidth=1570&originalType=binary&ratio=1&rotation=0&showTitle=false&size=161345&status=done&style=none&taskId=uf9c7c238-452a-4b07-99fc-c108395de57&title=&width=1744.4444906564418" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757486229-d8d55a9b-9ed9-427e-b4f9-dbc750251b5c.png#averageHue=%230c0c0b&clientId=ubf5ae5a3-31c1-4&from=paste&height=410&id=u0e624a36&originHeight=369&originWidth=1066&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36840&status=done&style=none&taskId=ub45130b7-7469-4383-8eb9-4a6fd153b6a&title=&width=1184.4444758215077" alt="image.png"><br><a name="tMLbr"></a></p><h3 id="MFunction-Sets"><a href="#MFunction-Sets" class="headerlink" title="MFunction Sets"></a>MFunction Sets</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757603504-98b7ab6a-d4b5-4ce1-8b20-a299684d5ec0.png#averageHue=%230b0b0b&clientId=ubf5ae5a3-31c1-4&from=paste&height=591&id=uad6c347e&originHeight=532&originWidth=1925&originalType=binary&ratio=1&rotation=0&showTitle=false&size=306154&status=done&style=none&taskId=uccd13f10-394d-439a-8bc6-fb894fb2726&title=&width=2138.8889455500957" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757617546-3e41599a-3c85-452f-aae5-766cc0d5f2d6.png#averageHue=%23030202&clientId=ubf5ae5a3-31c1-4&from=paste&height=478&id=u0f7b9081&originHeight=430&originWidth=1776&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46137&status=done&style=none&taskId=ua8760436-76aa-44bc-b289-a533db449ec&title=&width=1973.3333856088157" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758099121-90c8c82c-9144-4d07-aecb-96a98029ce5b.png#averageHue=%231e1c1b&clientId=ubf5ae5a3-31c1-4&from=paste&height=79&id=u65220e11&originHeight=71&originWidth=532&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6738&status=done&style=none&taskId=ubcb16715-4419-4be2-b065-d292f84cce0&title=&width=591.1111267702083" alt="image.png"><br><a name="NvbOz"></a></p><h3 id="Wrappers"><a href="#Wrappers" class="headerlink" title="Wrappers"></a>Wrappers</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757981249-0896516f-f88c-4e6a-b7a1-46a246eaf888.png#averageHue=%230c0c0c&clientId=ubf5ae5a3-31c1-4&from=paste&height=376&id=ud54245f5&originHeight=338&originWidth=1849&originalType=binary&ratio=1&rotation=0&showTitle=false&size=174631&status=done&style=none&taskId=u2c4ab016-58db-4b1f-8dd6-42237e46897&title=&width=2054.4444988686378" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758001529-b6d25d43-aa16-4772-97bc-678e0f7ecf63.png#averageHue=%230b0b0a&clientId=ubf5ae5a3-31c1-4&from=paste&height=333&id=u28555cfc&originHeight=300&originWidth=1268&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24703&status=done&style=none&taskId=u88125d2c-7024-4d98-85e4-d1edf78d038&title=&width=1408.8889262116995" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758189352-8278e833-5834-4667-a300-ee18231c5229.png#averageHue=%23131313&clientId=ubf5ae5a3-31c1-4&from=paste&height=140&id=cbPpA&originHeight=126&originWidth=887&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57056&status=done&style=none&taskId=u066e4b64-97b5-4f52-b7a4-b3ca8870621&title=&width=985.5555816638624" alt="image.png"><br />迭代器也被认为是wrappers<br />迭代器类的名字前缀为MIt<br><a name="XEXAt"></a></p><h3 id="Proxies"><a href="#Proxies" class="headerlink" title="Proxies"></a>Proxies</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758333101-5714a52d-bbac-4735-b67a-23c698a726b1.png#averageHue=%230a0a0a&clientId=ubf5ae5a3-31c1-4&from=paste&height=259&id=ue6ceda73&originHeight=233&originWidth=1552&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109960&status=done&style=none&taskId=u2eebbf2f-1478-4212-bbf9-bfafbbeb365&title=&width=1724.444490126623" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758345822-91311951-6d7e-4d36-834c-44a765d10526.png#averageHue=%230a0908&clientId=ubf5ae5a3-31c1-4&from=paste&height=239&id=ub00deaaf&originHeight=215&originWidth=1076&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21372&status=done&style=none&taskId=u71a901fd-8fb6-438c-80d4-12ed3ebc05c&title=&width=1195.5555872269626" alt="image.png"><br><a name="tRBiS"></a></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>遍历当前maya选择的对象，根据对象是否拥有对应的函数集来输出调用函数集的功能所得到的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">selection = om.MGlobal.getActiveSelectionList()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(selection.length()):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--------&quot;</span>)</span><br><span class="line">    obj = selection.getDependNode(i) <span class="comment"># Return an MObject</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;API Type: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(obj.apiTypeStr))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> obj.hasFn(om.MFn.kDependencyNode):  <span class="comment"># 检查这个MObject是否能够使用这个函数集</span></span><br><span class="line">        </span><br><span class="line">        depend_fn = om.MFnDependencyNode(obj)  <span class="comment"># 将这个函数集附加到obj上</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dependency Node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(depend_fn.name()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">        transform_fn = om.MFnTransform(obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Translation: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(transform_fn.translation(om.MSpace.kTransform)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> obj.hasFn(om.MFn.kMesh):</span><br><span class="line">        mesh_fn = om.MFnMesh(obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mesh Vertices: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(mesh_fn.getVertices()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> obj.hasFn(om.MFn.kCamera):</span><br><span class="line">        camera_fn = om.MFnCamera(obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Clipping Planes: &#123;0&#125;, &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(camera_fn.nearClippingPlane, camera_fn.farClippingPlane))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果选择一个方盒子和一个摄像机，输出的内容：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668760680105-a0eeb9d2-e575-4f3b-9924-ddf512182d37.png#averageHue=%23363433&clientId=ubf5ae5a3-31c1-4&from=paste&height=122&id=u425096dc&originHeight=110&originWidth=240&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4711&status=done&style=none&taskId=u8d5c9f77-07fa-4b88-8cca-88e143fe2dc&title=&width=266.66667373092105" alt="image.png"><br><a name="jnx97"></a></p><h2 id="Dependence-Graph（DG）"><a href="#Dependence-Graph（DG）" class="headerlink" title="Dependence Graph（DG）"></a>Dependence Graph（DG）</h2><p><a name="Ccttp"></a></p><h3 id="DG的介绍与特点"><a href="#DG的介绍与特点" class="headerlink" title="DG的介绍与特点"></a>DG的介绍与特点</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761163618-33e7c611-7817-405a-9b2b-766b1d533440.png#averageHue=%230b0b0b&clientId=ubf5ae5a3-31c1-4&from=paste&height=810&id=XyC36&originHeight=729&originWidth=2096&originalType=binary&ratio=1&rotation=0&showTitle=false&size=414736&status=done&style=none&taskId=u42990e71-5a65-49d2-9e9c-a64e8f0d39f&title=&width=2328.888950583377" alt="image.png"><br />Dependency Graph(DG)是一个基于节点的体系架构，它为创建maya场景提供了基本构建块<br />它有以下四种特点<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761342892-93171d7e-a642-433e-aa4c-9b510cd2c498.png#averageHue=%230c0b0a&clientId=ubf5ae5a3-31c1-4&from=paste&height=476&id=uf3b601db&originHeight=428&originWidth=922&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33498&status=done&style=none&taskId=ufcbe683c-7f8b-4354-ad6c-9c4062777e0&title=&width=1024.444471582955" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761150642-0a80b927-5a60-49c4-b027-bca05a8d6836.png#averageHue=%23272726&clientId=ubf5ae5a3-31c1-4&from=paste&height=1327&id=u257632d5&originHeight=1194&originWidth=2432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=879147&status=done&style=none&taskId=u4d62cf75-96a3-4cf7-ab48-e7cdc920b51&title=&width=2702.2222938066666" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761551913-c037888d-c7cc-4033-b3e1-81f92089bc8f.png#averageHue=%230e0e0e&clientId=ubf5ae5a3-31c1-4&from=paste&height=841&id=u3a92f826&originHeight=757&originWidth=2401&originalType=binary&ratio=1&rotation=0&showTitle=false&size=610510&status=done&style=none&taskId=u7848e4b9-2ffc-492c-b063-76f725fa1c8&title=&width=2667.777848449756" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761571232-3ad31dae-60a3-41d3-bb34-e32524d77b3f.png#averageHue=%230a0909&clientId=ubf5ae5a3-31c1-4&from=paste&height=704&id=uf1c750fd&originHeight=634&originWidth=2308&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75814&status=done&style=none&taskId=ub881fa28-d2f8-4bb6-a522-6288ca49625&title=&width=2564.444512379024" alt="image.png"><br><a name="fboq8"></a></p><h3 id="DG如何使用Push-Pull模型更新"><a href="#DG如何使用Push-Pull模型更新" class="headerlink" title="DG如何使用Push-Pull模型更新"></a>DG如何使用Push-Pull模型更新</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761923835-c285aae6-d84e-439f-8f0d-612828fc6232.png#averageHue=%230e0e0e&clientId=ubf5ae5a3-31c1-4&from=paste&height=536&id=ue98daa24&originHeight=482&originWidth=2212&originalType=binary&ratio=1&rotation=0&showTitle=false&size=352674&status=done&style=none&taskId=u69e78de1-ae03-47ae-b798-4d361c6c080&title=&width=2457.777842886656" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761946640-9119250d-ba52-4918-a15e-f01ab34b43cf.png#averageHue=%23111010&clientId=ubf5ae5a3-31c1-4&from=paste&height=470&id=u98338a51&originHeight=423&originWidth=1166&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45255&status=done&style=none&taskId=u50686900-2519-45e8-a38e-e5d12bc4f14&title=&width=1295.555589876058" alt="image.png"><br /><a href="https://www.bilibili.com/video/BV1MG4y1W7oH?t=388.5">https://www.bilibili.com/video/BV1MG4y1W7oH?t=388.5</a><br />1.例如这是一个DG结构，绿色代表这些节点都是干净的（clean），然后如果A发生改变，那么A节点就会变成脏的（dirty）状态，A节点变成了dirty状态，那么它会影响C和D都变成dirty状态<br />2.当maya要需要用到D时，发现D时dirty状态，那么它就从D出发然后追溯到A，然后更新A后，A变成了干净的状态就可以将C，D变成干净的状态了，都变成绿色后maya就可以刷新视口完成更新。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762261343-90336c63-2aa9-44d0-bc1f-99d398d94eed.png#averageHue=%23050505&clientId=ubf5ae5a3-31c1-4&from=paste&height=423&id=u52c2d5b0&originHeight=381&originWidth=1013&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77999&status=done&style=none&taskId=uaef480b3-53a1-42ff-a51b-827f01eb71c&title=&width=1125.555585372596" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762472151-9a16e2d6-12b9-42df-a940-ce73ec65bf69.png#averageHue=%23100404&clientId=ubf5ae5a3-31c1-4&from=paste&height=452&id=ub2f38869&originHeight=407&originWidth=1500&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95134&status=done&style=none&taskId=u298a6611-a2fe-4325-bc6a-39517ffabb6&title=&width=1666.6667108182567" alt="image.png"><br><a name="MfY5i"></a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762937405-0f83ed9e-427f-4338-a3ce-494525a8a6c7.png#averageHue=%230e0e0e&clientId=ubf5ae5a3-31c1-4&from=paste&height=683&id=u3f2f378f&originHeight=615&originWidth=1945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=387777&status=done&style=none&taskId=u161273b9-8008-4861-b0af-daa93ecbb3d&title=&width=2161.111168361006" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762950877-b186a562-aba5-47d0-b25e-182a33fcee83.png#averageHue=%23100f0e&clientId=ubf5ae5a3-31c1-4&from=paste&height=598&id=u299e3928&originHeight=538&originWidth=915&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51259&status=done&style=none&taskId=u2ed88ca5-47bb-49b9-a4d2-ade9399bc5b&title=&width=1016.6666935991365" alt="image.png"><br><a name="s9UG4"></a></p><h2 id="自定义节点"><a href="#自定义节点" class="headerlink" title="自定义节点"></a>自定义节点</h2><p><a name="nay0M"></a></p><h3 id="节点介绍"><a href="#节点介绍" class="headerlink" title="节点介绍"></a>节点介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763130944-71ddc6f1-a5e5-4b4e-a5e6-c13d2bd1b7cf.png#averageHue=%2333302d&clientId=ubf5ae5a3-31c1-4&from=paste&height=1257&id=u554ce68a&originHeight=1131&originWidth=1662&originalType=binary&ratio=1&rotation=0&showTitle=false&size=369196&status=done&style=none&taskId=u496f3ed9-acd8-47e8-a191-c4822f0f9cc&title=&width=1846.6667155866282" alt="image.png"><br><a name="RSfdh"></a></p><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763156514-602afe94-bd9f-4395-a23e-31c35d42d1f2.png#averageHue=%230a0a0a&clientId=ubf5ae5a3-31c1-4&from=paste&height=469&id=u008121fa&originHeight=422&originWidth=1405&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162964&status=done&style=none&taskId=u2de4073e-e3fb-45b3-8f54-939757f8681&title=&width=1561.1111524664336" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763177599-8d85e678-ca47-447e-8218-84b8e95bb9b9.png#averageHue=%230b0a09&clientId=ubf5ae5a3-31c1-4&from=paste&height=397&id=ucccb7b5c&originHeight=357&originWidth=888&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36218&status=done&style=none&taskId=u9053fc41-a882-4584-85c7-e31979437ed&title=&width=986.6666928044078" alt="image.png"><br><a name="dCqhu"></a></p><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763493087-be9e5958-073a-4d4f-8745-67beb60079f4.png#averageHue=%23090909&clientId=ubf5ae5a3-31c1-4&from=paste&height=790&id=u3f359d80&originHeight=711&originWidth=2147&originalType=binary&ratio=1&rotation=0&showTitle=false&size=347598&status=done&style=none&taskId=u8a0afed6-383d-45ce-abce-b3a3bfc647e&title=&width=2385.555618751198" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763520618-8b0d60cc-ab2b-4d15-bd61-1acb88ceb292.png#averageHue=%230a0a09&clientId=ubf5ae5a3-31c1-4&from=paste&height=733&id=u6e998dca&originHeight=660&originWidth=1554&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57469&status=done&style=none&taskId=ue7713662-7819-46ca-bd4c-c15af6ccb71&title=&width=1726.6667124077137" alt="image.png"><br><a name="GbyfY"></a></p><h3 id="依赖属性"><a href="#依赖属性" class="headerlink" title="依赖属性"></a>依赖属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763577672-f2f0b925-b1e7-4329-be7d-7a46ba7d99d1.png#averageHue=%230e0e0e&clientId=ubf5ae5a3-31c1-4&from=paste&height=524&id=ub2f2148a&originHeight=472&originWidth=1586&originalType=binary&ratio=1&rotation=0&showTitle=false&size=277578&status=done&style=none&taskId=u14099266-66c8-433c-8417-51bb93f46b7&title=&width=1762.22226890517" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763600580-5b7607ca-bd27-4cd4-910a-91b54913d0e2.png#averageHue=%23100e0d&clientId=ubf5ae5a3-31c1-4&from=paste&height=477&id=uc529be08&originHeight=429&originWidth=1062&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50290&status=done&style=none&taskId=u3f261be0-8e8e-4667-9953-dada8358768&title=&width=1180.0000312593256" alt="image.png"><br><a name="aw0a0"></a></p><h3 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h3><p>修改属性有三种方法<br><a name="LB0eE"></a></p><h4 id="使用plug修改属性"><a href="#使用plug修改属性" class="headerlink" title="使用plug修改属性"></a>使用plug修改属性</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668764346831-80c6083d-1b75-4ee4-8523-de7845605fa8.png#averageHue=%23c8cdd2&clientId=ubf5ae5a3-31c1-4&from=paste&height=283&id=ue57d47a7&originHeight=255&originWidth=1505&originalType=binary&ratio=1&rotation=0&showTitle=false&size=277460&status=done&style=none&taskId=u0c705406-6e6d-400e-a75f-4fe35e0d483&title=&width=1672.222266520984" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668764372359-5063c355-c623-4f55-bba6-bcd44af70080.png#averageHue=%23cbd4db&clientId=ubf5ae5a3-31c1-4&from=paste&height=128&id=BcXTq&originHeight=115&originWidth=1490&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30751&status=done&style=none&taskId=u167cfc41-ddfe-4f75-bfa3-ae848c87d6c&title=&width=1655.5555994128015" alt="image.png"><br /> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">node_name = <span class="string">&quot;pCube1&quot;</span></span><br><span class="line">attribute_name = <span class="string">&quot;translateY&quot;</span></span><br><span class="line"></span><br><span class="line">selection_list = om.MSelectionList()</span><br><span class="line">selection_list.add(node_name)</span><br><span class="line"></span><br><span class="line">obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">    transform_fn = om.MFnTransform(obj)</span><br><span class="line">    </span><br><span class="line">    plug = transform_fn.findPlug(attribute_name,<span class="literal">False</span>)  <span class="comment"># 获取pCube的translateY的plug对象，False的含义在以后的章节讲</span></span><br><span class="line">    </span><br><span class="line">    attribute_value = plug.asDouble()  <span class="comment"># 得到plug对应的数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(plug, attribute_value))  <span class="comment">#  这里输出plug虽然是pCube1.translateY，但是plug并不是字符串，plug覆盖了string方法，使其输出内容改变了。</span></span><br><span class="line">   </span><br><span class="line">    plug.setDouble(<span class="number">2.0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">node_name = <span class="string">&quot;pCube1&quot;</span></span><br><span class="line">attribute_name = <span class="string">&quot;translate&quot;</span></span><br><span class="line"></span><br><span class="line">selection_list = om.MSelectionList()</span><br><span class="line">selection_list.add(node_name)</span><br><span class="line"></span><br><span class="line">obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">    transform_fn = om.MFnTransform(obj)</span><br><span class="line">    </span><br><span class="line">    plug = transform_fn.findPlug(attribute_name,<span class="literal">False</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> plug.isCompound: <span class="comment"># 判断插头是否是复合类型</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(plug.numChildren()): <span class="comment"># 遍历插头的子项</span></span><br><span class="line">            child_plug = plug.child(i)</span><br><span class="line">            </span><br><span class="line">            attribute_value = child_plug.asDouble()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(child_plug, attribute_value))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><a name="BLunB"></a></p><h4 id="利用函数集自带的修改属性的方法"><a href="#利用函数集自带的修改属性的方法" class="headerlink" title="利用函数集自带的修改属性的方法"></a>利用函数集自带的修改属性的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">node_name = <span class="string">&quot;pCube1&quot;</span></span><br><span class="line">attribute_name = <span class="string">&quot;translate&quot;</span></span><br><span class="line"></span><br><span class="line">selection_list = om.MSelectionList()</span><br><span class="line">selection_list.add(node_name)</span><br><span class="line"></span><br><span class="line">obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">    transform_fn = om.MFnTransform(obj)</span><br><span class="line">    </span><br><span class="line">    translation = transform_fn.translation(om.MSpace.kTransform)</span><br><span class="line">    translation[<span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line">    transform_fn.setTranslation(translation, om.MSpace.kTransform)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><a name="mDfst"></a></p><h3 id="创建自定义节点所需要的基础"><a href="#创建自定义节点所需要的基础" class="headerlink" title="创建自定义节点所需要的基础"></a>创建自定义节点所需要的基础</h3><p><a name="qK48a"></a></p><h4 id="MPxNode"><a href="#MPxNode" class="headerlink" title="MPxNode"></a>MPxNode</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002338612-6cd488a2-a0b5-4a42-b533-029835e1112c.png#averageHue=%231f1d1b&clientId=u7be5ff65-fd52-4&from=paste&height=67&id=ua2b59691&originHeight=60&originWidth=778&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9484&status=done&style=none&taskId=u274c2a12-21b4-46a3-881f-b36d77cc888&title=&width=864.4444673444024" alt="image.png"><br />HelloWorld节点用到的MPxLocatorNode class是MPxNode派生的。<br><a name="XbsyV"></a></p><h4 id="initializePlugin"><a href="#initializePlugin" class="headerlink" title="initializePlugin()"></a>initializePlugin()</h4><p>任何新的自定义节点都需要在maya中注册，然后才能使用。<br />注册是在initializePlugin() 函数内使用MPxPlugin.registerNode()<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002627571-0a9ab6a7-7bbd-4c42-8c41-fc59d6722fb8.png#averageHue=%23151515&clientId=u7be5ff65-fd52-4&from=paste&height=58&id=uf14fa594&originHeight=52&originWidth=1066&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35968&status=done&style=none&taskId=u657637d1-41cc-41a0-9128-eeef564d1a5&title=&width=1184.4444758215077" alt="image.png"><br><a name="MyqhV"></a></p><h4 id="MPxPlugin-registerNode"><a href="#MPxPlugin-registerNode" class="headerlink" title="MPxPlugin.registerNode()"></a>MPxPlugin.registerNode()</h4><p>注册方法需要节点的名字，一个唯一的ID，创建的方法，初始化的方法。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002669128-8f96557a-60bb-4d22-be51-bf52257e5bca.png#averageHue=%230d0d0d&clientId=u7be5ff65-fd52-4&from=paste&height=258&id=vNpME&originHeight=232&originWidth=672&originalType=binary&ratio=1&rotation=0&showTitle=false&size=65799&status=done&style=none&taskId=ud60b7ac1-1cea-4b59-b4c0-73a5de343ec&title=&width=746.666686446579" alt="image.png"><br><a name="GWIJg"></a></p><h4 id="creator"><a href="#creator" class="headerlink" title="creator()"></a>creator()</h4><p>creator()用来返回一个类的新实例<br><a name="FAjY7"></a></p><h4 id="initialize"><a href="#initialize" class="headerlink" title="initialize()"></a>initialize()</h4><p>initialize()有三个作用：1.初始化所有的节点属性2.添加或修改节点的属性都在这个方法内3.只有当加载plugin时调用<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002823683-177350b5-96c4-456d-8562-86a2638a561e.png#averageHue=%230b0b0b&clientId=u7be5ff65-fd52-4&from=paste&height=271&id=u3cb4080a&originHeight=244&originWidth=857&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72938&status=done&style=none&taskId=u92e4ec28-6dbe-4706-b9dc-9dd8dd76224&title=&width=952.2222474474972" alt="image.png"><br><a name="Qkry9"></a></p><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><p>creator()与initialize()方法可以用不同的函数名，creator与initialize是通用的容易表示的。只是一个命名约定<br><a name="fYVC7"></a></p><h4 id="Compute"><a href="#Compute" class="headerlink" title="Compute()"></a>Compute()</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669003318484-4b8a7b71-6973-4ff7-947a-830df396d988.png#averageHue=%23060606&clientId=u7be5ff65-fd52-4&from=paste&height=139&id=u04fdd6a7&originHeight=125&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22040&status=done&style=none&taskId=u43cd17f4-c28f-4042-917c-cff5389dad0&title=&width=645.555572656938" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669003311035-561243ea-01cd-4745-a747-bbbd6c869d1b.png#averageHue=%230a0a0a&clientId=u7be5ff65-fd52-4&from=paste&height=326&id=u4c983ea9&originHeight=293&originWidth=1555&originalType=binary&ratio=1&rotation=0&showTitle=false&size=153631&status=done&style=none&taskId=u0966b6f8-eb7f-4450-96f8-afad2cdf399&title=&width=1727.7778235482592" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669003340185-5a47b13d-570c-4674-bc43-9e24cab712ac.png#averageHue=%23080706&clientId=u7be5ff65-fd52-4&from=paste&height=317&id=u1d2aebb6&originHeight=285&originWidth=956&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36827&status=done&style=none&taskId=u1d83cf90-56ee-431f-b3d5-10d667e9e17&title=&width=1062.2222503615021" alt="image.png"><br><a name="oQ8aa"></a></p><h4 id="postConstructor"><a href="#postConstructor" class="headerlink" title="postConstructor()"></a>postConstructor()</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669007286665-679ae1fc-3e15-4f05-93d6-9790d1ef97da.png#averageHue=%230b0b0b&clientId=u7be5ff65-fd52-4&from=paste&height=183&id=u2e060501&originHeight=165&originWidth=1357&originalType=binary&ratio=1&rotation=0&showTitle=false&size=81307&status=done&style=none&taskId=u23c02b7c-84aa-43d3-9395-a55adeea4a8&title=&width=1507.7778177202495" alt="image.png"><br />当创建节点后调用<br><a name="vw2qD"></a></p><h4 id="connectionMade-和-connectionBroken"><a href="#connectionMade-和-connectionBroken" class="headerlink" title="connectionMade() 和 connectionBroken()"></a>connectionMade() 和 connectionBroken()</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669007312866-0ed526c4-0327-4ec1-bff2-2d33ac61b0ce.png#averageHue=%230e0e0e&clientId=u7be5ff65-fd52-4&from=paste&height=194&id=ufb500e38&originHeight=175&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=80662&status=done&style=none&taskId=uca63225e-eaf7-44b3-a444-baf2f71ae79&title=&width=1170.0000309944162" alt="image.png"><br />当节点连接状态发生改变时调用<br><a name="tX12q"></a></p><h3 id="举例：自定义一个简单的数学节点"><a href="#举例：自定义一个简单的数学节点" class="headerlink" title="举例：自定义一个简单的数学节点"></a>举例：自定义一个简单的数学节点</h3><p>节点功能：将两个数相乘并输出结果值<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019508238-3c8534af-9ab0-4dcf-8d15-a91eb495d03e.png#averageHue=%2347cd89&clientId=u7be5ff65-fd52-4&from=paste&height=223&id=u361e46aa&originHeight=201&originWidth=290&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11821&status=done&style=none&taskId=ue94ba214-cf36-495e-b391-f5fb74ba7b1&title=&width=322.22223075819625" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 这个函数告诉了maya这个插件生成,并且生成的对象使用maya python api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutiplyNode</span>(om.MPxNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;multiplynode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7F8</span>)</span><br><span class="line">    <span class="comment"># 提前声明节点的属性</span></span><br><span class="line">    multiplier_obj = <span class="literal">None</span></span><br><span class="line">    multiplicand_obj = <span class="literal">None</span></span><br><span class="line">    product_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MutiplyNode, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;_summary_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            plug (_type_): 当plug是dirty状态时,会传过来,要求更新</span></span><br><span class="line"><span class="string">            data (_type_): data提供了读取和写入节点属性值的方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> plug == MutiplyNode.product_obj:</span><br><span class="line"></span><br><span class="line">            multiplier = data.inputValue(MutiplyNode.multiplier_obj).asInt()  <span class="comment"># 获取multiplier_obj对象的输入的属性值</span></span><br><span class="line">            multiplicand = data.inputValue(MutiplyNode.multiplicand_obj).asDouble()  <span class="comment"># 获取multiplicand_obj对象的输入的属性值</span></span><br><span class="line">            product = multiplier * multiplicand </span><br><span class="line"></span><br><span class="line">            product_data_handle = data.outputValue(MutiplyNode.product_obj)  <span class="comment"># 获取product_obj对象的输出数据对象</span></span><br><span class="line">            product_data_handle.setDouble(product)  <span class="comment"># 设置product_obj对象的输出数据</span></span><br><span class="line"></span><br><span class="line">            data.setClean(plug) <span class="comment"># 将plug设置为clean状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> MutiplyNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute() <span class="comment"># 创建一个用来设置数字系列属性的对象</span></span><br><span class="line"></span><br><span class="line">        cls.multiplier_obj = numeric_attr.create(<span class="string">&quot;multiplier&quot;</span>, <span class="string">&quot;mul&quot;</span>, om.MFnNumericData.kInt, <span class="number">2</span>)  <span class="comment"># 属性长名，属性短名，属性数字类型，属性初始值</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span> <span class="comment"># 设置属性可以key关键帧(这样属性就能出现在channel box中)</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span>  <span class="comment">#  设置属性没有输出引脚(其他属性不能读它)</span></span><br><span class="line"></span><br><span class="line">        cls.multiplicand_obj = numeric_attr.create(<span class="string">&quot;multiplicand&quot;</span>, <span class="string">&quot;mulc&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        cls.product_obj = numeric_attr.create(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;prod&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.writable = <span class="literal">False</span> <span class="comment">#  设置属性没有输入引脚(其他属性不能直接写入它)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加属性</span></span><br><span class="line">        cls.addAttribute(cls.multiplier_obj)</span><br><span class="line">        cls.addAttribute(cls.multiplicand_obj)</span><br><span class="line">        cls.addAttribute(cls.product_obj)</span><br><span class="line">        <span class="comment"># 设置属性影响</span></span><br><span class="line">        cls.attributeAffects(cls.multiplier_obj, cls.product_obj)</span><br><span class="line">        cls.attributeAffects(cls.multiplicand_obj, cls.product_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(MutiplyNode.TYPE_NAME,</span><br><span class="line">                               MutiplyNode.TYPE_ID,</span><br><span class="line">                               MutiplyNode.creator,</span><br><span class="line">                               MutiplyNode.initialize,</span><br><span class="line">                               om.MPxNode.kDependNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(MutiplyNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取消加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集取消注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(MutiplyNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(MutiplyNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试时使用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;multiply_node.py&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    </span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;multiplynode&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="ql0oW"></a></p><h3 id="常用的调节属性的性质"><a href="#常用的调节属性的性质" class="headerlink" title="常用的调节属性的性质"></a>常用的调节属性的性质</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019751794-e5111da0-4859-4dfe-a62b-719679fbd182.png#averageHue=%23090909&clientId=u7be5ff65-fd52-4&from=paste&height=392&id=u50257840&originHeight=353&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&size=120633&status=done&style=none&taskId=u96983a3b-dfa4-4300-94c2-b3ff711bd18&title=&width=1305.5555901409675" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669021067015-08a0e8e9-ae26-4a71-a0ca-9619d6aadb83.png#averageHue=%2320201f&clientId=u7be5ff65-fd52-4&from=paste&height=38&id=u79fd4fa9&originHeight=34&originWidth=814&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11256&status=done&style=none&taskId=uae7d5d33-e785-4763-b450-46250892805&title=&width=904.4444684040405" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019819465-9ccfd5b8-c99e-489c-8787-de360afaed0e.png#averageHue=%2320201e&clientId=u7be5ff65-fd52-4&from=paste&height=30&id=CaH2B&originHeight=27&originWidth=822&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12052&status=done&style=none&taskId=uaa18bb8b-e8a9-4979-a92d-bac25b0aa99&title=&width=913.3333575284046" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019987165-8c835b41-f49c-4b51-a3ce-0c5eac417ae6.png#averageHue=%23090909&clientId=u7be5ff65-fd52-4&from=paste&height=236&id=ub49b112e&originHeight=212&originWidth=1242&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78468&status=done&style=none&taskId=u51f4de9d-ef27-46b3-9636-fbf3e5cc3af&title=&width=1380.0000365575165" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020148684-13a906e4-90af-4aa5-be15-78c439099d50.png#averageHue=%23090909&clientId=u7be5ff65-fd52-4&from=paste&height=381&id=ua1e6055b&originHeight=343&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106315&status=done&style=none&taskId=ud409e366-f25b-499a-8cb3-2d6f9954e59&title=&width=1042.222249831683" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020240602-493c3bfb-adc5-4f6f-99bc-59f2eb102aa2.png#averageHue=%230a0a0a&clientId=u7be5ff65-fd52-4&from=paste&height=322&id=u54535e8d&originHeight=290&originWidth=1279&originalType=binary&ratio=1&rotation=0&showTitle=false&size=137679&status=done&style=none&taskId=u52d3524f-76ee-41c8-b248-5b8402b55c9&title=&width=1421.1111487577" alt="image.png"><br />channelBox不需要设置为True，因为设置keyable为True就完全不需要设置channelBox为True了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020628591-1294d6b3-d1fe-4fc4-96f4-095d47712df7.png#averageHue=%230e0e0e&clientId=u7be5ff65-fd52-4&from=paste&height=228&id=uff0e5a0f&originHeight=205&originWidth=980&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73712&status=done&style=none&taskId=ub7b18945-e62f-4627-82b3-29888a0c6ca&title=&width=1088.8889177345943" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020736102-fee13889-7dbd-452a-be70-796b0c54f0f1.png#averageHue=%23090909&clientId=u7be5ff65-fd52-4&from=paste&height=346&id=u93dfa081&originHeight=311&originWidth=627&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60795&status=done&style=none&taskId=u9c9b59e9-d647-4c5d-8282-17dfe382f18&title=&width=696.6666851220313" alt="image.png"><br><a name="bj2ZA"></a></p><h3 id="举例：自定义一个车轮节点"><a href="#举例：自定义一个车轮节点" class="headerlink" title="举例：自定义一个车轮节点"></a>举例：自定义一个车轮节点</h3><p><a name="TMm86"></a></p><h4 id="数学原理："><a href="#数学原理：" class="headerlink" title="数学原理："></a>数学原理：</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669176071940-be455bbf-e9bb-4cfb-8c7d-e0ade10a5a1a.png#averageHue=%23030303&clientId=ua5409086-db96-4&from=paste&height=879&id=u646b328b&originHeight=791&originWidth=2353&originalType=binary&ratio=1&rotation=0&showTitle=false&size=184127&status=done&style=none&taskId=uaf267bee-530f-4f2d-b5a5-482826ee31f&title=&width=2614.444513703572" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669275903674-f01c8af3-35a6-4b12-b856-5fd11fafd372.png#averageHue=%233f3e3d&clientId=uab71ef87-eb1c-4&from=paste&height=450&id=uf1f8a322&originHeight=405&originWidth=316&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31129&status=done&style=none&taskId=uc7d49f3b-b9ed-4391-a948-f9f64c62a59&title=&width=351.11112041237936" alt="image.png"><br><a name="DuEqW"></a></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 这个函数告诉了maya这个插件生成,并且生成的对象使用maya python api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RollingNode</span>(om.MPxNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;rollingnode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7F9</span>)</span><br><span class="line">    <span class="comment"># 提前声明节点的属性</span></span><br><span class="line">    distance_obj = <span class="literal">None</span></span><br><span class="line">    radius_obj = <span class="literal">None</span></span><br><span class="line">    rotation_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RollingNode, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;_summary_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            plug (_type_): 当plug是dirty状态时,会传过来,要求更新</span></span><br><span class="line"><span class="string">            data (_type_): data提供了读取和写入节点属性值的方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> plug == RollingNode.rotation_obj:</span><br><span class="line"></span><br><span class="line">            distance = data.inputValue(RollingNode.distance_obj).asDouble()</span><br><span class="line">            radius = data.inputValue(RollingNode.radius_obj).asDouble()</span><br><span class="line">            <span class="keyword">if</span> radius==<span class="number">0</span>:</span><br><span class="line">                rotation = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rotation = distance / radius</span><br><span class="line"></span><br><span class="line">            rotation_data_handle = data.outputValue(RollingNode.rotation_obj)</span><br><span class="line">            rotation_data_handle.setDouble(rotation)</span><br><span class="line"></span><br><span class="line">            data.setClean(plug)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> RollingNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute() <span class="comment"># 创建一个针对数字属性的函数集</span></span><br><span class="line"></span><br><span class="line">        cls.distance_obj = numeric_attr.create(<span class="string">&quot;distance&quot;</span>, <span class="string">&quot;dis&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)  <span class="comment"># 属性长名，属性短名，属性数字类型，属性初始值</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span> <span class="comment"># 设置属性可以key关键帧(这样属性就能出现在channel box中)</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span>  <span class="comment">#  设置属性没有输出引脚(其他属性不能读它)</span></span><br><span class="line"></span><br><span class="line">        cls.radius_obj = numeric_attr.create(<span class="string">&quot;radius&quot;</span>, <span class="string">&quot;rad&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        unit_attr = om.MFnUnitAttribute()  <span class="comment"># 创建一个针对单位属性的函数集</span></span><br><span class="line"></span><br><span class="line">        cls.rotation_obj = unit_attr.create(<span class="string">&quot;rotation&quot;</span>, <span class="string">&quot;rot&quot;</span>, om.MFnUnitAttribute.kAngle, <span class="number">0.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># unit_attr.writable = False #  设置属性没有输入引脚(其他属性不能直接写入它)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加属性</span></span><br><span class="line">        cls.addAttribute(cls.distance_obj)</span><br><span class="line">        cls.addAttribute(cls.radius_obj)</span><br><span class="line">        cls.addAttribute(cls.rotation_obj)</span><br><span class="line">        <span class="comment"># 设置属性影响</span></span><br><span class="line">        cls.attributeAffects(cls.distance_obj, cls.rotation_obj)</span><br><span class="line">        cls.attributeAffects(cls.radius_obj, cls.rotation_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(RollingNode.TYPE_NAME,</span><br><span class="line">                               RollingNode.TYPE_ID,</span><br><span class="line">                               RollingNode.creator,</span><br><span class="line">                               RollingNode.initialize,</span><br><span class="line">                               om.MPxNode.kDependNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(RollingNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取消加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集取消注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(RollingNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(RollingNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试时使用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;rolling_node.py&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name)) <span class="comment"># 取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))  <span class="comment"># 加载插件</span></span><br><span class="line">    </span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;rollingnode&quot;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#cmds.evalDeferred(cmds.file(&quot;D:/ZhangRuiChen/zrctest/test.ma&quot;,o=True,f=True))</span></span><br></pre></td></tr></table></figure><p><a name="nd1Lv"></a></p><h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><p><a name="f37a4"></a></p><h3 id="需要的函数"><a href="#需要的函数" class="headerlink" title="需要的函数"></a>需要的函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276191832-65919398-6691-44ce-bbfc-b786f0d57db8.png#averageHue=%230e0e0e&clientId=uab71ef87-eb1c-4&from=paste&height=522&id=ua468bd22&originHeight=470&originWidth=1569&originalType=binary&ratio=1&rotation=0&showTitle=false&size=281820&status=done&style=none&taskId=u6a8fe328-ef18-45f7-aeb7-d103140d049&title=&width=1743.3333795158965" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276232949-4b119564-f25d-4d0d-a359-cee351324e5f.png#averageHue=%230e0d0c&clientId=uab71ef87-eb1c-4&from=paste&height=492&id=oSROO&originHeight=443&originWidth=965&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56721&status=done&style=none&taskId=u451750ca-16d5-4f92-8197-4855bb2330b&title=&width=1072.2222506264118" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276363671-fac83a4e-d68e-4f5b-9a03-88eaec3c83c5.png#averageHue=%23060606&clientId=uab71ef87-eb1c-4&from=paste&height=581&id=u9aa85282&originHeight=523&originWidth=1568&originalType=binary&ratio=1&rotation=0&showTitle=false&size=192253&status=done&style=none&taskId=u64c636cd-f138-4976-9314-505ae075449&title=&width=1742.222268375351" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669278221295-f94858a1-b33c-4aea-943b-48dcaa816caf.png#averageHue=%23080706&clientId=uab71ef87-eb1c-4&from=paste&height=458&id=u42255ea5&originHeight=412&originWidth=895&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42139&status=done&style=none&taskId=uab215eb9-62a5-458e-a642-87b020a1b1d&title=&width=994.4444707882265" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276507022-eaf4aa20-a034-4950-b8ec-8c17a566c63c.png#averageHue=%23080808&clientId=uab71ef87-eb1c-4&from=paste&height=712&id=u820ea853&originHeight=641&originWidth=1506&originalType=binary&ratio=1&rotation=0&showTitle=false&size=258176&status=done&style=none&taskId=uc5112f50-bb7c-450e-b1d5-f222042dc58&title=&width=1673.3333776615295" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276519908-13c30975-8158-4102-94ea-aae068fd6ca4.png#averageHue=%23070605&clientId=uab71ef87-eb1c-4&from=paste&height=608&id=uf6f553ea&originHeight=547&originWidth=891&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51499&status=done&style=none&taskId=u582aa433-4a9c-4ff8-89d1-9de5356c257&title=&width=990.0000262260444" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277248587-3065461c-a73a-4930-9f36-5527e8510456.png#averageHue=%23080808&clientId=uab71ef87-eb1c-4&from=paste&height=367&id=MZ5PS&originHeight=330&originWidth=1566&originalType=binary&ratio=1&rotation=0&showTitle=false&size=142467&status=done&style=none&taskId=u11da2dc7-0fe7-4350-8c2a-bf63bf32d74&title=&width=1740.00004609426" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277259591-72c884bb-e983-4357-a732-04d7c378bbe4.png#averageHue=%23080706&clientId=uab71ef87-eb1c-4&from=paste&height=317&id=ej8Ow&originHeight=285&originWidth=1040&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32132&status=done&style=none&taskId=u922a51ff-fc9f-4906-a0ae-f4379cef6e8&title=&width=1155.5555861673245" alt="image.png"><br><a name="GiOc2"></a></p><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277069508-5854ed27-7f25-4813-9f30-20d89614b42f.png#averageHue=%230a0a0a&clientId=uab71ef87-eb1c-4&from=paste&height=540&id=u2b02ebda&originHeight=486&originWidth=1517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=196983&status=done&style=none&taskId=u866b468d-4173-4666-ac88-9a7b163e4b5&title=&width=1685.5556002075302" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277119960-0391684d-d8a7-4501-a7e9-f558d591621a.png#averageHue=%23090807&clientId=uab71ef87-eb1c-4&from=paste&height=363&id=u17b6ca56&originHeight=327&originWidth=1425&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40443&status=done&style=none&taskId=u78f7c831-2ff9-4576-b00d-9ff9d96ffa2&title=&width=1583.3333752773437" alt="image.png"><br><a name="J5Af1"></a></p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>创建一个命令，这个命令用来设置选择的一个物体的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCmd</span>(om.MPxCommand):</span><br><span class="line">    COMMAND_NAME = <span class="string">&quot;SimpleCmd&quot;</span></span><br><span class="line">    <span class="comment"># 定义命令的标志</span></span><br><span class="line">    TRANSLATE_FLAG = [<span class="string">&quot;-t&quot;</span>, <span class="string">&quot;-translate&quot;</span>, (om.MSyntax.kDouble,om.MSyntax.kDouble,om.MSyntax.kDouble)]</span><br><span class="line">    VERSION_FLAG = [<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-version&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleCmd, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.undoable = <span class="literal">False</span>  <span class="comment"># 初始设置命令不能撤回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, arg_list</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">        doIt 通常用来进行执行redoIt的初始设置以及检查</span></span><br><span class="line"><span class="string">        doIt 在使用命令时只调用一次</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            arg_db = om.MArgDatabase(self.syntax(), arg_list) <span class="comment"># 创建对象解析语法与参数</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.displayError(<span class="string">&quot;Error parsing arguments&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        </span><br><span class="line">        selection_list = arg_db.getObjectList()</span><br><span class="line"></span><br><span class="line">        self.selected_obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># om.MFn为所有API类型提供常量的静态类</span></span><br><span class="line">        <span class="comment"># om.MSpace 提供坐标空间常量的静态类。</span></span><br><span class="line">        <span class="keyword">if</span> self.selected_obj.apiType() != om.MFn.kTransform:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;This command requires a transform node&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        self.edit = arg_db.isEdit</span><br><span class="line">        self.query = arg_db.isQuery</span><br><span class="line"></span><br><span class="line">        self.translate = arg_db.isFlagSet(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>]) <span class="comment"># 判断语法中是否有这个flag</span></span><br><span class="line">        <span class="keyword">if</span> self.translate:</span><br><span class="line">            transform_fn = om.MFnTransform(self.selected_obj)</span><br><span class="line">            self.orig_translation = transform_fn.translation(om.MSpace.kTransform)  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.edit:</span><br><span class="line">                self.new_translation = [arg_db.flagArgumentDouble(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>],<span class="number">0</span>),</span><br><span class="line">                                        arg_db.flagArgumentDouble(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>],<span class="number">1</span>),</span><br><span class="line">                                        arg_db.flagArgumentDouble(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>],<span class="number">2</span>)]</span><br><span class="line">                self.undoable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.version = arg_db.isFlagSet(SimpleCmd.VERSION_FLAG[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        self.redoIt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undoIt</span>(<span class="params">self</span>):</span><br><span class="line">        transform_fn = om.MFnTransform(self.selected_obj)</span><br><span class="line">        transform_fn.setTranslation(om.MVector(self.orig_translation),om.MSpace.kTransform)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">redoIt</span>(<span class="params">self</span>):</span><br><span class="line">        transform_fn = om.MFnTransform(self.selected_obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.query:</span><br><span class="line">            <span class="keyword">if</span> self.translate:</span><br><span class="line">                self.setResult(self.orig_translation)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Flag does not support query&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> self.edit:</span><br><span class="line">            <span class="keyword">if</span> self.translate:</span><br><span class="line">                transform_fn.setTranslation(om.MVector(self.new_translation),om.MSpace.kTransform)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Flag does not support edit&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> self.version:</span><br><span class="line">            self.setResult(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.setResult(transform_fn.name())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isUndoable</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.undoable</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 注册maya命令时使用的方法，用来得到类的实例 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> SimpleCmd()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_syntax</span>(<span class="params">cls</span>):</span><br><span class="line"></span><br><span class="line">        syntax = om.MSyntax()</span><br><span class="line"></span><br><span class="line">        syntax.enableEdit = <span class="literal">True</span></span><br><span class="line">        syntax.enableQuery = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        syntax.addFlag(*cls.TRANSLATE_FLAG) <span class="comment"># 这里*的意思是解包，相当于将列表的中括号去掉</span></span><br><span class="line">        syntax.addFlag(*cls.VERSION_FLAG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置要传递给命令的对象的类型和数量</span></span><br><span class="line">        syntax.setObjectType(om.MSyntax.kSelectionList, <span class="number">1</span>, <span class="number">1</span>) </span><br><span class="line">        <span class="comment"># 如果设置为True，那么当命令行上没有提供对象时，Maya将传递当前选择。默认为False。</span></span><br><span class="line">        syntax.useSelectionAsDefault(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> syntax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向maya注册一个新命令,第一个参数是命令的名字，第二个参数是类的实例, 第三个参数是命令的语法</span></span><br><span class="line">        plugin_fn.registerCommand(SimpleCmd.COMMAND_NAME, SimpleCmd.creator, SimpleCmd.create_syntax)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleCmd.COMMAND_NAME))  <span class="comment"># 注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterCommand(SimpleCmd.COMMAND_NAME)  <span class="comment"># 取消注册新命令</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleCmd.COMMAND_NAME))  <span class="comment"># 取消注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;simple_cmd.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.polyCube()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="R6LW8"></a></p><h1 id="第二卷"><a href="#第二卷" class="headerlink" title="第二卷"></a>第二卷</h1><p><a name="alXzd"></a></p><h2 id="变形器"><a href="#变形器" class="headerlink" title="变形器"></a>变形器</h2><p><a name="N6AYF"></a></p><h3 id="变形器的介绍"><a href="#变形器的介绍" class="headerlink" title="变形器的介绍"></a>变形器的介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669355834333-997f0cfd-4fd2-4e73-bd1c-268e45820c36.png#averageHue=%230a0a0a&clientId=u5f664d41-9059-4&from=paste&height=758&id=uab4bc6b9&originHeight=682&originWidth=1588&originalType=binary&ratio=1&rotation=0&showTitle=false&size=274633&status=done&style=none&taskId=ua74619f1-ec8a-4eaa-8110-9a3b7e20e55&title=&width=1764.4444911862608" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669355868141-c9c2dee3-b484-44bf-8984-361fdbba321a.png#averageHue=%23070606&clientId=u5f664d41-9059-4&from=paste&height=428&id=ue3d09ce8&originHeight=385&originWidth=1554&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39023&status=done&style=none&taskId=ua7fbf361-57ec-4ce9-a4c2-5fbaa8bf153&title=&width=1726.6667124077137" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669355993057-27a8882a-9859-48e7-9188-f17fc91a795e.png#averageHue=%23131110&clientId=u5f664d41-9059-4&from=paste&height=108&id=u3c57da12&originHeight=97&originWidth=961&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9633&status=done&style=none&taskId=udaa97a37-5c2a-44da-9674-14cf2cfa0a0&title=&width=1067.7778060642297" alt="image.png"><br><a name="iE55s"></a></p><h3 id="MPxDeformerNode"><a href="#MPxDeformerNode" class="headerlink" title="MPxDeformerNode"></a>MPxDeformerNode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356025407-d53cd6b6-cbdb-4fcb-b805-7cde5540ac42.png#averageHue=%230d0d0d&clientId=u5f664d41-9059-4&from=paste&height=642&id=u12951ebb&originHeight=578&originWidth=1550&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288740&status=done&style=none&taskId=ud226216a-3c77-4f3b-a01a-eb27fb1868a&title=&width=1722.2222678455319" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356050081-1d8d4016-947b-4c8b-8ee7-3a43518a50e2.png#averageHue=%23080706&clientId=u5f664d41-9059-4&from=paste&height=410&id=oaJRJ&originHeight=369&originWidth=1419&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40168&status=done&style=none&taskId=ubb6dc37b-0067-4213-b570-9fedf41763e&title=&width=1576.6667084340706" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356550372-1e916526-0fe3-4a99-b450-007141338fc0.png#averageHue=%230b0b0b&clientId=u5f664d41-9059-4&from=paste&height=553&id=u690eee88&originHeight=498&originWidth=1517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=241699&status=done&style=none&taskId=u526e405c-7ee6-4763-8500-dbb1b88be8a&title=&width=1685.5556002075302" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356634899-5dae2046-df65-429d-8805-ee447cfa25f5.png#averageHue=%230c0b0a&clientId=u5f664d41-9059-4&from=paste&height=373&id=ufaf9dabb&originHeight=336&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31029&status=done&style=none&taskId=uda7bd747-a134-4d48-9472-b734da07645&title=&width=1213.3333654756907" alt="image.png"><br />deform方法是由compute方法自动调用的<br><a name="d052s"></a></p><h3 id="MPxDeformerNode-Attributes"><a href="#MPxDeformerNode-Attributes" class="headerlink" title="MPxDeformerNode Attributes"></a>MPxDeformerNode Attributes</h3><p>MPxDeformerNode 自带的属性:<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669357128617-3053f189-10f7-4efc-90c7-36e5861d26fa.png#averageHue=%230b0b0b&clientId=u5f664d41-9059-4&from=paste&height=596&id=u242d61b4&originHeight=536&originWidth=1403&originalType=binary&ratio=1&rotation=0&showTitle=false&size=184275&status=done&style=none&taskId=u07543215-b9eb-480e-b6f8-dac44166d44&title=&width=1558.8889301853426" alt="image.png"><br><a name="GBDH8"></a></p><h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669357196384-b048f1b1-8fa0-449b-ad53-429b20da40e0.png#averageHue=%230d0d0d&clientId=u5f664d41-9059-4&from=paste&height=347&id=u7f7dfbd9&originHeight=312&originWidth=1471&originalType=binary&ratio=1&rotation=0&showTitle=false&size=186140&status=done&style=none&taskId=u50f233d0-1224-441d-83cd-f3d14e582f9&title=&width=1634.4444877424369" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669357212850-8737f12b-dac4-40f2-b8b1-90288f0f14f1.png#averageHue=%230f0d0c&clientId=u5f664d41-9059-4&from=paste&height=312&id=u1fbdea20&originHeight=281&originWidth=939&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37218&status=done&style=none&taskId=u7b0303b6-7335-4ecb-8665-f04bd4fce06&title=&width=1043.3333609722285" alt="image.png"><br><a name="oqCbJ"></a></p><h3 id="创建变形器节点的三个举例"><a href="#创建变形器节点的三个举例" class="headerlink" title="创建变形器节点的三个举例"></a>创建变形器节点的三个举例</h3><p><a name="Z2V6L"></a></p><h4 id="basicdeformernode"><a href="#basicdeformernode" class="headerlink" title="basicdeformernode"></a>basicdeformernode</h4><p>创建一个名字叫basicdeformernode的变形器（遍历顶点，每隔一个顶点，改变顶点的位置）<br />然后可以通过cmds.deformer(typ&#x3D;”basicdeformernode”)为选择的物体添加变形节点<br />变形使用的函数：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669601246904-9401a1e9-a3b4-49c8-8e47-581c3165cbfb.png#averageHue=%23ffffff&clientId=u62d82c1e-27cd-4&from=paste&height=441&id=u259ef204&originHeight=397&originWidth=572&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25233&status=done&style=none&taskId=uf6e5ff20-e0c1-4fb5-9c36-f9c27b99539&title=&width=635.5555723920285" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> ommpx</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicDeformerNode</span>(ommpx.MPxDeformerNode):</span><br><span class="line"></span><br><span class="line">    TYPE_NAME = <span class="string">&quot;basicdeformernode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FC</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BasicDeformerNode, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, data_block, geo_iter, matrix, multi_index</span>):</span><br><span class="line">        </span><br><span class="line">        envelope = data_block.inputValue(self.envelope).asFloat() <span class="comment"># 总权重</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> envelope == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        geo_iter.reset() <span class="comment"># 重置迭代器</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geo_iter.isDone():</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> geo_iter.index() % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                pt = geo_iter.position()</span><br><span class="line">                <span class="comment"># 局部空间</span></span><br><span class="line">                <span class="comment"># pt.x += (0.2*envelope)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 世界空间</span></span><br><span class="line">                pt = pt * matrix * <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">                geo_iter.setPosition(pt)</span><br><span class="line"></span><br><span class="line">            geo_iter.<span class="built_in">next</span>()    </span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> BasicDeformerNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(BasicDeformerNode.TYPE_NAME,</span><br><span class="line">                               BasicDeformerNode.TYPE_ID,</span><br><span class="line">                               BasicDeformerNode.creator,</span><br><span class="line">                               BasicDeformerNode.initialize,</span><br><span class="line">                               ommpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BasicDeformerNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(BasicDeformerNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BasicDeformerNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    plugin_name = <span class="string">&quot;basic_deformer_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(&quot;C:/Users/Adiministrator/Destop/test.ma&quot;,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.select(&quot;nurbsPlane1&quot;); cmds.deformer(typ=&quot;basicdeformernode&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="AfQbY"></a></p><h4 id="blenddeformernode"><a href="#blenddeformernode" class="headerlink" title="blenddeformernode"></a>blenddeformernode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> ommpx</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlendDeformerNode</span>(ommpx.MPxDeformerNode):</span><br><span class="line"></span><br><span class="line">    TYPE_NAME = <span class="string">&quot;blenddeformernode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FD</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BlendDeformerNode, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, data_block, geo_iter, matrix, multi_index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            变形的逻辑</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data_block (_type_): 数据块</span></span><br><span class="line"><span class="string">            geo_iter (_type_): 针对geometry的顶点迭代器</span></span><br><span class="line"><span class="string">            matrix (_type_): 世界空间的矩阵</span></span><br><span class="line"><span class="string">            multi_index (_type_): _description_</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># envelope是MPxDeformerNode类自带的属性</span></span><br><span class="line">        envelope = data_block.inputValue(self.envelope).asFloat() <span class="comment"># 获取控制整体权重值的值</span></span><br><span class="line">        <span class="keyword">if</span> envelope == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>    </span><br><span class="line"></span><br><span class="line">        blend_weight = data_block.inputValue(self.blend_weight).asFloat() <span class="comment"># 获取混合的权重值</span></span><br><span class="line">        <span class="keyword">if</span> blend_weight == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target_mesh = data_block.inputValue(self.blend_mesh).asMesh()  <span class="comment"># 获取目标mesh</span></span><br><span class="line">        <span class="keyword">if</span> target_mesh.isNull():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target_points = om.MPointArray() <span class="comment"># 定义一个接受目标mesh所有点的数组</span></span><br><span class="line"></span><br><span class="line">        target_mesh_fn = om.MFnMesh(target_mesh) <span class="comment"># 定义一个目标mesh的函数集</span></span><br><span class="line">        target_mesh_fn.getPoints(target_points) <span class="comment"># 使用函数集的方法将点放入到点数组中</span></span><br><span class="line"></span><br><span class="line">        global_weight = blend_weight * envelope  <span class="comment"># 得到总的权重值</span></span><br><span class="line"></span><br><span class="line">        geo_iter.reset() <span class="comment"># 重置迭代器</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geo_iter.isDone():</span><br><span class="line">            </span><br><span class="line">            source_pt = geo_iter.position()</span><br><span class="line">            target_pt = target_points[geo_iter.index()]</span><br><span class="line"></span><br><span class="line">            source_weight = self.weightValue(data_block, multi_index, geo_iter.index()) <span class="comment"># 获取绘制的权重值</span></span><br><span class="line"></span><br><span class="line">            final_pt = source_pt + ((target_pt - source_pt) * global_weight * source_weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            geo_iter.setPosition(final_pt)</span><br><span class="line">            </span><br><span class="line">            geo_iter.<span class="built_in">next</span>()    </span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> BlendDeformerNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        </span><br><span class="line">        typed_attr = om.MFnTypedAttribute()</span><br><span class="line">        cls.blend_mesh = typed_attr.create(<span class="string">&quot;blendMesh&quot;</span>, <span class="string">&quot;bMesh&quot;</span>, om.MFnData.kMesh)</span><br><span class="line"></span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line">        cls.blend_weight = numeric_attr.create(<span class="string">&quot;blendWeight&quot;</span>, <span class="string">&quot;bWeight&quot;</span>, om.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.setKeyable(<span class="literal">True</span>)</span><br><span class="line">        numeric_attr.setMin(<span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.blend_mesh)</span><br><span class="line">        cls.addAttribute(cls.blend_weight)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#变形器节点具有默认的outputGeom属性，因此我们没必要再创建一个输出的属性，我们可以直接利用这个默认的outputGemo属性</span></span><br><span class="line">        output_geom = ommpx.cvar.MPxGeometryFilter_outputGeom  </span><br><span class="line"></span><br><span class="line">        cls.attributeAffects(cls.blend_mesh, output_geom)</span><br><span class="line">        cls.attributeAffects(cls.blend_weight,output_geom)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(BlendDeformerNode.TYPE_NAME,</span><br><span class="line">                               BlendDeformerNode.TYPE_ID,</span><br><span class="line">                               BlendDeformerNode.creator,</span><br><span class="line">                               BlendDeformerNode.initialize,</span><br><span class="line">                               ommpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BlendDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line">    cmds.makePaintable(BlendDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>, attrType=<span class="string">&quot;multiFloat&quot;</span>, shapeMode = <span class="string">&quot;deformer&quot;</span>) <span class="comment"># 使其能绘制权重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    cmds.makePaintable(BlendDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>,remove=<span class="literal">True</span>) <span class="comment"># 移除使其能绘制权重</span></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(BlendDeformerNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BlendDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    plugin_name = <span class="string">&quot;blend_deformer_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(&quot;D:/ZhangRuiChen/zrctest/blend_test.ma&quot;,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.select(&quot;sourceSphere&quot;); cmds.deformer(typ=&quot;blenddeformernode&quot;)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.connectAttr(&quot;deformerTargetShape.outMesh&quot;, &quot;blenddeformernode1.blendMesh&quot;, force=True)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="WKWiJ"></a></p><h4 id="attractordeformernode"><a href="#attractordeformernode" class="headerlink" title="attractordeformernode"></a>attractordeformernode</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669885141889-8034d785-9229-4f17-b298-f544e314d66c.png#averageHue=%236c6c6c&clientId=uc34e0430-0983-4&from=paste&height=526&id=ubc0d0e8f&originHeight=473&originWidth=310&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29030&status=done&style=none&taskId=uae417cc9-9c77-4b0c-a221-7143d9e847d&title=&width=344.4444535691064" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669949631088-6257e607-fd16-41e0-9671-0b43342621e1.png#averageHue=%233a3938&clientId=u706cb6cd-4e7a-4&from=paste&height=334&id=u61cce788&originHeight=301&originWidth=983&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44627&status=done&style=none&taskId=ub33502f4-1fd1-4a61-bed4-6f5f6b0764f&title=&width=1092.2222511562309" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> ommpx</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AttractorDeformerNode</span>(ommpx.MPxDeformerNode):</span><br><span class="line"></span><br><span class="line">    TYPE_NAME = <span class="string">&quot;attractordeformernode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FE</span>)</span><br><span class="line"></span><br><span class="line">    MAX_ANGLE = <span class="number">0.5</span> * <span class="number">3.14159265</span> <span class="comment"># 90度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AttractorDeformerNode, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, data_block, geo_iter, world_matrix, multi_index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            变形的逻辑</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data_block (_type_): 数据块</span></span><br><span class="line"><span class="string">            geo_iter (_type_): 针对geometry的顶点迭代器</span></span><br><span class="line"><span class="string">            matrix (_type_): 世界空间的矩阵</span></span><br><span class="line"><span class="string">            multi_index (_type_): geom_index</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># envelope是MPxDeformerNode类自带的属性</span></span><br><span class="line">        envelope = data_block.inputValue(self.envelope).asFloat() <span class="comment"># 获取控制整体权重值的值</span></span><br><span class="line">        <span class="keyword">if</span> envelope == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>    </span><br><span class="line">        </span><br><span class="line">        max_distance = data_block.inputValue(AttractorDeformerNode.max_distance).asFloat()</span><br><span class="line">        <span class="keyword">if</span> max_distance == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target_position = data_block.inputValue(AttractorDeformerNode.target_position).asFloatVector()</span><br><span class="line">        target_position = om.MPoint(target_position) * world_matrix.inverse() <span class="comment"># 将目标位置转换为局部空间下的数值</span></span><br><span class="line">        target_position = om.MFloatVector(target_position) <span class="comment"># 获取目标位置在局部空间下的floatVector</span></span><br><span class="line"></span><br><span class="line">        input_handle = data_block.outputArrayValue(self.<span class="built_in">input</span>) <span class="comment"># 使用outputArray代替inputArray以避免重新计算（外网翻译）</span></span><br><span class="line">        input_handle.jumpToElement(multi_index)</span><br><span class="line">        input_element_handle = input_handle.outputValue()</span><br><span class="line"></span><br><span class="line">        input_geom = input_element_handle.child(self.inputGeom).asMesh()</span><br><span class="line">        mesh_fn = om.MFnMesh(input_geom)</span><br><span class="line"></span><br><span class="line">        normals = om.MFloatVectorArray()  <span class="comment"># 用来存取inputgeom的顶点的所有浮点法线</span></span><br><span class="line">        mesh_fn.getVertexNormals(<span class="literal">False</span>, normals) <span class="comment"># False的作用是不要average normal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        geo_iter.reset()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geo_iter.isDone():</span><br><span class="line">            <span class="comment"># 顶点迭代器所获取的位置都是在局部空间下的位置</span></span><br><span class="line">            pt_local = geo_iter.position()</span><br><span class="line"></span><br><span class="line">            target_vector = target_position - om.MFloatVector(pt_local)</span><br><span class="line"></span><br><span class="line">            distance = target_vector.length()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> distance &lt;= max_distance:</span><br><span class="line"></span><br><span class="line">                normal = normals[geo_iter.index()] <span class="comment"># 局部空间下的顶点的法线浮点向量</span></span><br><span class="line"></span><br><span class="line">                angle = normal.angle(target_vector)  <span class="comment"># 顶点的法线与顶点与目标点的向量之间的角度</span></span><br><span class="line">                <span class="keyword">if</span> angle &lt;= AttractorDeformerNode.MAX_ANGLE:</span><br><span class="line"></span><br><span class="line">                    offset = target_vector * ((max_distance-distance)/max_distance)</span><br><span class="line"></span><br><span class="line">                    new_pt_local = pt_local + om.MVector(offset)  <span class="comment"># 局部空间下的新顶点位置</span></span><br><span class="line"></span><br><span class="line">                    geo_iter.setPosition(new_pt_local)</span><br><span class="line"></span><br><span class="line">            geo_iter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryAttribute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 返回要辅助修改的属性 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> AttractorDeformerNode.target_position</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryNodeSetup</span>(<span class="params">self, dag_modifier</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; dag_modifier用于执行节点创建和连接操作 &quot;&quot;&quot;</span></span><br><span class="line">        locator = dag_modifier.createNode(<span class="string">&quot;locator&quot;</span>)</span><br><span class="line"></span><br><span class="line">        locator_fn = om.MFnDependencyNode(locator)</span><br><span class="line">        locator_translate_plug = locator_fn.findPlug(<span class="string">&quot;translate&quot;</span>, <span class="literal">False</span>) <span class="comment"># False意思是不需要networkplug，networkplug意思是在DG中建立连接的属性</span></span><br><span class="line"></span><br><span class="line">        target_position_plug = om.MPlug(self.thisMObject(), AttractorDeformerNode.target_position)  <span class="comment"># 获取变形器的target_position的plug</span></span><br><span class="line">        dag_modifier.connect(locator_translate_plug, target_position_plug)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将定位器得位置设置在output_geom的位置</span></span><br><span class="line">        <span class="comment"># 这里的output_geom指的是shape节点</span></span><br><span class="line">        <span class="comment"># parent指的是transform节点，因为只有transform节点才有xyz坐标</span></span><br><span class="line">        output_geom_plug = om.MPlug(self.thisMObject(), self.outputGeom)</span><br><span class="line">        mPlugArray2 = om.MPlugArray()</span><br><span class="line">        output_geom_plug[<span class="number">0</span>].connectedTo(mPlugArray2,<span class="literal">False</span>,<span class="literal">True</span>)</span><br><span class="line">        output_geom_obj = mPlugArray2[<span class="number">0</span>].node()</span><br><span class="line">        output_geom_fn = om.MFnDagNode(output_geom_obj)</span><br><span class="line">        parent_obj = output_geom_fn.parent(<span class="number">0</span>)</span><br><span class="line">        parent_fn = om.MFnDependencyNode(parent_obj)</span><br><span class="line">        parent_translate_plug = parent_fn.findPlug(<span class="string">&quot;translate&quot;</span>,<span class="literal">False</span>)</span><br><span class="line">        parent_translate_x_handle = parent_translate_plug.child(<span class="number">0</span>).asFloat()</span><br><span class="line">        parent_translate_y_handle = parent_translate_plug.child(<span class="number">1</span>).asFloat()</span><br><span class="line">        parent_translate_z_handle = parent_translate_plug.child(<span class="number">2</span>).asFloat()</span><br><span class="line">    </span><br><span class="line">        locator_translate_plug.child(<span class="number">0</span>).setFloat(parent_translate_x_handle)</span><br><span class="line">        locator_translate_plug.child(<span class="number">1</span>).setFloat(parent_translate_y_handle)</span><br><span class="line">        locator_translate_plug.child(<span class="number">2</span>).setFloat(parent_translate_z_handle)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> AttractorDeformerNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        </span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line">        cls.max_distance = numeric_attr.create(<span class="string">&quot;maximumDistance&quot;</span>, <span class="string">&quot;maxDist&quot;</span>, om.MFnNumericData.kFloat, <span class="number">1.0</span>)</span><br><span class="line">        numeric_attr.setKeyable(<span class="literal">True</span>)</span><br><span class="line">        numeric_attr.setMin(<span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.setMax(<span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        cls.target_position = numeric_attr.createPoint(<span class="string">&quot;targetPosition&quot;</span>, <span class="string">&quot;targetPos&quot;</span>)</span><br><span class="line">        numeric_attr.setKeyable(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.max_distance)</span><br><span class="line">        cls.addAttribute(cls.target_position)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#变形器节点具有默认的outputGeom属性，因此我们没必要再创建一个输出的属性，我们可以直接利用这个默认的outputGemo属性</span></span><br><span class="line">        output_geom = ommpx.cvar.MPxGeometryFilter_outputGeom  </span><br><span class="line"></span><br><span class="line">        cls.attributeAffects(cls.max_distance, output_geom)</span><br><span class="line">        cls.attributeAffects(cls.target_position,output_geom)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(AttractorDeformerNode.TYPE_NAME,</span><br><span class="line">                               AttractorDeformerNode.TYPE_ID,</span><br><span class="line">                               AttractorDeformerNode.creator,</span><br><span class="line">                               AttractorDeformerNode.initialize,</span><br><span class="line">                               ommpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(AttractorDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line">    cmds.makePaintable(AttractorDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>, attrType=<span class="string">&quot;multiFloat&quot;</span>, shapeMode = <span class="string">&quot;deformer&quot;</span>) <span class="comment"># 使其能绘制权重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    cmds.makePaintable(AttractorDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>,remove=<span class="literal">True</span>) <span class="comment"># 移除使其能绘制权重</span></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(AttractorDeformerNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(AttractorDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    plugin_name = <span class="string">&quot;attractor_deformer_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(&quot;D:/ZhangRuiChen/zrctest/attractor_test.ma&quot;,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.select(&quot;pSphere1&quot;); cmds.deformer(typ=&quot;attractordeformernode&quot;)&#x27;</span>)</span><br><span class="line">    <span class="comment">#cmds.evalDeferred(&#x27;cmds.connectAttr(&quot;locator1.translate&quot;,&quot;attractordeformernode1.targetPosition&quot;,f=True)&#x27;)</span></span><br></pre></td></tr></table></figure><p><a name="ChJzT"></a></p><h2 id="CallBack"><a href="#CallBack" class="headerlink" title="CallBack"></a>CallBack</h2><p><a name="wF8X2"></a></p><h3 id="CallBack介绍"><a href="#CallBack介绍" class="headerlink" title="CallBack介绍"></a>CallBack介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972488001-309540ae-07bb-4005-9919-aa1bcbcd5249.png#averageHue=%23090909&clientId=u706cb6cd-4e7a-4&from=paste&height=607&id=uf36b7ab6&originHeight=546&originWidth=1583&originalType=binary&ratio=1&rotation=0&showTitle=false&size=232144&status=done&style=none&taskId=u09bba1cb-0e33-41f0-acb0-9d7fd113a9e&title=&width=1758.8889354835335" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972508805-3935a541-c38a-41c7-bff5-a896383060c3.png#averageHue=%23070606&clientId=u706cb6cd-4e7a-4&from=paste&height=451&id=u73d5f3e5&originHeight=406&originWidth=1488&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36769&status=done&style=none&taskId=uc8872394-a571-4aba-9dc3-eed480c8e03&title=&width=1653.3333771317104" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972555239-dc7a204c-e356-4a26-98cd-78eecc67203a.png#averageHue=%230a0a0a&clientId=u706cb6cd-4e7a-4&from=paste&height=316&id=u54239874&originHeight=284&originWidth=1421&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121474&status=done&style=none&taskId=u2df6defd-ff08-4b87-aa18-24fdac8740e&title=&width=1578.8889307151617" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972581861-96ac13e4-dc9c-432e-a38c-9fc0e0cb561d.png#averageHue=%230c0b0a&clientId=u706cb6cd-4e7a-4&from=paste&height=289&id=u05ef04b1&originHeight=260&originWidth=773&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24062&status=done&style=none&taskId=u37fb79ad-66a9-4f9c-a91f-07d85da429f&title=&width=858.8889116416749" alt="image.png"><br><a name="pdr4V"></a></p><h3 id="CallBack-vs-ScriptJobs"><a href="#CallBack-vs-ScriptJobs" class="headerlink" title="CallBack vs ScriptJobs"></a>CallBack vs ScriptJobs</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669973658033-4c79b1d1-9452-4ef8-a6e6-8c4718c15060.png#averageHue=%23090909&clientId=u706cb6cd-4e7a-4&from=paste&height=322&id=udb20517a&originHeight=290&originWidth=1535&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123374&status=done&style=none&taskId=u72d56818-e005-4259-9bcc-2d2f92de29f&title=&width=1705.5556007373493" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669973698429-03371990-4d28-4a58-a840-c328a893017d.png#averageHue=%230b0a09&clientId=u706cb6cd-4e7a-4&from=paste&height=268&id=u4d182dee&originHeight=241&originWidth=903&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25522&status=done&style=none&taskId=u9eca8eda-559f-496e-8fca-521a2573681&title=&width=1003.3333599125905" alt="image.png"><br><a name="zUZUZ"></a></p><h3 id="MMessage"><a href="#MMessage" class="headerlink" title="MMessage"></a>MMessage</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669974320245-42120466-d32c-4ecf-9172-d2c20ed0e2a0.png#averageHue=%230a0a0a&clientId=u706cb6cd-4e7a-4&from=paste&height=487&id=u0a033b4e&originHeight=438&originWidth=1473&originalType=binary&ratio=1&rotation=0&showTitle=false&size=183961&status=done&style=none&taskId=u2e9e4661-09ea-4df6-8dc8-1b3973d71ac&title=&width=1636.666710023528" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669974341909-a7a9ab9a-696e-4401-a3d7-be2bf57cb093.png#averageHue=%230c0b0a&clientId=u706cb6cd-4e7a-4&from=paste&height=300&id=u78fb9785&originHeight=270&originWidth=1078&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26516&status=done&style=none&taskId=u43a6d480-5105-4ad5-9240-28951bb8ef4&title=&width=1197.7778095080537" alt="image.png"><br />详情：<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__py_ref_class_open_maya_1_1_m_message_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__py_ref_class_open_maya_1_1_m_message_html</a><br />点击才能展开<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670232926009-a9fd1da3-d7b6-4e73-9bf9-68474c984507.png#averageHue=%23faf6f5&clientId=u042c0c24-ff4e-4&from=paste&height=286&id=ud08fa497&originHeight=257&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16912&status=done&style=none&taskId=u3e5a6d1b-d291-46be-8ba8-811380b34b6&title=&width=712.2222410896683" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670229085571-d2f1e418-55d9-4202-9e96-d148aafe3e9d.png#averageHue=%23f7f8fb&clientId=u042c0c24-ff4e-4&from=paste&height=1050&id=u24d41402&originHeight=945&originWidth=526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57798&status=done&style=none&taskId=ua93d13aa-78bc-45ba-95ae-93c0e8cd56a&title=&width=584.4444599269353" alt="image.png"><br />MEventMessage：在发生添加的全局事件时执行（例如场景被打开，选择发生变化，事件发生改变）时添加callback<br />MSceneMessage: 场景事件添加callback<br />MTimmerMessage: 在特定的事件间隔内调用一个函数<br><a name="cQifq"></a></p><h3 id="管理回调函数"><a href="#管理回调函数" class="headerlink" title="管理回调函数"></a>管理回调函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670223085104-a250a1fb-6b2d-41ba-9713-e5c5985ab042.png#averageHue=%230d0d0d&clientId=u042c0c24-ff4e-4&from=paste&height=313&id=ud2c5aefb&originHeight=282&originWidth=1098&originalType=binary&ratio=1&rotation=0&showTitle=false&size=128211&status=done&style=none&taskId=ue9e1910f-2311-4995-8b0f-700b4ea080c&title=&width=1220.0000323189638" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670223097855-5501613c-244e-40a0-b503-020f648889c5.png#averageHue=%230e0d0b&clientId=u042c0c24-ff4e-4&from=paste&height=297&id=u0aace71e&originHeight=267&originWidth=637&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26408&status=done&style=none&taskId=u7b4bc1df-cfdb-4f6e-aa82-d153ca7ae91&title=&width=707.7777965274863" alt="image.png"><br><a name="IArRy"></a></p><h3 id="获取MEventMessage的事件名字"><a href="#获取MEventMessage的事件名字" class="headerlink" title="获取MEventMessage的事件名字"></a>获取MEventMessage的事件名字</h3><p>import maya.api.OpenMaya as om<br />om.MEventMessage.getEventNames()<br />其中常用的事件：<br />deleteAll，undoSupressed（撤销后的返回），undo（撤销），timeChanged（时间轴变化）<br />其他事件的解释可以通过scriptjob命令的帮助文档找到:<br /><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html</a><br><a name="Du513"></a></p><h3 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h3><p>MEventMessage<br />MSceneMessage<br />MConditionMessage<br />MUiMessage<br />MTimerMessage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaAnim <span class="keyword">as</span> oma</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">callback_ids = [] <span class="comment"># 定义全局变量存放callback_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_new_scene</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当新场景加载时调用,client_data为调用这个函数时传递的参数(可以为None) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;New Scene opened&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_time_changed</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当时间轴发生改变时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Time changed: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(oma.MAnimControl.currentTime().asUnits(om.MTime.uiUnit()))) <span class="comment"># 输出当前时间轴的帧数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_selection_changed</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当选择发生改变时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Selection changed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_import</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 导入前执行 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Import pre-processing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">after_import</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 导入后执行 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Import post-processing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_viewport_changed</span>(<span class="params">model_panel,*args</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 在指定的视口面板处切换相机时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Camera changed in model panel &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(model_panel))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_playing_back_state_changed</span>(<span class="params">is_playing, client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当使用播放键预览拍屏时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Playing state changed: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(is_playing))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_timer_fired</span>(<span class="params">elapsed_time, previous_execution_time, client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    定时器调用此函数,每经过设定的秒数就调用一次这个函数</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        elapsed_time (float): 设定的秒数</span></span><br><span class="line"><span class="string">        previous_execution_time (_type_): 以前的运行的时间，为了防止此函数还没执行完就再次被调用</span></span><br><span class="line"><span class="string">        client_data (_type_): 用户自定义的参数,可以不传递</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Timer fired&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> callback_ids <span class="comment"># 调用全局变量</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line">    <span class="comment"># 注册回调，参数为事件类型名，回调函数，还有第三个参数可选（传递给回调函数的参数），返回值为回调函数id</span></span><br><span class="line">    callback_ids.append(om.MEventMessage.addEventCallback(<span class="string">&quot;NewSceneOpened&quot;</span>, on_new_scene)) </span><br><span class="line">    callback_ids.append(om.MEventMessage.addEventCallback(<span class="string">&quot;timeChanged&quot;</span>, on_time_changed))</span><br><span class="line">    callback_ids.append(om.MEventMessage.addEventCallback(<span class="string">&quot;SelectionChanged&quot;</span>, on_selection_changed))</span><br><span class="line"></span><br><span class="line">    callback_ids.append(om.MSceneMessage.addCallback(om.MSceneMessage.kBeforeImport, before_import))</span><br><span class="line">    callback_ids.append(om.MSceneMessage.addCallback(om.MSceneMessage.kAfterImport, after_import))</span><br><span class="line"></span><br><span class="line">    callback_ids.append(om.MConditionMessage.addConditionCallback(<span class="string">&quot;playingBack&quot;</span>, on_playing_back_state_changed))</span><br><span class="line">    </span><br><span class="line">    callback_ids.append(omui.MUiMessage.addCameraChangedCallback(<span class="string">&quot;modelPanel4&quot;</span>, on_viewport_changed))</span><br><span class="line"></span><br><span class="line">    callback_ids.append(om.MTimerMessage.addTimerCallback(<span class="number">2.5</span>, on_timer_fired))</span><br><span class="line"></span><br><span class="line">    om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> callback_ids</span><br><span class="line">    om.MEventMessage.removeCallbacks(callback_ids)</span><br><span class="line">    callback_ids = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;callback_example.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="laIwQ"></a></p><h2 id="遍历dag"><a href="#遍历dag" class="headerlink" title="遍历dag"></a>遍历dag</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292234464-c3d01a0b-ccd6-4ee8-852f-e5389fdf7752.png#averageHue=%23080808&clientId=ud856797a-7bad-4&from=paste&height=459&id=ua4023119&originHeight=413&originWidth=1567&originalType=binary&ratio=1&rotation=0&showTitle=false&size=167105&status=done&style=none&taskId=uce053f01-334d-4e15-8de8-78aa1e79a3e&title=&width=1741.1111572348054" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292256216-69999efc-8d41-4710-ab15-1a985a9c8152.png#averageHue=%23060605&clientId=ud856797a-7bad-4&from=paste&height=424&id=u89628321&originHeight=382&originWidth=1411&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39794&status=done&style=none&taskId=uc546536e-6fbf-4060-808a-c47acbfc2d3&title=&width=1567.7778193097067" alt="image.png"><br><a name="cFSBy"></a></p><h3 id="什么是dag"><a href="#什么是dag" class="headerlink" title="什么是dag"></a>什么是dag</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292398236-03017c4c-8d5f-4f10-b6d0-91592fe0db6b.png#averageHue=%230a0a0a&clientId=ud856797a-7bad-4&from=paste&height=610&id=u0bc3b1bf&originHeight=549&originWidth=1436&originalType=binary&ratio=1&rotation=0&showTitle=false&size=221882&status=done&style=none&taskId=uc50a015a-a103-4472-b546-08929a1fe2c&title=&width=1595.5555978233442" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292460174-2d433e3c-e8f9-4689-9ec2-571f1fcbd908.png#averageHue=%230e0e0e&clientId=ud856797a-7bad-4&from=paste&height=58&id=uec348313&originHeight=52&originWidth=1490&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42870&status=done&style=none&taskId=ubd55d0a7-b5fe-426b-b234-1d7cd44798d&title=&width=1655.5555994128015" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292422966-d1c5fd82-cc5b-41cb-b937-675af3cfc63e.png#averageHue=%230b0a0a&clientId=ud856797a-7bad-4&from=paste&height=566&id=u6bf9b251&originHeight=509&originWidth=910&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47642&status=done&style=none&taskId=u319e8271-3a6f-4646-8a16-f5d6cd7fb55&title=&width=1011.111137896409" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292473901-af9cd6c3-52b3-41bd-9e80-ae83a553ea5b.png#averageHue=%230f0c0a&clientId=ud856797a-7bad-4&from=paste&height=51&id=u7343d157&originHeight=46&originWidth=808&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6927&status=done&style=none&taskId=u30d89d08-9196-49be-965b-c1985fb545f&title=&width=897.7778015607676" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293619209-ed47aed6-aeb7-43e5-8dbd-1333230b98dc.png#averageHue=%23454545&clientId=ud856797a-7bad-4&from=paste&height=886&id=u65792787&originHeight=797&originWidth=1623&originalType=binary&ratio=1&rotation=0&showTitle=false&size=321869&status=done&style=none&taskId=uc9cf94af-62f9-4940-99b1-c4c33239cc7&title=&width=1803.3333811053535" alt="image.png"><br><a name="fAnTI"></a></p><h3 id="DG-vs-DAG"><a href="#DG-vs-DAG" class="headerlink" title="DG vs DAG"></a>DG vs DAG</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293830064-e4d086ae-db35-4015-a039-1dcab37c54ac.png#averageHue=%23111111&clientId=ud856797a-7bad-4&from=paste&height=869&id=u1b0787ac&originHeight=782&originWidth=1578&originalType=binary&ratio=1&rotation=0&showTitle=false&size=266546&status=done&style=none&taskId=u8128643d-cd26-48d6-9a51-cc55757311d&title=&width=1753.333379780806" alt="image.png"><br />DG:<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293934734-671f858a-c3d3-4606-b322-07be4b8f1c9f.png#averageHue=%23181614&clientId=ud856797a-7bad-4&from=paste&height=149&id=ucf7299e1&originHeight=134&originWidth=430&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10145&status=done&style=none&taskId=ud7190181-f6e4-41be-b488-d30ed0c2252&title=&width=477.7777904345669" alt="image.png"><br />DAG:<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293952304-026248cd-50f0-4949-951e-a39832dc47e3.png#averageHue=%23130f0c&clientId=ud856797a-7bad-4&from=paste&height=100&id=ue9c857d9&originHeight=90&originWidth=250&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4254&status=done&style=none&taskId=ubcad7d02-6ea2-47b5-b3f5-933558275f6&title=&width=277.7777851363761" alt="image.png"><br><a name="RT5I8"></a></p><h3 id="遍历dag的常用api-class"><a href="#遍历dag的常用api-class" class="headerlink" title="遍历dag的常用api class"></a>遍历dag的常用api class</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293997068-3d94d62f-ce6b-4fad-8699-234e64ee6427.png#averageHue=%230b0b0b&clientId=ud856797a-7bad-4&from=paste&height=492&id=u072129c2&originHeight=443&originWidth=735&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88990&status=done&style=none&taskId=u9be385a2-bef2-46da-aeb5-f318ec6b27c&title=&width=816.6666883009457" alt="image.png"><br><a name="xZdiD"></a></p><h3 id="MItDag"><a href="#MItDag" class="headerlink" title="MItDag"></a>MItDag</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_class_m_it_dag_html">https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_class_m_it_dag_html</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294064469-4920d97b-6f92-41f7-8771-e73e0bd0a24b.png#averageHue=%23090909&clientId=ud856797a-7bad-4&from=paste&height=563&id=uc63fdefe&originHeight=507&originWidth=1585&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190360&status=done&style=none&taskId=u7aee5de1-3dca-4924-9a7c-3f19d2cadfc&title=&width=1761.1111577646245" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294104355-c1a8787c-e8ce-45ae-a79f-181ac15dbbb6.png#averageHue=%23080707&clientId=ud856797a-7bad-4&from=paste&height=417&id=ub9109e3b&originHeight=375&originWidth=1095&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38847&status=done&style=none&taskId=u378de64f-b571-4dad-b4d4-8f7454d5c9f&title=&width=1216.6666988973273" alt="image.png"><br><a name="OAENk"></a></p><h3 id="MFnDagNode"><a href="#MFnDagNode" class="headerlink" title="MFnDagNode"></a>MFnDagNode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294341336-eeaea299-9516-44bb-90b8-7258f819f2f4.png#averageHue=%23080808&clientId=ud856797a-7bad-4&from=paste&height=793&id=u7c73b66b&originHeight=714&originWidth=1566&originalType=binary&ratio=1&rotation=0&showTitle=false&size=238697&status=done&style=none&taskId=u1e08df4c-cfb5-41fc-aa9b-a26535552c0&title=&width=1740.00004609426" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294373623-54804cd2-b2ee-41d9-a6ee-d750d503ea32.png#averageHue=%23070706&clientId=ud856797a-7bad-4&from=paste&height=408&id=u3504b445&originHeight=367&originWidth=1248&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33475&status=done&style=none&taskId=u06d5765d-56e5-4db6-ae66-63805df8373&title=&width=1386.6667034007894" alt="image.png"><br><a name="Utj5z"></a></p><h3 id="MDagPath-和-MDagPathArray"><a href="#MDagPath-和-MDagPathArray" class="headerlink" title="MDagPath 和 MDagPathArray"></a>MDagPath 和 MDagPathArray</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294577548-ccb4d943-8d92-4b42-a7cc-80dfcd04dc72.png#averageHue=%230a0a0a&clientId=ud856797a-7bad-4&from=paste&height=674&id=u90f42400&originHeight=607&originWidth=1605&originalType=binary&ratio=1&rotation=0&showTitle=false&size=222042&status=done&style=none&taskId=u4908e162-454a-4240-a318-c2e4648060e&title=&width=1783.3333805755344" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294597971-19963ec7-1a5e-4e38-a0fa-669fbd475fbe.png#averageHue=%23090808&clientId=ud856797a-7bad-4&from=paste&height=468&id=u4739d8f8&originHeight=421&originWidth=1069&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37094&status=done&style=none&taskId=u17d10d7a-1de6-423b-b8c0-24bb9f4b714&title=&width=1187.7778092431442" alt="image.png"><br><a name="UO1pS"></a></p><h3 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">selection_list = om.MGlobal.getActiveSelectionList()  <span class="comment"># 获取当前选择的对象并为其创建列表</span></span><br><span class="line">traversal_type = om.MItDag.kBreadthFirst <span class="comment"># 遍历方式为广度优先（默认是深度优先）</span></span><br><span class="line">filter_type = om.MFn.kMesh <span class="comment"># 过滤器设置，只遍历kMesh类型</span></span><br><span class="line">dag_iter = om.MItDag(traversal_type,filter_type) <span class="comment"># 创建迭代器，并指定遍历方式和遍历类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> selection_list.isEmpty():</span><br><span class="line">    </span><br><span class="line">    dag_fn = om.MFnDagNode(selection_list.getDependNode(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;Child:&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dag_fn.childCount()):</span><br><span class="line">        child_obj = dag_fn.child(i)</span><br><span class="line">        child_fn = om.MFnDagNode(child_obj)</span><br><span class="line">        <span class="comment">#print(child_fn.fullPathName())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;Parent:&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dag_fn.parentCount()):</span><br><span class="line">        parent_obj = dag_fn.parent(i)</span><br><span class="line">        parent_fn = om.MFnDagNode(parent_obj)</span><br><span class="line">        <span class="comment">#print(parent_fn.fullPathName())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果场景中有选择的物体，那么就以选择的物体为迭代起始点</span></span><br><span class="line">    dag_iter.reset(selection_list.getDependNode(<span class="number">0</span>),traversal_type,filter_type) </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> dag_iter.isDone():</span><br><span class="line">        <span class="comment"># print(dag_iter.partialPathName()) # 输出短名</span></span><br><span class="line">        <span class="comment"># print(dag_iter.fullPathName()) # 输出长名</span></span><br><span class="line">        <span class="comment"># dag_path = dag_iter.getPath() # 获取dagpath对象</span></span><br><span class="line">        <span class="comment"># print(dag_path.fullPathName()) # 输出dagpath对象的长名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代器遍历类型为kmesh，然后通过类型为kmesh的shape节点得到父节点transform的名字</span></span><br><span class="line">        shape_obj = dag_iter.currentItem()</span><br><span class="line">        dag_fn = om.MFnDagNode(shape_obj)</span><br><span class="line">        dag_fn = om.MFnDagNode(shape_obj)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dag_fn.parentCount()):</span><br><span class="line">            parent_fn = om.MFnDagNode(dag_fn.parent(i))</span><br><span class="line">            <span class="built_in">print</span>(parent_fn.fullPathName())</span><br><span class="line"></span><br><span class="line">        dag_iter.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p><a name="PhLMD"></a></p><h2 id="contexts（工具，以下所有的上下文的翻译统统理解为工具）"><a href="#contexts（工具，以下所有的上下文的翻译统统理解为工具）" class="headerlink" title="contexts（工具，以下所有的上下文的翻译统统理解为工具）"></a>contexts（工具，以下所有的上下文的翻译统统理解为工具）</h2><p><a name="dRb2V"></a></p><h3 id="什么是contexts"><a href="#什么是contexts" class="headerlink" title="什么是contexts"></a>什么是contexts</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314380302-2759dcb4-96c9-4b21-9356-2d53238597ff.png#averageHue=%230b0b0b&clientId=u7f1d3d8f-5941-4&from=paste&height=644&id=u323f8700&originHeight=580&originWidth=1516&originalType=binary&ratio=1&rotation=0&showTitle=false&size=293536&status=done&style=none&taskId=u14d47ef0-7d15-46bb-8a52-644ef70c433&title=&width=1684.4444890669847" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314393717-42515b83-5815-4197-b73f-f52b2c2db5f5.png#averageHue=%230a0908&clientId=u7f1d3d8f-5941-4&from=paste&height=459&id=uc33a7326&originHeight=413&originWidth=1193&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57581&status=done&style=none&taskId=u3cf547d7-c0b4-4678-9c6f-8a34ee1998a&title=&width=1325.5555906707866" alt="image.png"><br><a name="qWk3F"></a></p><h3 id="contexts-class"><a href="#contexts-class" class="headerlink" title="contexts class"></a>contexts class</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670320855146-146a11fe-e7a9-411e-b1d9-d58b9c330cfa.png#averageHue=%2312110f&clientId=u7f1d3d8f-5941-4&from=paste&height=79&id=u8728caa8&originHeight=71&originWidth=845&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9417&status=done&style=none&taskId=ufbbfce46-4d32-4de2-b7f7-32074698e2e&title=&width=938.8889137609511" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314506168-9e976551-b9c4-40d3-9154-05c98c1261e7.png#averageHue=%23070707&clientId=u7f1d3d8f-5941-4&from=paste&height=553&id=u536dda83&originHeight=498&originWidth=1560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130220&status=done&style=none&taskId=u1b19bdfe-5338-4feb-aa95-eef5717db4e&title=&width=1733.3333792509868" alt="image.png"><br><a name="yasrt"></a></p><h4 id="MPxContext"><a href="#MPxContext" class="headerlink" title="MPxContext"></a>MPxContext</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314566636-98b3ea1e-9d0c-4747-bb35-2218020358f4.png#averageHue=%230a0a0a&clientId=u7f1d3d8f-5941-4&from=paste&height=748&id=ud98b9990&originHeight=673&originWidth=1505&originalType=binary&ratio=1&rotation=0&showTitle=false&size=271852&status=done&style=none&taskId=uc86eae1f-512d-4354-8966-b6dab1fdb16&title=&width=1672.222266520984" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314628131-bfae171b-b57a-41c5-a45e-615dcc82baae.png#averageHue=%23090808&clientId=u7f1d3d8f-5941-4&from=paste&height=531&id=uefea2edf&originHeight=478&originWidth=944&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47400&status=done&style=none&taskId=uf3a88e84-bc4a-4608-8a60-c833daa9f4b&title=&width=1048.8889166749561" alt="image.png"><br><a name="EjDvf"></a></p><h4 id="MPxContextCommand"><a href="#MPxContextCommand" class="headerlink" title="MPxContextCommand"></a>MPxContextCommand</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314724095-6febfa93-6eea-4fc6-9105-afd449a494eb.png#averageHue=%230b0b0b&clientId=u7f1d3d8f-5941-4&from=paste&height=522&id=uf02ad2a6&originHeight=470&originWidth=1468&originalType=binary&ratio=1&rotation=0&showTitle=false&size=199346&status=done&style=none&taskId=ueac65ccb-dd00-44e2-8fd6-2d7f77603f7&title=&width=1631.1111543208003" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314741398-3373638b-1a47-4bf9-8867-5d284b8de65b.png#averageHue=%23090807&clientId=u7f1d3d8f-5941-4&from=paste&height=380&id=u18854ee7&originHeight=342&originWidth=1117&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34098&status=done&style=none&taskId=uf0c2fafe-41ed-4817-b2bc-f16806ad7f9&title=&width=1241.1111439893284" alt="image.png"><br><a name="Bg5Ad"></a></p><h4 id="MPxToolCommand"><a href="#MPxToolCommand" class="headerlink" title="MPxToolCommand"></a>MPxToolCommand</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314838409-43a977bf-405b-4c77-9730-aedb1ff303fd.png#averageHue=%230a0a0a&clientId=u7f1d3d8f-5941-4&from=paste&height=803&id=ucc5b9b9d&originHeight=723&originWidth=1596&originalType=binary&ratio=1&rotation=0&showTitle=false&size=321569&status=done&style=none&taskId=u0e8c7561-12c9-40fc-aca5-44a8e6b6c3b&title=&width=1773.333380310625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314882771-837d3d6a-b70e-4d2e-a8a9-17717a3f045a.png#averageHue=%23080707&clientId=u7f1d3d8f-5941-4&from=paste&height=631&id=u3381456a&originHeight=568&originWidth=1060&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48382&status=done&style=none&taskId=u4dd9e33c-e430-4e3f-b520-0b5d969ade2&title=&width=1177.7778089782346" alt="image.png"><br><a name="WebzE"></a></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315161425-a8ef71e2-6d09-4adb-8efe-1f147b239d59.png#averageHue=%230a0a0a&clientId=u7f1d3d8f-5941-4&from=paste&height=774&id=uea1d0fe0&originHeight=697&originWidth=1517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288780&status=done&style=none&taskId=u0358ebe1-b9eb-488c-9e69-a825fba52d6&title=&width=1685.5556002075302" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315219263-813cdfbd-9de5-4e6c-a69e-4447059f2732.png#averageHue=%23080807&clientId=u7f1d3d8f-5941-4&from=paste&height=583&id=uba1e83d3&originHeight=525&originWidth=1466&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57377&status=done&style=none&taskId=ue52ba2c5-7e30-4a13-a220-8e1f35b8355&title=&width=1628.8889320397095" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315514778-102a372c-5ec9-4310-a356-34a085abdc54.png#averageHue=%230b0b0b&clientId=u7f1d3d8f-5941-4&from=paste&height=877&id=uacd4817c&originHeight=789&originWidth=1576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=373584&status=done&style=none&taskId=u9d104a94-f5d6-4217-81a8-c5092cd5ead&title=&width=1751.1111574997149" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315560657-f135614b-2a7f-4e37-aeb6-c08ecf020f6e.png#averageHue=%23070606&clientId=u7f1d3d8f-5941-4&from=paste&height=827&id=u9b5dc5f0&originHeight=744&originWidth=1552&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90249&status=done&style=none&taskId=u1155dc37-d283-4e88-ba8a-914ffc61b0c&title=&width=1724.444490126623" alt="image.png"><br><a name="aHpYe"></a></p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p><a name="jLo8j"></a></p><h4 id="context工具模板"><a href="#context工具模板" class="headerlink" title="context工具模板"></a>context工具模板</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;Simple Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = <span class="string">&quot;&lt;insert help text here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleContext, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setTitleString(SimpleContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;template_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        self.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpSlateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.setHelpString(SimpleContext.HELP_TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOnSetup&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOffCleanup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPress</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        mouse_button = event.mouseButton()  <span class="comment"># 获取鼠标的按键</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mouse_button == omui.MEvent.kLeftMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标左键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Left mouse button pressed&quot;</span>) </span><br><span class="line">        <span class="keyword">elif</span> mouse_button == omui.MEvent.kMiddleMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标中键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Middle mouse button pressed&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse button released&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doDrag</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按住鼠标左键并进行移动时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse drag&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">completeAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下enter键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Complete action (enter/return key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下delete键或者backspace键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Delete action (backspace/delete key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abortAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下esc键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Abort action (escape key pressed)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcSimpleCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(SimpleContextCmd, self).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(SimpleContextCmd.COMMAND_NAME, SimpleContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(SimpleContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;template_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcSimpleCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="filnU"></a></p><h4 id="custom-select-工具"><a href="#custom-select-工具" class="headerlink" title="custom select 工具"></a>custom select 工具</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="comment"># 插件介绍: 使用context时按ctrl键框选只选择mesh,按ctrl+shift键时只选择light，不按只框选就全选择</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomSelectContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;Custom Select Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = <span class="string">&quot;Ctrl to select only meshes. Ctrl+Shift to select only lights.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomSelectContext, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setTitleString(CustomSelectContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;custom_select_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        self.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标</span></span><br><span class="line">        test_file_path = plugin_dir_path + <span class="string">&quot;/test_scene/custom_select_context_test.ma&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpStateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在左下角显示帮助 &quot;&quot;&quot;</span></span><br><span class="line">        self.setHelpString(CustomSelectContext.HELP_TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOnSetup&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOffCleanup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPress</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.viewport_start_pos = event.position</span><br><span class="line"></span><br><span class="line">        self.light_only = <span class="literal">False</span> <span class="comment"># 用来判断是否只选择灯光类型</span></span><br><span class="line">        self.meshes_only = <span class="literal">False</span> <span class="comment"># 用来判断是否只选择mesh类型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.isModifierControl():</span><br><span class="line">            <span class="keyword">if</span> event.isModifierShift():</span><br><span class="line">                self.light_only = <span class="literal">True</span>  <span class="comment"># 当ctrl和shift键同时按下时为True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.meshes_only = <span class="literal">True</span>  <span class="comment"># 当ctrl键按下时为True</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.viewport_end_pos = event.position</span><br><span class="line"></span><br><span class="line">        initial_selection = om.MGlobal.getActiveSelectionList() <span class="comment"># 获取场景中已经选择的对象的列表</span></span><br><span class="line"></span><br><span class="line">        om.MGlobal.selectFromScreen(self.viewport_start_pos[<span class="number">0</span>], self.viewport_start_pos[<span class="number">1</span>],</span><br><span class="line">                                    self.viewport_end_pos[<span class="number">0</span>], self.viewport_end_pos[<span class="number">1</span>],</span><br><span class="line">                                    om.MGlobal.kReplaceList) <span class="comment"># 根据矩形框选择矩形中的对象（这个命令所进行的选择不会进入undo堆栈，因此需要通过其他命令设置正常的堆栈）</span></span><br><span class="line">        </span><br><span class="line">        selection_list = om.MGlobal.getActiveSelectionList() <span class="comment"># 获取通过矩形框选中的对象的列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.light_only <span class="keyword">or</span> self.meshes_only:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(selection_list.length())):</span><br><span class="line">                obj = selection_list.getDependNode(i)</span><br><span class="line">                shape = om.MFnDagNode(obj).child(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.light_only <span class="keyword">and</span> <span class="keyword">not</span> shape.hasFn(om.MFn.kLight): <span class="comment"># 如果shape节点是light类型</span></span><br><span class="line">                    selection_list.remove(i)</span><br><span class="line">                <span class="keyword">elif</span> self.meshes_only <span class="keyword">and</span> <span class="keyword">not</span> shape.hasFn(om.MFn.kMesh): <span class="comment"># 如果shape节点是mesh类型</span></span><br><span class="line">                    selection_list.remove(i)</span><br><span class="line"></span><br><span class="line">        om.MGlobal.setActiveSelectionList(initial_selection, om.MGlobal.kReplaceList) <span class="comment"># 首先选择场景中之前已经选择的列表</span></span><br><span class="line">        om.MGlobal.selectCommand(selection_list, om.MGlobal.kReplaceList)  <span class="comment"># 通过调用内置的maya选择命令来选择，并且让maya负责维护堆栈</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doDrag</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按住鼠标左键并进行移动时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.viewport_end_pos = event.position</span><br><span class="line"></span><br><span class="line">        self.draw_selection_rectangle(draw_manager,</span><br><span class="line">                                      self.viewport_start_pos[<span class="number">0</span>],self.viewport_start_pos[<span class="number">1</span>],</span><br><span class="line">                                      self.viewport_end_pos[<span class="number">0</span>],self.viewport_start_pos[<span class="number">1</span>],</span><br><span class="line">                                      self.viewport_end_pos[<span class="number">0</span>],self.viewport_end_pos[<span class="number">1</span>],</span><br><span class="line">                                      self.viewport_start_pos[<span class="number">0</span>],self.viewport_end_pos[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_selection_rectangle</span>(<span class="params">self, draw_manager, x0, y0, x1, y1, x2, y2, x3, y3</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 根据鼠标拖拽的范围进行矩形绘制 &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable() <span class="comment"># 开始绘制</span></span><br><span class="line">        draw_manager.setLineWidth(<span class="number">1.0</span>) <span class="comment"># 设置绘制线的宽度</span></span><br><span class="line">        draw_manager.setColor(om.MColor((<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))) <span class="comment"># 设置绘制的颜色（颜色数值是一个集合）</span></span><br><span class="line"></span><br><span class="line">        draw_manager.line2d(om.MPoint(x0,y0),om.MPoint(x1,y1))</span><br><span class="line">        draw_manager.line2d(om.MPoint(x1,y1),om.MPoint(x2,y2))</span><br><span class="line">        draw_manager.line2d(om.MPoint(x2,y2),om.MPoint(x3,y3))</span><br><span class="line">        draw_manager.line2d(om.MPoint(x3,y3),om.MPoint(x0,y0))</span><br><span class="line"></span><br><span class="line">        draw_manager.endDrawable() <span class="comment"># 结束绘制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomSelectContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcCustomSelectCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(CustomSelectContextCmd, self).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> CustomSelectContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> CustomSelectContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(CustomSelectContextCmd.COMMAND_NAME, CustomSelectContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(CustomSelectContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(CustomSelectContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(CustomSelectContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;custom_select_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>)) </span><br><span class="line">    test_file_path = plugin_dir_path + <span class="string">&quot;/test_scene/custom_select_context_test.ma&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;custom_select_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(test_file_path,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcCustomSelectCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="zOgx0"></a></p><h4 id="创建骨骼工具"><a href="#创建骨骼工具" class="headerlink" title="创建骨骼工具"></a>创建骨骼工具</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JointCreateContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;JointCreate Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = [<span class="string">&quot;Select first joint location&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Select second joint location&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Select final joint location&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Press Enter to complete&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(JointCreateContext, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setTitleString(JointCreateContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;joint_create_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        self.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标</span></span><br><span class="line"></span><br><span class="line">        self.state = <span class="number">0</span> <span class="comment"># 判断通过工具选择的对象的个数</span></span><br><span class="line">        self.context_selection = om.MSelectionList() <span class="comment"># 通过工具选择的对象的列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpStateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.update_help_string()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_help_string</span>(<span class="params">self</span>):</span><br><span class="line">        self.setHelpString(JointCreateContext.HELP_TEXT[self.state])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        om.MGlobal.selectCommand(om.MSelectionList()) <span class="comment"># 确保工具刚开始使用时是一个健康的选择状态</span></span><br><span class="line">        self.reset_state()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        self.reset_state()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.state &gt;= <span class="number">0</span> <span class="keyword">and</span> self.state &lt; <span class="number">3</span>:</span><br><span class="line">            om.MGlobal.selectFromScreen(event.position[<span class="number">0</span>], event.position[<span class="number">1</span>],event.position[<span class="number">0</span>],event.position[<span class="number">1</span>],om.MGlobal.kReplaceList)</span><br><span class="line"></span><br><span class="line">            active_selection = om.MGlobal.getActiveSelectionList() <span class="comment"># 获取当前选择的物体</span></span><br><span class="line">            <span class="keyword">if</span> active_selection.length() == <span class="number">1</span>:</span><br><span class="line">                self.context_selection.merge(active_selection) <span class="comment"># 使用merge方法防止重复的对象出现在context_selection中</span></span><br><span class="line"></span><br><span class="line">            om.MGlobal.setActiveSelectionList(self.context_selection) <span class="comment"># 更改当前选择的物体</span></span><br><span class="line"></span><br><span class="line">            self.update_state</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">completeAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下enter键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        selection_count = self.context_selection.length()</span><br><span class="line">        <span class="keyword">if</span> selection_count == <span class="number">3</span>:</span><br><span class="line">            om.MGlobal.setActiveSelectionList(om.MSelectionList())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(selection_count):</span><br><span class="line">                transform_fn = om.MFnTransform(self.context_selection.getDependNode(i))</span><br><span class="line"></span><br><span class="line">                cmds.joint(position = transform_fn.translation(om.MSpace.kTransform))</span><br><span class="line">                cmds.delete(transform_fn.name())</span><br><span class="line">            </span><br><span class="line">            cmds.select(clear=<span class="literal">True</span>)</span><br><span class="line">            self.reset_state()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;Three objects must be selected&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下delete键或者backspace键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        selection_count = self.context_selection.length()</span><br><span class="line">        <span class="keyword">if</span> selection_count &gt; <span class="number">0</span>:</span><br><span class="line">            self.context_selection.remove(selection_count - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            om.MGlobal.setActiveSelectionList(self.context_selection)</span><br><span class="line"></span><br><span class="line">            self.update_state()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abortAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下esc键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.reset_state()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 更新状态 &quot;&quot;&quot;</span></span><br><span class="line">        self.state = self.context_selection.length()</span><br><span class="line"></span><br><span class="line">        self.update_help_string()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重置状态 &quot;&quot;&quot;</span></span><br><span class="line">        om.MGlobal.setActiveSelectionList(om.MSelectionList())</span><br><span class="line"></span><br><span class="line">        self.context_selection.clear()</span><br><span class="line">        self.update_state</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JointCreateContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcJointCreateCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(JointCreateContextCmd, self).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> JointCreateContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> JointCreateContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(JointCreateContextCmd.COMMAND_NAME, JointCreateContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(JointCreateContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(JointCreateContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(JointCreateContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line">    plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;joint_create_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>)) </span><br><span class="line">    test_file_path = plugin_dir_path + <span class="string">&quot;/test_scene/joint_create_context_test.ma&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;joint_create_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(test_file_path,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcJointCreateCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="nmCaZ"></a></p><h4 id="各种绘制举例"><a href="#各种绘制举例" class="headerlink" title="各种绘制举例"></a>各种绘制举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;Simple Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = <span class="string">&quot;&lt;insert help text here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleContext, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setTitleString(SimpleContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;draw_persistence_example_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        self.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpStateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.setHelpString(SimpleContext.HELP_TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOnSetup&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOffCleanup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPress</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        mouse_button = event.mouseButton()  <span class="comment"># 获取鼠标的按键</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mouse_button == omui.MEvent.kLeftMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标左键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Left mouse button pressed&quot;</span>) </span><br><span class="line">        <span class="keyword">elif</span> mouse_button == omui.MEvent.kMiddleMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标中键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Middle mouse button pressed&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse button released&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doDrag</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按住鼠标左键并进行移动时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse drag&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">completeAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下enter键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Complete action (enter/return key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下delete键或者backspace键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Delete action (backspace/delete key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abortAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下esc键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Abort action (escape key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPtrMoved</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当鼠标移动并且没有按下鼠标按钮时执行 &quot;&quot;&quot;</span></span><br><span class="line">        self.position = om.MPoint(event.position)</span><br><span class="line">        <span class="comment"># self.draw_circle(event, draw_manager)</span></span><br><span class="line">        self.draw_info(draw_manager, frame_context)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drawFeedback</span>(<span class="params">self, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 无论执行什么操作都会始终执行绘制 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># self.draw_sphere(draw_manager)</span></span><br><span class="line">        <span class="comment"># self.draw_info(draw_manager, frame_context) # 在这个函数中执行绘制text有显示的bug，不推荐使用</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">self, event, draw_manager</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在鼠标指针的位置处绘制圆形 &quot;&quot;&quot;</span></span><br><span class="line">        center = om.MPoint(event.position)</span><br><span class="line">        radius = <span class="number">20</span></span><br><span class="line">        </span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.circle2d(center, radius, <span class="literal">True</span>)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_sphere</span>(<span class="params">self, draw_manager</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在坐标原点绘制一个半径为5cm的圆球 &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.sphere(om.MPoint(<span class="number">0</span>,<span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_info</span>(<span class="params">self, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在视口左上角绘制文字信息 &quot;&quot;&quot;</span></span><br><span class="line">        viewport_height = frame_context.getViewportDimensions()[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        info_position = om.MPoint(<span class="number">20</span>, viewport_height - <span class="number">20</span>)</span><br><span class="line">        text = <span class="string">&quot;Mouse pos: &#123;0&#125;, &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.position.x, self.position.y)</span><br><span class="line"></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.text2d(info_position, text)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcSimpleCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(SimpleContextCmd, self).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(SimpleContextCmd.COMMAND_NAME, SimpleContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(SimpleContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;draw_persistence_example_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcSimpleCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="y0TKk"></a></p><h1 id="第三卷"><a href="#第三卷" class="headerlink" title="第三卷"></a>第三卷</h1><p><a name="mPC43"></a></p><h2 id="Locators（可参考HelloWorldNode）"><a href="#Locators（可参考HelloWorldNode）" class="headerlink" title="Locators（可参考HelloWorldNode）"></a>Locators（可参考HelloWorldNode）</h2><p><a name="L8NWI"></a></p><h3 id="MPxLocatorNode"><a href="#MPxLocatorNode" class="headerlink" title="MPxLocatorNode"></a>MPxLocatorNode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670824784593-b4e2aa98-d50f-45e4-abea-b3f7a774eece.png#averageHue=%230b0b0b&clientId=u0fb33782-733b-4&from=paste&height=562&id=u38288abb&originHeight=506&originWidth=1113&originalType=binary&ratio=1&rotation=0&showTitle=false&size=141834&status=done&style=none&taskId=u297df3fd-7477-4bdf-9932-2e82aad8e03&title=&width=1236.6666994271463" alt="image.png"><br><a name="t7d3P"></a></p><h3 id="MPxDrawOverride（VP2-0）"><a href="#MPxDrawOverride（VP2-0）" class="headerlink" title="MPxDrawOverride（VP2.0）"></a>MPxDrawOverride（VP2.0）</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670824823422-3d2a2cad-30cd-4e17-963c-2128659f31cb.png#averageHue=%230b0b0b&clientId=u0fb33782-733b-4&from=paste&height=532&id=u11b5804e&originHeight=479&originWidth=1509&originalType=binary&ratio=1&rotation=0&showTitle=false&size=197495&status=done&style=none&taskId=u6f2950a7-2835-4757-bed7-59ba1cbfff1&title=&width=1676.666711083166" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670824872793-3e8e184c-6dc4-4370-bfc6-8eccc2aafa5b.png#averageHue=%230c0b0a&clientId=u0fb33782-733b-4&from=paste&height=328&id=uacb92293&originHeight=295&originWidth=1042&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33544&status=done&style=none&taskId=u0bc92d29-62bd-46dc-84d6-27e74402a71&title=&width=1157.7778084484155" alt="image.png"><br><a name="xbGCL"></a></p><h3 id="代码举例-1"><a href="#代码举例-1" class="headerlink" title="代码举例"></a>代码举例</h3><p><a name="z2Xy5"></a></p><h4 id="创建带形状变形器，通过更改序号改变定位器的形状"><a href="#创建带形状变形器，通过更改序号改变定位器的形状" class="headerlink" title="创建带形状变形器，通过更改序号改变定位器的形状"></a>创建带形状变形器，通过更改序号改变定位器的形状</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928053999-00cb576f-99ea-468c-b2a7-064038a8aafe.png#averageHue=%23545353&clientId=uaca77ae3-2815-4&from=paste&height=719&id=uc070a55d&originHeight=647&originWidth=1214&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35937&status=done&style=none&taskId=ue639a515-b28b-4461-a1ba-db5b1dc486c&title=&width=1348.8889246222423" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928061330-bde1870c-6966-4420-b47b-7e98ece72314.png#averageHue=%23535353&clientId=uaca77ae3-2815-4&from=paste&height=590&id=uc5b9d692&originHeight=531&originWidth=1203&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26767&status=done&style=none&taskId=u0dfebbe0-bd33-4164-9f7f-6277ed2cf7a&title=&width=1336.6667020762418" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaRender <span class="keyword">as</span> omr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLocatorNode</span>(omui.MPxLocatorNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;simplelocator&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FE</span>)</span><br><span class="line">    DRAW_CLASSIFICATION = <span class="string">&quot;drawdb/geometry/simplelocator&quot;</span></span><br><span class="line">    DRAW_REGISTRANT_ID = <span class="string">&quot;SimpleLocatorNode&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleLocatorNode, self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> SimpleLocatorNode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">        cls.shape_index_obj = numeric_attr.create(<span class="string">&quot;shapeIndex&quot;</span>, <span class="string">&quot;si&quot;</span>, om.MFnNumericData.kInt, <span class="number">0</span>)</span><br><span class="line">        numeric_attr.setMin(<span class="number">0</span>)</span><br><span class="line">        numeric_attr.setMax(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.shape_index_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLocatorUserData</span>(om.MUserData):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 创建MUserData类使其对象能够将数据在prepareForDraw与addUIDrawables之间相互传递  &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self, deleteAfterUse = <span class="literal">False</span></span>):  <span class="comment"># 设置为使用数据后不删除数据</span></span><br><span class="line">        <span class="built_in">super</span>(SimpleLocatorUserData, self).__init__(deleteAfterUse)</span><br><span class="line"></span><br><span class="line">        self.shape_index = <span class="number">0</span></span><br><span class="line">        self.wireframe_color = om.MColor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>))  <span class="comment"># 线框颜色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLocatorDrawOverride</span>(omr.MPxDrawOverride):</span><br><span class="line">    NAME = <span class="string">&quot;SimpleLocatorDrawOverride&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleLocatorDrawOverride, self).__init__(obj, <span class="literal">None</span>, <span class="literal">True</span>)  <span class="comment"># 第一个参数是maya object,第二个参数是绘制是callback函数,第三个参数是默认为True,为True时将会将此标志位dirty状态，因此可以持续更新,建议为True,除非遇到了性能问题可以为False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">supportedDrawAPIs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> omr.MRenderer.kAllDevices</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasUIDrawables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepareForDraw</span>(<span class="params">self, obj_path, camera_path, frame_context, old_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在使用绘制图形的方法之前,使用这个方法来将数据检索与缓存 &quot;&quot;&quot;</span></span><br><span class="line">        data = old_data</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            data = SimpleLocatorUserData()</span><br><span class="line"></span><br><span class="line">        locator_obj = obj_path.node()</span><br><span class="line">        node_fn = om.MFnDependencyNode(locator_obj)</span><br><span class="line"></span><br><span class="line">        data.shape_index = node_fn.findPlug(<span class="string">&quot;shapeIndex&quot;</span>, <span class="literal">False</span>).asInt()</span><br><span class="line"></span><br><span class="line">        display_status = omr.MGeometryUtilities.displayStatus(obj_path)</span><br><span class="line">        <span class="keyword">if</span> display_status == omr.MGeometryUtilities.kDormant:  </span><br><span class="line">            data.wireframe_color = om.MColor((<span class="number">0.0</span>, <span class="number">0.1</span>, <span class="number">0.0</span>)) <span class="comment"># 当节点处于未选中状态时设置颜色为深绿色</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data.wireframe_color = omr.MGeometryUtilities.wireframeColor(obj_path)  <span class="comment"># 其他状态按照maya的标准来设置线框颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addUIDrawables</span>(<span class="params">self, obj_path, draw_manager, frame_context, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 绘制图形的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            obj_path (_type_): 指向正在绘制的对象的路径,这里是指locator节点</span></span><br><span class="line"><span class="string">            draw_manager (_type_): 用于绘制简单的几何图形</span></span><br><span class="line"><span class="string">            frame_context (_type_): 包含当前渲染框架的一些全局信息</span></span><br><span class="line"><span class="string">            data (_type_): 用户创建的数据对象,存储缓存数据,类型为MUserDataObject</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line"></span><br><span class="line">        draw_manager.setColor(data.wireframe_color)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data.shape_index == <span class="number">0</span>: <span class="comment"># 绘制圆形</span></span><br><span class="line">            draw_manager.circle(om.MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), om.MVector(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>), <span class="number">1</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> data.shape_index == <span class="number">1</span>: <span class="comment"># 绘制矩形</span></span><br><span class="line">            draw_manager.rect(om.MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), om.MVector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>), om.MVector(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>), <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> data.shape_index == <span class="number">2</span>: <span class="comment"># 绘制三角形</span></span><br><span class="line">            point_array = om.MPointArray([(-<span class="number">1.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>), (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>),(<span class="number">1.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>),(-<span class="number">1.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>)])</span><br><span class="line">            draw_manager.lineStrip(point_array, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> SimpleLocatorDrawOverride(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(SimpleLocatorNode.TYPE_NAME,</span><br><span class="line">                               SimpleLocatorNode.TYPE_ID,</span><br><span class="line">                               SimpleLocatorNode.creator,</span><br><span class="line">                               SimpleLocatorNode.initialize,</span><br><span class="line">                               om.MPxNode.kLocatorNode,</span><br><span class="line">   SimpleLocatorNode.DRAW_CLASSIFICATION)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.registerDrawOverrideCreator(SimpleLocatorNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                      SimpleLocatorNode.DRAW_REGISTRANT_ID,</span><br><span class="line">                                                      SimpleLocatorDrawOverride.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.deregisterDrawOverrideCreator(SimpleLocatorNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                        SimpleLocatorNode.DRAW_REGISTRANT_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(SimpleLocatorNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;simple_locator_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;simplelocator&quot;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ANATJ"></a></p><h4 id="测量两个网格体的距离的定位器"><a href="#测量两个网格体的距离的定位器" class="headerlink" title="测量两个网格体的距离的定位器"></a>测量两个网格体的距离的定位器</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928161742-d22eb865-d937-45aa-9c8a-2e3abdf0886d.png#averageHue=%235c5c5c&clientId=uaca77ae3-2815-4&from=paste&height=352&id=u10c1c9ed&originHeight=317&originWidth=743&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9114&status=done&style=none&taskId=u9189b8ad-021b-4a51-be13-9a89b8cf206&title=&width=825.5555774253097" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928211727-341226e9-16d0-4861-9ca7-9c2b4fdf4444.png#averageHue=%23403f3f&clientId=uaca77ae3-2815-4&from=paste&height=349&id=u45f8f19c&originHeight=314&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27137&status=done&style=none&taskId=ua5d7643a-88f6-4aa3-9bc2-a3527437368&title=&width=766.6666869763981" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 不适用于2018及以下版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaRender <span class="keyword">as</span> omr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistanceBetweenLocator</span>(omui.MPxLocatorNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;distanceBetweenLocator&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FD</span>)</span><br><span class="line">    DRAW_CLASSIFICATION = <span class="string">&quot;drawdb/geometry/distancebetweenlocator&quot;</span></span><br><span class="line">    DRAW_REGISTRANT_ID = <span class="string">&quot;DistanceBetweenLocator&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    point1_obj = <span class="literal">None</span></span><br><span class="line">    point2_obj = <span class="literal">None</span></span><br><span class="line">    distance_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DistanceBetweenLocator, self).__init__()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, data</span>):</span><br><span class="line">        point1 = om.MPoint(data.inputValue(self.point1_obj).asFloatVector()) <span class="comment"># 得到MPoint对象</span></span><br><span class="line">        point2 = om.MPoint(data.inputValue(self.point2_obj).asFloatVector())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        distance = point1.distanceTo(point2) <span class="comment"># 使用MPoint的计算距离的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.outputValue(self.distance_obj).setDouble(distance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.setClean(plug) <span class="comment"># 使plug变成干净的状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="built_in">classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> DistanceBetweenLocator()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="built_in">classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.point1_obj = numeric_attr.createPoint(<span class="string">&quot;point1&quot;</span>, <span class="string">&quot;p1&quot;</span>)</span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.point2_obj = numeric_attr.createPoint(<span class="string">&quot;point2&quot;</span>, <span class="string">&quot;p2&quot;</span>)</span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.distance_obj = numeric_attr.create(<span class="string">&quot;distance&quot;</span>, <span class="string">&quot;dist&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.writable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.point1_obj)</span><br><span class="line">        cls.addAttribute(cls.point2_obj)</span><br><span class="line">        cls.addAttribute(cls.distance_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.attributeAffects(cls.point1_obj, cls.distance_obj)</span><br><span class="line">        cls.attributeAffects(cls.point2_obj, cls.distance_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistanceBetweenUserData</span>(om.MUserData):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self, deleteAfterUse = <span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(DistanceBetweenUserData, self).__init__(deleteAfterUse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.distance = <span class="number">0</span></span><br><span class="line">        self.point1 = om.MPoint()</span><br><span class="line">        self.point2 = om.MPoint()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistanceBetweenDrawOverride</span>(omr.MPxDrawOverride):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 负责在视口中绘制几何图形 &quot;&quot;&quot;</span></span><br><span class="line">    NAME = <span class="string">&quot;DistanceBetweenDrawOverride&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>(DistanceBetweenDrawOverride, self).__init__(obj, <span class="literal">None</span>, <span class="literal">False</span>) <span class="comment"># 第一个参数是maya object,第二个参数是绘制是callback函数,第三个参数是默认为True,为True时将会将此标志位dirty状态，因此可以持续更新,建议为True,除非遇到了性能问题可以为False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refineSelectionPath</span>(<span class="params">self, select_info, hit_item, path, components, obj_mask</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重新定义选择，使绘制的几何图形不能够被选中 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">supportedDrawAPIs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 让maya知道支持哪个图形api,kAllDevices指的是使用OpenGL and Direct X 11&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> omr.MRenderer.kAllDevices</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasUIDrawables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 表示使用addUIDrawables方法来绘制图形 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepareForDraw</span>(<span class="params">self, obj_path, camera_path, frame_context, old_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在使用绘制图形的方法之前,使用这个方法来将数据检索与缓存 &quot;&quot;&quot;</span></span><br><span class="line">        data = old_data</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            data = DistanceBetweenUserData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        node_fn = om.MFnDependencyNode(obj_path.node())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.point1 = om.MPoint(node_fn.findPlug(<span class="string">&quot;point1X&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point1Y&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point1Z&quot;</span>, <span class="literal">False</span>).asDouble())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.point2 = om.MPoint(node_fn.findPlug(<span class="string">&quot;point2X&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point2Y&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point2Z&quot;</span>, <span class="literal">False</span>).asDouble())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.distance = node_fn.findPlug(<span class="string">&quot;distance&quot;</span>, <span class="literal">False</span>).asDouble()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addUIDrawables</span>(<span class="params">self, obj_path, draw_manager, frame_context, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 绘制图形的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            obj_path (_type_): 指向正在绘制的对象的路径,这里是指locator节点</span></span><br><span class="line"><span class="string">            draw_manager (_type_): 用于绘制简单的几何图形</span></span><br><span class="line"><span class="string">            frame_context (_type_): 包含当前渲染框架的一些全局信息</span></span><br><span class="line"><span class="string">            data (_type_): 用户创建的数据对象,存储缓存数据</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        </span><br><span class="line">        draw_manager.setFontSize(<span class="number">14</span>)</span><br><span class="line">        draw_manager.setFontWeight(<span class="number">100</span>)</span><br><span class="line">        draw_manager.setColor(om.MColor((<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pos = om.MPoint((om.MVector(data.point1) + om.MVector(data.point2))/<span class="number">2.0</span>) <span class="comment"># 得到两点之间的重点</span></span><br><span class="line">        text = <span class="string">&quot;&#123;0:.3f&#125;&quot;</span>.<span class="built_in">format</span>(data.distance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        draw_manager.text(pos, text, omr.MUIDrawManager.kCenter)</span><br><span class="line">        draw_manager.line(data.point1,data.point2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="built_in">classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> DistanceBetweenDrawOverride(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(DistanceBetweenLocator.TYPE_NAME,</span><br><span class="line">                               DistanceBetweenLocator.TYPE_ID,</span><br><span class="line">                               DistanceBetweenLocator.creator,</span><br><span class="line">                               DistanceBetweenLocator.initialize,</span><br><span class="line">                               om.MPxNode.kLocatorNode,</span><br><span class="line">                               DistanceBetweenLocator.DRAW_CLASSIFICATION)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenLocator.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.registerDrawOverrideCreator(DistanceBetweenLocator.DRAW_CLASSIFICATION,</span><br><span class="line">                                                      DistanceBetweenLocator.DRAW_REGISTRANT_ID,</span><br><span class="line">                                                      DistanceBetweenDrawOverride.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.deregisterDrawOverrideCreator(DistanceBetweenLocator.DRAW_CLASSIFICATION,</span><br><span class="line">                                                        DistanceBetweenLocator.DRAW_REGISTRANT_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(DistanceBetweenLocator.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenLocator.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc_distance_between_test</span>():</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;persp.translate&quot;</span>, <span class="number">3.5</span>, <span class="number">5.5</span>, <span class="number">10.0</span>)</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;persp.rotate&quot;</span>, -<span class="number">27.0</span>, <span class="number">19.0</span>, <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cube1 = cmds.polyCube()[<span class="number">0</span>]</span><br><span class="line">    cube2 = cmds.polyCube()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.setAttr(<span class="string">&quot;&#123;0&#125;.translateX&quot;</span>.<span class="built_in">format</span>(cube1), -<span class="number">2.5</span>)</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;&#123;0&#125;.translateX&quot;</span>.<span class="built_in">format</span>(cube2), <span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    distance_locator = cmds.createNode(<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenLocator.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.connectAttr(<span class="string">&quot;&#123;0&#125;.translate&quot;</span>.<span class="built_in">format</span>(cube1),<span class="string">&quot;&#123;0&#125;.point1&quot;</span>.<span class="built_in">format</span>(distance_locator))</span><br><span class="line">    cmds.connectAttr(<span class="string">&quot;&#123;0&#125;.translate&quot;</span>.<span class="built_in">format</span>(cube2),<span class="string">&quot;&#123;0&#125;.point2&quot;</span>.<span class="built_in">format</span>(distance_locator))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.select(distance_locator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;distance_between_locator.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;rc_distance_between_test()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="bhu4x"></a></p><h3 id="设置自定义变形器节点在大纲处的图标以及节点编辑器中的图标"><a href="#设置自定义变形器节点在大纲处的图标以及节点编辑器中的图标" class="headerlink" title="设置自定义变形器节点在大纲处的图标以及节点编辑器中的图标"></a>设置自定义变形器节点在大纲处的图标以及节点编辑器中的图标</h3><p>默认图标：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670915721160-2897f85d-23d1-4da0-b908-073f4a498ad3.png#averageHue=%234a4947&clientId=uaca77ae3-2815-4&from=paste&height=224&id=u00e4ba98&originHeight=202&originWidth=435&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44175&status=done&style=none&taskId=u5efe4482-dfd4-46b5-b713-a5709e88b68&title=&width=483.3333461372944" alt="image.png"><br />设置自定义图标：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670915626186-0dedd648-4117-4033-996f-d3cfebeaa7d8.png#averageHue=%23f4f0f0&clientId=uaca77ae3-2815-4&from=paste&height=309&id=u55d6291d&originHeight=278&originWidth=2056&originalType=binary&ratio=1&rotation=0&showTitle=false&size=146769&status=done&style=none&taskId=u430907cc-fccc-4cdb-8475-9e8c16155a4&title=&width=2284.444504961557" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670915685735-9cbb3ab8-60ee-425f-aaee-64bd6043d88a.png#averageHue=%23373636&clientId=uaca77ae3-2815-4&from=paste&height=586&id=ue61cf00e&originHeight=527&originWidth=1561&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134322&status=done&style=none&taskId=u941b3c90-01ba-41f8-852b-0fe57b00d77&title=&width=1734.4444903915323" alt="image.png"></p><p><a name="ICWzV"></a></p><h3 id="自定义节点属性编辑器的排列模板"><a href="#自定义节点属性编辑器的排列模板" class="headerlink" title="自定义节点属性编辑器的排列模板"></a>自定义节点属性编辑器的排列模板</h3><p>名字格式： AE + 节点名字 + Template<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670998413353-26d9a2c7-905a-41a8-8014-f8856a348242.png#averageHue=%23fcfbfb&clientId=uaca77ae3-2815-4&from=paste&height=160&id=u7cf72e1c&originHeight=144&originWidth=841&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10569&status=done&style=none&taskId=udaaeb6d3-9808-4518-94f7-a4de82fc5ed&title=&width=934.4444691987692" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671002285775-651ec0d7-129b-498e-8b3d-73b7059bb024.png#averageHue=%23413f3f&clientId=uaca77ae3-2815-4&from=paste&height=910&id=uedf888c6&originHeight=819&originWidth=2682&originalType=binary&ratio=1&rotation=0&showTitle=false&size=197038&status=done&style=none&taskId=ua342705b-c5da-4f06-ab25-1d2ed2f6eb9&title=&width=2980.000078943043" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// distanceBetweenLocator节点在属性编辑器中的模板</span><br><span class="line">// 在mel中不需要在意缩进，这里的缩进只是为了排版更好看而已</span><br><span class="line"><span class="keyword">global</span> proc AEdistanceBetweenLocatorTemplate(string $nodeName)</span><br><span class="line">&#123;</span><br><span class="line">    editorTemplate -beginScrollLayout;</span><br><span class="line">        </span><br><span class="line">        editorTemplate -beginLayout <span class="string">&quot;Distance Between Attributes&quot;</span> -collapse <span class="number">0</span>; //collapse 意思是展开，不折叠</span><br><span class="line"></span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;point1&quot;</span>;</span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;point2&quot;</span>;</span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;minDistance&quot;</span>;</span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;maxDistance&quot;</span>;</span><br><span class="line"></span><br><span class="line">            AEaddRampControl($nodeName + <span class="string">&quot;.colorRamp&quot;</span>);</span><br><span class="line">            AEaddRampControl($nodeName + <span class="string">&quot;.curveRamp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        editorTemplate -endLayout;</span><br><span class="line"></span><br><span class="line">    editorTemplate -addExtraControls;</span><br><span class="line">    editorTemplate -endScrollLayout;</span><br><span class="line">&#125;</span><br><span class="line">// 刷新属性编辑器，便于快速看到代码改变带来的影响</span><br><span class="line">refreshEditorTemplates; </span><br></pre></td></tr></table></figure><p><a name="GS9oN"></a></p><h2 id="如何将单一功能的插件组合起来"><a href="#如何将单一功能的插件组合起来" class="headerlink" title="如何将单一功能的插件组合起来"></a>如何将单一功能的插件组合起来</h2><p>之前的教程写插件都是写一个节点，命令，工具，但是一个插件功能往往包含这几个而不是单一的。因此这节课讲如何将它们组合起来。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671002908082-7d4cacc1-e487-44ba-a7ae-efa738c0738c.png#averageHue=%234e4d4d&clientId=uaca77ae3-2815-4&from=paste&height=589&id=u572c52c2&originHeight=530&originWidth=1056&originalType=binary&ratio=1&rotation=0&showTitle=false&size=258887&status=done&style=none&taskId=uf636dc9d-f8a2-44cd-a42e-cc119c2e58d&title=&width=1173.3333644160525" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671003972925-52e4ee7b-8749-49f0-a5c4-adf90b440a2a.png#averageHue=%232f2c29&clientId=uaca77ae3-2815-4&from=paste&height=783&id=u57719ee8&originHeight=705&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=223814&status=done&style=none&taskId=u04d1646a-4660-41f1-b5e9-e78ae8f70e4&title=&width=668.8889066083937" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671004010290-e78014d7-5d18-4628-9c7c-5bcb91bddfcf.png#averageHue=%23212121&clientId=uaca77ae3-2815-4&from=paste&height=1046&id=ua9ae1ad0&originHeight=941&originWidth=1536&originalType=binary&ratio=1&rotation=0&showTitle=false&size=727699&status=done&style=none&taskId=u5f75e573-ad72-446a-996c-86981f697d1&title=&width=1706.6667118778946" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671004083035-035c41b0-5c84-4647-a8a4-f3caf7bc457d.png#averageHue=%23302d2a&clientId=uaca77ae3-2815-4&from=paste&height=487&id=uec481016&originHeight=438&originWidth=1467&originalType=binary&ratio=1&rotation=0&showTitle=false&size=313778&status=done&style=none&taskId=u289682d5-d3e7-4138-a0d0-3e070a43529&title=&width=1630.0000431802548" alt="image.png"><br><a name="Z0mEb"></a></p><h2 id="如何将文件功能分成多个文件使其更方便管理"><a href="#如何将文件功能分成多个文件使其更方便管理" class="headerlink" title="如何将文件功能分成多个文件使其更方便管理"></a>如何将文件功能分成多个文件使其更方便管理</h2><p><a href="https://www.bilibili.com/video/BV1ye4y1r7Yv?p=22&vd_source=b1de3fe38e887eb40fc55a5485724480">21_multifile_plugins_part1_哔哩哔哩_bilibili</a></p><p><a name="NaikZ"></a></p><h2 id="maya-modules"><a href="#maya-modules" class="headerlink" title="maya_modules"></a>maya_modules</h2><p>maya的module是一种共享多文件插件的方法<br><a name="KygeB"></a></p><h3 id="简单的插件管理方式"><a href="#简单的插件管理方式" class="headerlink" title="简单的插件管理方式"></a>简单的插件管理方式</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085566693-242de11c-b079-407b-9ad9-b5629e1f57b7.png#averageHue=%23090909&clientId=uc9db9e09-998d-4&from=paste&height=474&id=u10ec219a&originHeight=999&originWidth=2302&originalType=binary&ratio=1&rotation=0&showTitle=false&size=446960&status=done&style=none&taskId=u14d3c7bc-c9b8-440e-a906-3239120e487&title=&width=1091.77783203125" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085583642-e0336d04-41a2-4b39-86d4-5e935f755935.png#averageHue=%230a0a09&clientId=uc9db9e09-998d-4&from=paste&height=566&id=ua342f8b0&originHeight=960&originWidth=1313&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74945&status=done&style=none&taskId=u51d14b57-8c0c-4c1e-a609-cc750826055&title=&width=773.885498046875" alt="image.png"><br><a name="LqOTk"></a></p><h3 id="maya-moudules的介绍"><a href="#maya-moudules的介绍" class="headerlink" title="maya moudules的介绍"></a>maya moudules的介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085676299-c57674c6-1f6f-4ee5-bcc2-60bd6e0a6fb0.png#averageHue=%230b0b0b&clientId=uc9db9e09-998d-4&from=paste&height=705&id=u5180ec1e&originHeight=1209&originWidth=2391&originalType=binary&ratio=1&rotation=0&showTitle=false&size=773548&status=done&style=none&taskId=uff00fa39-30b7-45ff-8814-4fb583a9506&title=&width=1393.666748046875" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085698913-02ec178c-e03e-497d-a604-646e22f7edaa.png#averageHue=%23070706&clientId=uc9db9e09-998d-4&from=paste&height=499&id=uf3e91b3f&originHeight=992&originWidth=2166&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107701&status=done&style=none&taskId=uf1ae4133-dc3a-49d9-b7ee-c0c722fb84a&title=&width=1089.6597900390625" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085897512-879e9245-c9c2-4791-94ce-b97e769f6dea.png#averageHue=%23070707&clientId=uc9db9e09-998d-4&from=paste&height=546&id=ubbe1b506&originHeight=1160&originWidth=2317&originalType=binary&ratio=1&rotation=0&showTitle=false&size=501083&status=done&style=none&taskId=u51a1f977-673d-4d3a-8e2e-16257618636&title=&width=1090.4410400390625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085945440-91ba49c0-e5cc-4915-9a7c-0f8ec2202152.png#averageHue=%23060505&clientId=uc9db9e09-998d-4&from=paste&height=544&id=uc781249b&originHeight=490&originWidth=623&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29185&status=done&style=none&taskId=ud20ce58b-f589-4c12-8bbe-b547c32c8fa&title=&width=692.2222405598492" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086048276-89436e5a-f14e-4519-92c2-a82765897eef.png#averageHue=%23090909&clientId=uc9db9e09-998d-4&from=paste&height=614&id=u51148265&originHeight=1105&originWidth=2370&originalType=binary&ratio=1&rotation=0&showTitle=false&size=632215&status=done&style=none&taskId=ub78af419-6f55-40f7-9388-0486ff38c2c&title=&width=1317.33349609375" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086097304-6d550613-068b-4541-9834-6b6a98e53b59.png#averageHue=%23100e0d&clientId=uc9db9e09-998d-4&from=paste&height=72&id=u65a6db8a&originHeight=65&originWidth=1018&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12774&status=done&style=none&taskId=u13033f6e-a119-483f-8afa-1f1c19ccce7&title=&width=1131.1111410753235" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086196037-6f4c580e-9d75-4d11-8bfa-74c19b3eaee4.png#averageHue=%23080808&clientId=uc9db9e09-998d-4&from=paste&height=509&id=u78836d3d&originHeight=957&originWidth=2394&originalType=binary&ratio=1&rotation=0&showTitle=false&size=491507&status=done&style=none&taskId=u7fffcc80-71f5-49fd-ae0c-1d322634ce6&title=&width=1274.000244140625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086210447-0fb7c8df-8a81-42d0-b2b9-9a1837e43ae5.png#averageHue=%23100f0d&clientId=uc9db9e09-998d-4&from=paste&height=91&id=uc3b16ff9&originHeight=82&originWidth=1103&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14596&status=done&style=none&taskId=u29092a1d-5a81-46ef-b3f9-cc91b458fcb&title=&width=1225.5555880216914" alt="image.png"><br><a name="xPeit"></a></p><h3 id="使用创建moudules的步骤举例"><a href="#使用创建moudules的步骤举例" class="headerlink" title="使用创建moudules的步骤举例"></a>使用创建moudules的步骤举例</h3><p><a name="Wywr1"></a></p><h4 id="一个工具的所需内容放到一个文件夹里，在这个文件夹下创建一个mod文件"><a href="#一个工具的所需内容放到一个文件夹里，在这个文件夹下创建一个mod文件" class="headerlink" title="一个工具的所需内容放到一个文件夹里，在这个文件夹下创建一个mod文件"></a>一个工具的所需内容放到一个文件夹里，在这个文件夹下创建一个mod文件</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086906525-ecf3a55b-7fb2-45f8-970e-74b5a0e78433.png#averageHue=%23f6f0ee&clientId=uc9db9e09-998d-4&from=paste&height=258&id=u4b1ffb67&originHeight=232&originWidth=498&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40431&status=done&style=none&taskId=u9ceb672d-5a22-4b0b-83ba-a0792fe994f&title=&width=553.3333479916612" alt="image.png"></p><p><a name="CEzh9"></a></p><h4 id="mod文件夹下添加这个工具"><a href="#mod文件夹下添加这个工具" class="headerlink" title="mod文件夹下添加这个工具"></a>mod文件夹下添加这个工具</h4><p>最后的.&#x2F;是相对路径<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087583273-798c1a11-2f9a-4962-b7f4-64d87267d22f.png#averageHue=%231c1c1b&clientId=uc9db9e09-998d-4&from=paste&height=130&id=udbd71950&originHeight=117&originWidth=426&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22000&status=done&style=none&taskId=u3fd26225-2368-4abe-a127-880bb47af8b&title=&width=473.3333458723849" alt="image.png"></p><p><a name="HHsqn"></a></p><h4 id="在maya-env文件下添加mod："><a href="#在maya-env文件下添加mod：" class="headerlink" title="在maya.env文件下添加mod："></a>在maya.env文件下添加mod：</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087574805-d58f52d1-d084-47ae-9b85-13f2c55c7582.png#averageHue=%23fbfaf9&clientId=uc9db9e09-998d-4&from=paste&height=341&id=u16c56c7c&originHeight=307&originWidth=998&originalType=binary&ratio=1&rotation=0&showTitle=false&size=113257&status=done&style=none&taskId=u31848ebf-4e7b-411a-8224-e8cbbcac93e&title=&width=1108.8889182644134" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087635395-42e2c798-9bc5-4375-a4e2-607c9f3a01b4.png#averageHue=%232a2625&clientId=uc9db9e09-998d-4&from=paste&height=286&id=u2a3ea13a&originHeight=257&originWidth=1176&originalType=binary&ratio=1&rotation=0&showTitle=false&size=163738&status=done&style=none&taskId=u64e5efb4-58b1-4f8f-8899-18ca8aaae3f&title=&width=1306.666701281513" alt="image.png"><br><a name="eq346"></a></p><h4 id="检查工作"><a href="#检查工作" class="headerlink" title="检查工作"></a>检查工作</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087702883-c89e5cb5-b753-4e3a-a0b8-7b846180b311.png#averageHue=%232a2a2a&clientId=uc9db9e09-998d-4&from=paste&height=194&id=u97c8351c&originHeight=175&originWidth=886&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63681&status=done&style=none&taskId=u3904e6b9-7b09-488c-a7f5-7032e9edb68&title=&width=984.4444705233169" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087721464-4de9fa78-8fde-4dd4-8ecd-041f13c2e409.png#averageHue=%23747470&clientId=uc9db9e09-998d-4&from=paste&height=230&id=udf99d51b&originHeight=207&originWidth=262&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46299&status=done&style=none&taskId=ue653480e-135e-44db-b10b-b1a737c00b5&title=&width=291.11111882292215" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> MayaPy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPythonAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command的使用</title>
      <link href="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Command%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Command%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />视频地址：[https://www.bilibili.com/video/BV1zz411b7tk/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480](https://www.bilibili.com/video/BV1zz411b7tk/?spm_id_from=333.788&vd_source=b1de3fe38e887eb40fc55a5485724480)<br />ppt：[commadn.pptx](https://www.yuque.com/attachments/yuque/0/2022/pptx/2623605/1668496289369-5d1784db-b184-40e0-a5a9-3663ece40931.pptx?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2022%2Fpptx%2F2623605%2F1668496289369-5d1784db-b184-40e0-a5a9-3663ece40931.pptx%22%2C%22name%22%3A%22commadn.pptx%22%2C%22size%22%3A371572%2C%22type%22%3A%22application%2Fvnd.openxmlformats-officedocument.presentationml.presentation%22%2C%22ext%22%3A%22pptx%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22mode%22%3A%22title%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22uf9b6b58e-5d9a-4ba0-8743-e3e1d8200d5%22%2C%22taskType%22%3A%22upload%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uc3be219a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D)<a name="dQrPr"></a># 说明如果这里有些命令不清楚的就用help 或者 /? 来获取命令的帮助<a name="kGmTA"></a># Python or CMD![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668496330700-afff5ad0-6df2-4f8f-a32c-726db3df45e8.png#averageHue=%23222222&clientId=ua2bf7b75-6c38-4&from=paste&height=490&id=uc3feca9a&originHeight=441&originWidth=722&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130187&status=done&style=none&taskId=uc1a9250b-127d-4bda-8bb2-4ea49ad5330&title=&width=802.2222434738542)<a name="EhSub"></a># 常用的cmd命令<a name="MP4hR"></a>## 要背诵的![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668496625128-87c2cfdc-9da5-458f-8134-a4e1dd13a3d6.png#averageHue=%23171717&clientId=ua2bf7b75-6c38-4&from=paste&height=1091&id=u3bdff79c&originHeight=982&originWidth=1435&originalType=binary&ratio=1&rotation=0&showTitle=false&size=244830&status=done&style=none&taskId=ub9ad18df-263a-4da5-b0ce-ba65b6bcea3&title=&width=1594.4444866827987)<br />echo %variable% 是回显这个变量的值<a name="vAZjw"></a>## 特殊符号![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668497685179-48577e14-5d64-4061-9938-240d58dd5635.png#averageHue=%23181818&clientId=ua2bf7b75-6c38-4&from=paste&height=1212&id=u27b4ff35&originHeight=1091&originWidth=1606&originalType=binary&ratio=1&rotation=0&showTitle=false&size=370891&status=done&style=none&taskId=u89d571b8-d744-4cd7-9128-fd09920930f&title=&width=1784.44449171608)<a name="qpcJJ"></a>### 管道符号  |这里意思是将通过tasklist得到的任务列表再进行findstr操作，因此管道符号的就是针对一个命令的输出结果进行操作时能用到的。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668570785309-643f29e7-e84f-4920-a320-7673c369e951.png#averageHue=%23131313&clientId=u4d39f4d7-ddba-4&from=paste&height=97&id=udbfcf8ce&originHeight=87&originWidth=793&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28842&status=done&style=none&taskId=u48f9aee5-cd0c-4c06-bfac-887c6ee3c08&title=&width=881.111134452585)<a name="joWUH"></a>## >重定向覆盖与>>重定向追加覆盖与追加区别就是将文本信息一个是覆盖原来的信息，一个是在原来信息的基础上添加新的信息。<br />将命令输出的信息输出到一个文件上。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668503949930-58e9e259-14ca-49c5-93db-b2b1445ad314.png#averageHue=%231a1a1a&clientId=ua2bf7b75-6c38-4&from=paste&height=32&id=u9a968091&originHeight=29&originWidth=446&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1052&status=done&style=none&taskId=u7e79d22e-2479-4dc0-b01c-c9bba692cc0&title=&width=495.55556868329495)<br />D:\ZhangRuiChen\pythonProject>dir /s /b *.py >D:\py.txt<a name="Eqx64"></a>## 文件目录![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668500756541-343eabd6-d9bc-40b1-b3e3-796bbf41b0c5.png#averageHue=%23171717&clientId=ua2bf7b75-6c38-4&from=paste&height=887&id=u54dcd2d0&originHeight=798&originWidth=1598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=236794&status=done&style=none&taskId=u7c648c65-670c-4994-a7cb-e22e785c971&title=&width=1775.555602591716)<a name="dp1KR"></a>### cd的使用介绍：当需要切换盘符时需要加 /d 命令<br />更改当前目录为D盘是第一行行，从D盘进入WallPaper是第二行<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668501427188-ce095ff3-a140-40a3-a141-5b4620e361cf.png#averageHue=%23141414&clientId=ua2bf7b75-6c38-4&from=paste&height=143&id=u5d5fa4bb&originHeight=129&originWidth=306&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2360&status=done&style=none&taskId=u6393e0b2-9a25-4a3b-8140-7c623973dff&title=&width=340)<br />.是当前目录， ..是上一级目录<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668501666103-ec79d1f5-164f-410e-b1ec-3fdf071cb5bd.png#averageHue=%23141414&clientId=ua2bf7b75-6c38-4&from=paste&height=101&id=u714696d3&originHeight=91&originWidth=161&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1140&status=done&style=none&taskId=u617738c1-11e9-4fba-bbbc-f97904b5ce9&title=&width=178.8888936278262)<a name="RwMdd"></a>### dir的使用介绍直接dir 是显示当前目录下的所有目录与文件<br />dir + 目录路径 是显示目录路径下的所有目录与文件<br />dir /s + 目录路径 是显示目录路径以及目录路径的子目录下的所有目录与文件<br />dir *.mel  显示当前路径下的以mel结尾的文件（不能够配合指定目录路径，必须先前往目录路径再使用关键字匹配，但是可以配合 /s 匹配子目录的）<br />dir /b 只显示文件名<a name="dn5yA"></a>## 文件操作![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506172041-afca6967-771d-455d-8c1e-103c99a8c074.png#averageHue=%231a1a1a&clientId=ua2bf7b75-6c38-4&from=paste&height=543&id=u50fc07dc&originHeight=489&originWidth=994&originalType=binary&ratio=1&rotation=0&showTitle=false&size=173700&status=done&style=none&taskId=u9963378b-d4ad-455e-a9ec-26c411fbe1c&title=&width=1104.4444737022313)<a name="cWOaC"></a>## 文件拷贝三种文件拷贝的区别：如果文件比较大比较碎的建议使用Robocopy（功能最复杂，最快，支持多线程）<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506191536-a4e8f0f1-726c-4550-9fab-980f64d38469.png#averageHue=%231c1c1c&clientId=ua2bf7b75-6c38-4&from=paste&height=623&id=uc762dc91&originHeight=561&originWidth=817&originalType=binary&ratio=1&rotation=0&showTitle=false&size=165097&status=done&style=none&taskId=ue5b86c14-14c3-43fd-b66a-ccc13cb4f42&title=&width=907.7778018256771)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506206249-a5187f92-fc02-49cb-88c9-62c6fdd0802e.png#averageHue=%231c1c1c&clientId=ua2bf7b75-6c38-4&from=paste&height=602&id=u0ce4a1b7&originHeight=542&originWidth=764&originalType=binary&ratio=1&rotation=0&showTitle=false&size=158159&status=done&style=none&taskId=u1779bcce-f052-42ba-a7dd-b599d76dc2c&title=&width=848.8889113767653)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506217113-1db72379-782e-4449-aa8a-d7643088c551.png#averageHue=%231b1b1b&clientId=ua2bf7b75-6c38-4&from=paste&height=473&id=u25d95ef9&originHeight=426&originWidth=853&originalType=binary&ratio=1&rotation=0&showTitle=false&size=149937&status=done&style=none&taskId=uecafe28b-3a1b-40ec-ac51-bbce73fe683&title=&width=947.7778028853153)<a name="i9nUw"></a>## 文件查找![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1668565921370-accfd197-5762-4936-9f54-6388dca9640e.png#averageHue=%231a1a1a&clientId=u4d39f4d7-ddba-4&from=paste&height=708&id=u5fc9c08b&originHeight=637&originWidth=1005&originalType=binary&ratio=1&rotation=0&showTitle=false&size=255609&status=done&style=none&taskId=uaf0fde54-9824-45f2-a6d9-3931030771f&title=&width=1116.6666962482318)<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668565953638-1c21a468-eda5-4edd-bb06-42dddaf8861f.png#averageHue=%231a1a1a&clientId=u4d39f4d7-ddba-4&from=paste&height=508&id=u1bb8b57b&originHeight=457&originWidth=1020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=152534&status=done&style=none&taskId=u05a8fccc-06de-43bc-a686-7378da06446&title=&width=1133.3333633564146" alt="image.png"><br><a name="E7a0N"></a></p><h2 id="文件校验"><a href="#文件校验" class="headerlink" title="文件校验"></a>文件校验</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668566875308-ec59414f-7ce7-4df4-a633-f0b08f93b5b7.png#averageHue=%23191919&clientId=u4d39f4d7-ddba-4&from=paste&height=279&id=u35c235ec&originHeight=251&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46657&status=done&style=none&taskId=ub3b949a0-2a02-4d68-ad49-54310865a97&title=&width=574.4444596620258" alt="image.png"><br><a name="iKQu2"></a></p><h2 id="文本查找"><a href="#文本查找" class="headerlink" title="文本查找"></a>文本查找</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668567693774-d23dbb2d-be53-4dd9-8d49-983d32de1a2e.png#averageHue=%23191919&clientId=u4d39f4d7-ddba-4&from=paste&height=480&id=u2bcef2c7&originHeight=432&originWidth=667&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91224&status=done&style=none&taskId=u46cc4d34-ef49-4cd2-b3e9-3ea9ab57607&title=&width=741.1111307438514" alt="image.png"><br><a name="peOuj"></a></p><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668567986805-b22dfba9-02ac-4277-9a27-a97e6c3f02ba.png#averageHue=%231e1e1e&clientId=u4d39f4d7-ddba-4&from=paste&height=262&id=u963c34d5&originHeight=236&originWidth=408&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45836&status=done&style=none&taskId=ubcb13fc1-417e-4d0a-bc0e-fe4727a7b8a&title=&width=453.3333453425658" alt="image.png"><br />timeout 的 延时意思是倒计时，类似于python的sleep<br><a name="eSw7T"></a></p><h2 id="目录映射"><a href="#目录映射" class="headerlink" title="目录映射"></a>目录映射</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668568266315-d32f7a5b-5d26-48e9-bd3e-300ba208e4bb.png#averageHue=%231d1d1d&clientId=u4d39f4d7-ddba-4&from=paste&height=457&id=uaac80e38&originHeight=411&originWidth=398&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86434&status=done&style=none&taskId=u3a7c0b1c-023b-4abf-9629-b9b261b5adb&title=&width=442.22223393711073" alt="image.png"><br />目录映射可以理解为他们两者是相同的，只是文件路径不同，不管针对哪一个进行了处理也会同时的对另一个自动进行处理。<br><a name="YR2IS"></a></p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668570415739-f56d75e5-6e20-4024-9a8c-de522c5ab25b.png#averageHue=%231e1e1e&clientId=u4d39f4d7-ddba-4&from=paste&height=398&id=u04b912bb&originHeight=358&originWidth=725&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107590&status=done&style=none&taskId=ud4117774-0ae8-4700-adba-db2164f9e7c&title=&width=805.5555768954906" alt="image.png"><br />sc针对的是服务，例如arnold redshift<br><a name="PK5JP"></a></p><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575064779-9b9ce2f0-0afd-4bb3-9370-5702d101764f.png#averageHue=%231e1e1e&clientId=u4d39f4d7-ddba-4&from=paste&height=456&id=ue8b7b08c&originHeight=410&originWidth=855&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121971&status=done&style=none&taskId=u48781caa-631c-420f-a5f7-1b51972762f&title=&width=950.0000251664062" alt="image.png"><br />ping ： 可以用来测试进入网站<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668571484686-3008c270-7dbe-490a-a118-fb470dfd6609.png#averageHue=%23202020&clientId=u4d39f4d7-ddba-4&from=paste&height=226&id=ub27f42c1&originHeight=203&originWidth=536&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9250&status=done&style=none&taskId=u06657149-95bb-47df-8704-e8d0bec30cf&title=&width=595.5555713323904" alt="image.png"><br />ipconfig ： ipconfig &#x2F;all 可以用来查看网络相关的所有配置<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575393564-24b8bcc0-dd1f-40f4-ad50-5b816683d212.png#averageHue=%232e2e2e&clientId=u4d39f4d7-ddba-4&from=paste&height=72&id=ua66c6335&originHeight=65&originWidth=859&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35442&status=done&style=none&taskId=u0187cc67-ae45-4ad0-b63b-54913af556e&title=&width=954.4444697285883" alt="image.png">这个意思是网络连接另一台电脑（叫服务器吧），服务器的 ipv4为192.168.225.128  密码为nuke  账户名为winroot_ltsc。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575645597-fdedca08-6a3a-48a4-b852-f8c18c3acdc1.png#averageHue=%23313131&clientId=u4d39f4d7-ddba-4&from=paste&height=60&id=u16d378be&originHeight=54&originWidth=659&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26655&status=done&style=none&taskId=u2a168119-41ec-4f8b-a98b-b8d93c4d408&title=&width=732.2222416194874" alt="image.png"> 通过这个命令在当前电脑下创建一个B盘，连接ip为192.168.225.128 名字叫share的B盘符<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575771508-f2aaa038-b0ec-4945-a23e-d35ec8de0aad.png#averageHue=%235b5b5a&clientId=u4d39f4d7-ddba-4&from=paste&height=106&id=u52acd4fc&originHeight=95&originWidth=345&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25126&status=done&style=none&taskId=u3dc83f7c-587f-413a-a2c6-16cddb49881&title=&width=383.33334348819903" alt="image.png">，这样可以通过这个盘符来访问服务器上所共享的文件夹。<br />net share ：查询当前电脑所共享的所有文件夹<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575892615-6499941c-4a57-4b8e-b715-f32609947310.png#averageHue=%232f2f2f&clientId=u4d39f4d7-ddba-4&from=paste&height=62&id=u08248bc3&originHeight=56&originWidth=279&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12439&status=done&style=none&taskId=uc68f8574-69fa-40cf-998e-a516fa6d7e1&title=&width=310.0000082121957" alt="image.png"> 意思是删除本地电脑使用的所有创建的网络共享的盘符，*可以改为指定的盘符，例如 B:<br><a name="wNqhW"></a></p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576164212-656e4353-db1c-4737-998c-cce8b2dac262.png#averageHue=%23191919&clientId=u4d39f4d7-ddba-4&from=paste&height=511&id=u324baf21&originHeight=460&originWidth=1076&originalType=binary&ratio=1&rotation=0&showTitle=false&size=144981&status=done&style=none&taskId=u23426397-9cd1-4339-83da-81691481337&title=&width=1195.5555872269626" alt="image.png"><br />&#x2F;r 是重启  &#x2F;s 是关机  &#x2F;t是时间（以秒为单位） &#x2F;a 是取消计划中的关机<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576554479-6d9b4e2e-e3a3-4fcd-8e60-d3c1381e3a14.png#averageHue=%23272727&clientId=u4d39f4d7-ddba-4&from=paste&height=58&id=u2d59188d&originHeight=52&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38528&status=done&style=none&taskId=u264ab18b-e4f9-41e1-9922-bf0cd36fa49&title=&width=1188.8889203836898" alt="image.png"> &#x2F;c的意思是注释  这句的意思就是60秒后强制将ip为192.168.225.128的电脑关机，并显示注释为shutdown<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576715815-4c4ef5a5-e28f-4418-b770-08e06bbb528c.png#averageHue=%230e69aa&clientId=u4d39f4d7-ddba-4&from=paste&height=160&id=uf5dc45b0&originHeight=144&originWidth=597&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27584&status=done&style=none&taskId=uc3599caf-1b2a-4d23-8240-0942211e7d9&title=&width=663.3333509056661" alt="image.png"><br><a name="kskgn"></a></p><h2 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576881549-ba2f1388-f26a-4215-9fa4-783a92471265.png#averageHue=%231b1b1b&clientId=u4d39f4d7-ddba-4&from=paste&height=680&id=u8118936b&originHeight=612&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&size=278538&status=done&style=none&taskId=uabf70961-6b36-4a93-8857-d9bdd136098&title=&width=1188.8889203836898" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668577559360-f1c691a2-5c92-4aac-bfae-bb97bf3f0118.png#averageHue=%231d1d1d&clientId=u4d39f4d7-ddba-4&from=paste&height=229&id=u805fdb4b&originHeight=206&originWidth=1864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=152853&status=done&style=none&taskId=u740b34f2-513a-4b2c-8baf-ded71624acb&title=&width=2071.1111659768203" alt="image.png"><br />wmic cpu get name  获取当前电脑cpu的名字<br />wmic memorychip 获取当前电脑内存的所有信息<br />wmic memorychip list &#x2F;format 获取当前电脑内存的所有信息并且格式化显示这些信息<br />wmic memorychip get speed 获取内存的频率（speed可以更换任意一项可以查询的信息）<br><a name="AFxUz"></a></p><h2 id="变量设置"><a href="#变量设置" class="headerlink" title="变量设置"></a>变量设置</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668577734694-575aad3a-708a-4fa1-b6f8-dd1baea9a50c.png#averageHue=%23171717&clientId=u4d39f4d7-ddba-4&from=paste&height=416&id=udab5572e&originHeight=374&originWidth=595&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56345&status=done&style=none&taskId=u3aa75c04-a6b7-497f-8e72-3c12e09e01c&title=&width=661.1111286245751" alt="image.png"><br />&#x2F;a的作用：set &#x2F;a a&#x3D;1-2+5-6  最终a为-2       set a&#x3D;1-2+5-6 最终a为1-2+5-6 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668578665609-43bd983f-a3a6-47c6-bf35-fd64e086c234.png#averageHue=%23444444&clientId=u4d39f4d7-ddba-4&from=paste&height=57&id=u06ef5606&originHeight=51&originWidth=473&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16858&status=done&style=none&taskId=u4ac2c978-ff7a-449d-a9ce-f6d5e0a7f66&title=&width=525.5555694780236" alt="image.png">  意思是将avr变量的str1替换成str2<br><a name="qqILh"></a></p><h2 id="字符截取"><a href="#字符截取" class="headerlink" title="字符截取"></a>字符截取</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668579282409-ba5c1a51-1f3b-4b34-9b7d-92fa05f546fd.png#averageHue=%231a1a1a&clientId=u4d39f4d7-ddba-4&from=paste&height=566&id=u30850402&originHeight=509&originWidth=721&originalType=binary&ratio=1&rotation=0&showTitle=false&size=170890&status=done&style=none&taskId=uc14dc1bb-9249-46ce-802f-eca7aaf9c59&title=&width=801.1111323333087" alt="image.png"><br><a name="U17zZ"></a></p><h2 id="batch（-bat批处理文件）的参数"><a href="#batch（-bat批处理文件）的参数" class="headerlink" title="batch（.bat批处理文件）的参数"></a>batch（.bat批处理文件）的参数</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668579401768-cb7a54a4-82bd-4749-a7d9-26592f1d9996.png#averageHue=%231e1e1e&clientId=u4d39f4d7-ddba-4&from=paste&height=218&id=eier7&originHeight=196&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54253&status=done&style=none&taskId=u4a70ea43-89b5-4707-b294-3827752f15a&title=&width=586.6666822080263" alt="image.png"><br />写一个.bat文件，.bat文件是批处理文件，里面是一行行的cmd命令。 可以通过set %~1-9来接受 启动bat文件时传递的参数。<br />调用.bat文件：将.bat文件拖入到cmd窗口上，然后 可以输入需要的参数，然后回车调用<br><a name="JNEaX"></a></p><h3 id="字符扩充"><a href="#字符扩充" class="headerlink" title="字符扩充"></a>字符扩充</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668592149372-7b70b739-ec59-4364-90c8-6308843c78b1.png#averageHue=%231e1e1e&clientId=u4d39f4d7-ddba-4&from=paste&height=650&id=u64524934&originHeight=585&originWidth=2176&originalType=binary&ratio=1&rotation=0&showTitle=false&size=468681&status=done&style=none&taskId=uca3bd98e-e6c8-419a-9129-77f09cb52fb&title=&width=2417.7778418270177" alt="image.png"><br />字符扩充意思就是  例如<br />set n1&#x3D;%1 意思就是输入的第一个参数赋予变量n1<br />set n1&#x3D;%~1 意思是输入的第一个参数删除引号(“)后再赋予变量n1<br />针对这些输入的参数也能够进行扩充，来更改输入的参数。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668592158645-e74c816b-e9d3-432b-a268-369a8f9d9678.png#averageHue=%231e1e1e&clientId=u4d39f4d7-ddba-4&from=paste&height=291&id=ua609b3a3&originHeight=262&originWidth=190&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6970&status=done&style=none&taskId=u929d214c-3b3e-43a2-bbfe-af9e6e9d76e&title=&width=211.11111670364582" alt="image.png"><br><a name="OWjhZ"></a></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668652771934-1916702c-3162-4108-9235-ff5606f940e1.png#averageHue=%231a1817&clientId=uad50874a-6552-4&from=paste&height=244&id=ua45569be&originHeight=220&originWidth=464&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14208&status=done&style=none&taskId=u5fbf6804-ab5a-47ef-89ee-82cb1e0230b&title=&width=515.555569213114" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668651841033-8d9d05bd-7bf1-40e3-90a0-1a52d39790bc.png#averageHue=%23171717&clientId=uad50874a-6552-4&from=paste&height=914&id=u0bcde779&originHeight=823&originWidth=1211&originalType=binary&ratio=1&rotation=0&showTitle=false&size=213497&status=done&style=none&taskId=ub73dc7d1-1126-4158-82d6-db9b9bb9942&title=&width=1345.5555912006057" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668651697370-cbd785cc-203a-4f82-a57c-411be633342b.png#averageHue=%23161616&clientId=uad50874a-6552-4&from=paste&height=978&id=u354979ab&originHeight=880&originWidth=1598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=252711&status=done&style=none&taskId=u0a628938-f86d-4495-8738-a49e8bb3735&title=&width=1775.555602591716" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668652007862-465f82d6-64a5-4a09-ae1e-b58b72cf885a.png#averageHue=%231b1b1b&clientId=uad50874a-6552-4&from=paste&height=956&id=u3c57fee5&originHeight=860&originWidth=1267&originalType=binary&ratio=1&rotation=0&showTitle=false&size=352465&status=done&style=none&taskId=ua21fad9e-36f3-4a55-9dfe-4840110b059&title=&width=1407.777815071154" alt="image.png"></p><p><a name="NN85W"></a></p><h1 id="同一个目录下的贴图转成tx或rsbintex"><a href="#同一个目录下的贴图转成tx或rsbintex" class="headerlink" title="同一个目录下的贴图转成tx或rsbintex"></a>同一个目录下的贴图转成tx或rsbintex</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off </span></span><br><span class="line">title texture to tile</span><br><span class="line"><span class="built_in">set</span> /p texture_path=  要转换的贴图目录：</span><br><span class="line">echo 要转换的贴图目录为%texture_path%</span><br><span class="line">cd /d %texture_path%</span><br><span class="line"><span class="built_in">set</span> /p renderer=     选择渲染器类型Arnold输入ar，redshift输入rs:</span><br><span class="line">echo 渲染器为%renderer%</span><br><span class="line"><span class="keyword">if</span> %renderer%==ar goto arnold</span><br><span class="line"><span class="keyword">if</span> %renderer%==rs goto redshift</span><br><span class="line">:arnold</span><br><span class="line"><span class="keyword">for</span> %%f <span class="keyword">in</span> (*) do (</span><br><span class="line">echo %%f的后缀为%%~xf</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.rstexbin&quot;</span> (echo %%f </span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.tx&quot;</span> ( echo %%f </span><br><span class="line">) <span class="keyword">else</span> (echo 这个贴图要转换 &amp;&amp; <span class="string">&quot;C:\solidangle\mtoadeploy\2018\bin\maketx.exe&quot;</span> -v -u  %%f)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">goto end</span><br><span class="line"></span><br><span class="line">:redshift</span><br><span class="line"><span class="keyword">for</span> %%f <span class="keyword">in</span> (*) do (</span><br><span class="line">echo %%f的后缀为%%~xf</span><br><span class="line">REM <span class="keyword">if</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.rstexbin&quot;</span> (echo %%f </span><br><span class="line">REM ) <span class="keyword">else</span> (</span><br><span class="line">REM <span class="keyword">if</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.tx&quot;</span> ( echo %%f </span><br><span class="line">REM ) <span class="keyword">else</span> (echo 这个贴图要转换 &amp;&amp; C:\ProgramData\Redshift\<span class="built_in">bin</span>\redshiftTextureProcessor.exe <span class="string">&quot;%%f&quot;</span>)</span><br><span class="line">REM )</span><br><span class="line">REM )</span><br><span class="line"><span class="keyword">if</span> /i <span class="keyword">not</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.rstexbin&quot;</span> (</span><br><span class="line"><span class="keyword">if</span> /i <span class="keyword">not</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.tx&quot;</span> (</span><br><span class="line">echo 这个贴图要转换 &amp;&amp; C:\ProgramData\Redshift\<span class="built_in">bin</span>\redshiftTextureProcessor.exe <span class="string">&quot;%%f&quot;</span></span><br><span class="line">) <span class="keyword">else</span> (echo 这个贴图不转换 %%f)</span><br><span class="line">)<span class="keyword">else</span> (echo 这个贴图不转换 %%f)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">goto end</span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line">echo 转换完了。</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="h4yaF"></a></p><h1 id="根据不同项目启动不同maya"><a href="#根据不同项目启动不同maya" class="headerlink" title="根据不同项目启动不同maya"></a>根据不同项目启动不同maya</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off </span></span><br><span class="line">choice /C <span class="number">1234</span> /T <span class="number">15</span> /D <span class="number">3</span> /M <span class="string">&quot;1、那托  2、大圣你走开   3、青蛇前源  4、流浪月球&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">4</span> goto llyq</span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">3</span> goto qsqy</span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">2</span> goto dsnzk</span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">1</span> goto natuo</span><br><span class="line"></span><br><span class="line">:llyq</span><br><span class="line">echo 流浪月球</span><br><span class="line">echo maya <span class="number">2017</span> </span><br><span class="line"><span class="built_in">set</span> maya_v=<span class="number">2017</span></span><br><span class="line">echo arnold <span class="number">2.1</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">copy /v/y <span class="string">&quot;D:\plugins\maya\arnold\maya2017_mtoa2.1.0.2\mtoa.mod&quot;</span> <span class="string">&quot;C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\2017\mtoa.mod&quot;</span></span><br><span class="line">goto <span class="built_in">open</span></span><br><span class="line">:qsqy</span><br><span class="line">echo 青蛇前源</span><br><span class="line">echo maya <span class="number">2017</span></span><br><span class="line"><span class="built_in">set</span> maya_v=<span class="number">2017</span></span><br><span class="line">echo arnold <span class="number">3.2</span><span class="number">.1</span></span><br><span class="line">xcopy /q /y /v  <span class="string">&quot;D:\plugins\maya\arnold\maya2017_mtoa3.2.1\mtoa.mod&quot;</span>  <span class="string">&quot;C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\2017\&quot;</span></span><br><span class="line"><span class="string">goto open</span></span><br><span class="line"><span class="string">:dsnzk</span></span><br><span class="line"><span class="string">echo 大圣你走开</span></span><br><span class="line"><span class="string">echo maya 2018 </span></span><br><span class="line"><span class="string">set maya_v=2018</span></span><br><span class="line"><span class="string">echo arnold 2.1.0.2</span></span><br><span class="line"><span class="string">robocopy  &quot;</span>D:\plugins\maya\arnold\maya2018_mtoa2<span class="number">.1</span><span class="number">.0</span><span class="number">.2</span><span class="string">&quot; &quot;</span>C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\<span class="number">2018</span><span class="string">&quot; &quot;</span>mtoa.mod<span class="string">&quot; /S /NDL /NFL   </span></span><br><span class="line"><span class="string">goto open</span></span><br><span class="line"><span class="string">:natuo</span></span><br><span class="line"><span class="string">echo 那托</span></span><br><span class="line"><span class="string">echo maya 2018</span></span><br><span class="line"><span class="string">set maya_v=2018</span></span><br><span class="line"><span class="string">echo arnold 3.2.1.1</span></span><br><span class="line"><span class="string">&quot;</span>D:\Program Files\FastCopy385_x64\FastCopy.exe<span class="string">&quot; /cmd=move /speed=full /force_close /no_confirm_stop /force_start &quot;</span>D:\plugins\maya\arnold\maya2018_mtoa3<span class="number">.2</span><span class="number">.1</span><span class="number">.1</span>\mtoa.mod<span class="string">&quot; /to=&quot;</span>C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\<span class="number">2018</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">goto open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:open</span></span><br><span class="line"><span class="string">echo %maya_v%</span></span><br><span class="line"><span class="string">set root_maya=&quot;</span>C:\Program Files\Autodesk\Maya%maya_v%\<span class="built_in">bin</span>\maya.exe<span class="string">&quot;</span></span><br><span class="line"><span class="string">echo %root_maya% </span></span><br><span class="line"><span class="string">start &quot;</span><span class="string">&quot; %root_maya%</span></span><br><span class="line"><span class="string">pause</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机知识与其他开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Git/"/>
      <url>/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Git/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="VwMGb"></a># 安装去官网下载，然后无脑下一步<a name="PJY3l"></a># 注册账号进入 Git Bash<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669040621480-d85eb128-78ab-4c88-b36c-806b2ac97685.png#averageHue=%23242423&clientId=u10eb3d9e-7294-4&from=paste&height=164&id=ue0e8ebb4&originHeight=164&originWidth=274&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7854&status=done&style=none&taskId=u5b39029c-ffb9-4796-8698-b2c197f6b0d&title=&width=274)<br />输入用户名 邮箱来注册，框住的内容为自定义<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669040650975-6616584c-2a11-47c3-a81e-41f7310291e5.png#averageHue=%23030302&clientId=u10eb3d9e-7294-4&from=paste&height=367&id=u7e3c761b&originHeight=367&originWidth=719&originalType=binary&ratio=1&rotation=0&showTitle=false&size=129387&status=done&style=none&taskId=ue36240d8-9535-4c6d-8809-dc4d80d3539&title=&width=719)<a name="lED8v"></a># 获取git版本库<a name="Zpcaq"></a>## 将本地的文件夹变成git版本库在想要变成git版本库的文件夹下右键使用git bash![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041397312-587a89eb-d6ca-4d32-844d-ea041090b575.png#averageHue=%23e9e9e9&clientId=u10eb3d9e-7294-4&from=paste&height=402&id=u4b3f9cb6&originHeight=402&originWidth=458&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23186&status=done&style=none&taskId=ub039647d-eeb6-4a63-93f8-76ce6bb49df&title=&width=458)<br />输入命令  git init<br />带有.git的就代表这个文件夹已经是git版本库了<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041441689-733f517d-1308-4a94-baaf-96509ea4656f.png#averageHue=%23fcfbf9&clientId=u10eb3d9e-7294-4&from=paste&height=228&id=u3b89c54e&originHeight=228&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17856&status=done&style=none&taskId=ub551a34a-d94e-4554-86c4-cf5ad5cf163&title=&width=523)<a name="c0OsB"></a>## 将其他人的git库克隆到本地使用git clone命令<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041841250-14dce49d-f465-4ed9-b64b-1922aa8c9a97.png#averageHue=%23161815&clientId=u10eb3d9e-7294-4&from=paste&height=50&id=ue65dcb27&originHeight=50&originWidth=1152&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59161&status=done&style=none&taskId=u881382c4-4162-4476-85ee-29f7d2f9d75&title=&width=1152)<br />右边的地址可以通过github中找到<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041868693-698b9c68-78e6-4274-bc8f-4474e8a33dc9.png#averageHue=%23ddbd7b&clientId=u10eb3d9e-7294-4&from=paste&height=399&id=u566bc653&originHeight=399&originWidth=442&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27469&status=done&style=none&taskId=u4f00f38e-b805-4e1c-8baa-54e404ac044&title=&width=442)<br />因此可以将自己的代码上传到github，这样之后在任何地方都可以通过这个地址将git库安装过来<a name="vsjLV"></a># git仓库的三种状态以及对应工作区<a name="QPcJv"></a>## 三种状态![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042292284-e01fba27-6085-43d0-8605-d975cd495f37.png#averageHue=%233d3d3d&clientId=u10eb3d9e-7294-4&from=paste&height=279&id=u919397af&originHeight=279&originWidth=551&originalType=binary&ratio=1&rotation=0&showTitle=false&size=157445&status=done&style=none&taskId=u072f1028-0599-4d9f-bcf7-f0551492fc6&title=&width=551)<a name="CkWKT"></a>## 对应工作区![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042272485-adace1b3-77fd-4c64-ac95-f11fb0e0f8f9.png#averageHue=%23393939&clientId=u10eb3d9e-7294-4&from=paste&height=485&id=ua4691269&originHeight=485&originWidth=1361&originalType=binary&ratio=1&rotation=0&showTitle=false&size=695792&status=done&style=none&taskId=u7ebfb571-be9b-4ec6-8074-be801f86b19&title=&width=1361)<a name="JgEFb"></a># 查看版本库的状态（使用git时第一个要用的命令）git status 用于查看当前版本库的状态<br />git status -short  或者是 git status -s 是以简单信息的形式查看版本库状态<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042876861-4b2e071d-5fe3-4da5-ac5d-e0a6c05073df.png#averageHue=%230b0705&clientId=u10eb3d9e-7294-4&from=paste&height=119&id=uf1f9713b&originHeight=119&originWidth=160&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4404&status=done&style=none&taskId=ua825efc3-27ca-4386-9bbb-6e135084316&title=&width=160)<br />使用git status -s 出现的信息中各符号代表的含义：<br />空格也有含义，含义是表示当前文件在暂存区的状态<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042950720-5b048eae-d58c-4f48-b79c-75b9b59c9879.png#averageHue=%23464640&clientId=u10eb3d9e-7294-4&from=paste&height=196&id=udf58f32e&originHeight=196&originWidth=216&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40012&status=done&style=none&taskId=u34380527-6c0e-4872-8663-50ceaf2b4e0&title=&width=216)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042862405-1ae074ea-aba7-4641-9942-4cd4aead9e5c.png#averageHue=%23b9b9b9&clientId=u10eb3d9e-7294-4&from=paste&height=735&id=ue16ca3a4&originHeight=735&originWidth=1568&originalType=binary&ratio=1&rotation=0&showTitle=false&size=395006&status=done&style=none&taskId=u35cdee9b-6bf7-4f85-80cf-184d27485c7&title=&width=1568)<a name="PiP9u"></a># 文件的追踪和更新<p>git add 文件名或者文件夹名（如果文件名或者目录名里带有空格，就需要将名字用双引号包含住）<br />添加当前目录： git add .  (点来代表当前目录，添加当前目录不会添加空文件夹，如果想要添加空文件夹需要在文件夹下随便创建一个空的文件)<br />git add除了可以用它来开始追踪新的文件或者把已经追踪的文件放到暂存区，还能用于合并时把有冲突的文件，标记为已解决状态等。<br><a name="dCNen"></a></p><h2 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h2><p>git commit -m “这里填写更新信息”</p><p>使用git commit的话会自动跳出填写日志信息的编辑器，默认是vim编辑器。如果使用git commit -m 就不会弹出编辑器<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669044499302-80ef4cfd-b27d-46c5-a904-97604d9c91c1.png#averageHue=%23302b2a&clientId=u10eb3d9e-7294-4&from=paste&height=471&id=ua8e01e07&originHeight=471&originWidth=1369&originalType=binary&ratio=1&rotation=0&showTitle=false&size=172925&status=done&style=none&taskId=u4c0654ba-5f18-4338-a2d6-734b1d2e334&title=&width=1369" alt="image.png"><br><a name="VBTc8"></a></p><h1 id="历史版本追踪与文件忽略"><a href="#历史版本追踪与文件忽略" class="headerlink" title="历史版本追踪与文件忽略"></a>历史版本追踪与文件忽略</h1><p><a name="N7dZH"></a></p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>git log 会按照提交的时间列出所有的更新，最新的更新会排在最上面，按回车键进行翻页，按q键可以退出查看<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669046034315-c4e587d9-7bcb-43e6-8419-10823b86c375.png#averageHue=%236c643b&clientId=u10eb3d9e-7294-4&from=paste&height=531&id=u48d4d0d1&originHeight=531&originWidth=859&originalType=binary&ratio=1&rotation=0&showTitle=false&size=335691&status=done&style=none&taskId=uaabc464e-271a-4dd1-8773-59d36a9f36e&title=&width=859" alt="image.png"><br />git log -p 加上-p会使输出信息附带每次commit发生的变化<br />git log -p -数字 会显示最近三次的提交的详细信息<br />git log –stat 会显示被修改文件的哪些行被移除了或是添加了<br />git log –since&#x3D;2.weeks 会显示两周内所有的更新<br><a name="F0ouc"></a></p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>git diff 显示当前工作目录中当前文件和暂存区域快照之间的差异  也就是修改之后还没有暂存起来的内容<br />git diff –staged  查看已经暂存的将要添加到下一次提交里的内容<br />git diff SHA-1校验码  SHA-1校验码  可以对比前后文件的差异， SHA-1校验码可以通过 git log 获取 文件校验码很长，一般只需要SHA-1校验码中的4个字母即可找到对应的文件<br><a name="hhtfs"></a></p><h2 id="头指针-HEAD指针"><a href="#头指针-HEAD指针" class="headerlink" title="头指针-HEAD指针"></a>头指针-HEAD指针</h2><p>HEAD指针也叫头指针，HEAD指针默认指向当前版本库的最后一个版本，我们可以使用HEAD指针来对比当前版本与某一历史版本之间的差别<br />因此 可以通过HEAD指针来代替 最新SHA-1校验码。<br />git diff HEAD SHA-1校验码 即可对比当前版本库与SHA-1校验码对应的版本库之间的差异<br />HEAD^代表当前版本的上一版本<br />HEAD^^代表当前版本的上上版本<br />因此也可以使用 git diff HEAD HEAD^ 来显示当前版本与上一版本的区别<br><a name="kHD3u"></a></p><h2 id="还原历史版本"><a href="#还原历史版本" class="headerlink" title="还原历史版本"></a>还原历史版本</h2><p><a name="blFBq"></a></p><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p>git checkout 可以将HEAD指针移动到任意版本处（意思就是还原整个仓库）（比较复杂，需要深入学习）<br />还原某一个文件：<br />git checkout HEAD^ test_file.txt   将test_file.txt 文件还原至上一版本<br />git checkout – 文件名 清空当前未被追踪的改动（撤销还未提交的针对文件的改动）<br><a name="jimCH"></a></p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git  revert"></a>git  revert</h3><p>这个命令和git checkout 的区别是这个命令会新建一个版本，因此不会导致修改历史的消失。<br />git revert 命令只能用于工作区和暂存区都为空的时候才可以被使用（工作区是否为空可以通过git status来查看）<br />git revert HEAD<br><a name="Ie0dG"></a></p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>这个命令可以直接将部分文件或者整个仓库还原到某个历史状态下，与此同时，暂存区的内容也会被清理掉。变为未被追踪的状态。<br />因为这个命令很容易导致代码丢失，所以不推荐使用这个命令。<br />如果希望回退版本建议使用 git revert<br><a name="YoOFP"></a></p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>如果希望git仓库不追踪某些文件<br />那么可以在仓库中创建一个.gitignore文件来忽略某些文件<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669049477776-b3937239-d487-4d6c-82a6-f237fd2c346c.png#averageHue=%232e2c2b&clientId=u10eb3d9e-7294-4&from=paste&height=468&id=uc5d22b94&originHeight=468&originWidth=1019&originalType=binary&ratio=1&rotation=0&showTitle=false&size=152355&status=done&style=none&taskId=uac0508cb-9dd9-4693-9eb5-a3b5f9f7767&title=&width=1019" alt="image.png"><br><a name="frU53"></a></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>在仓库中右键新建一个文本，然后改名叫.gitignore. (如果是windows系统那么需要前后都有点)。然后打开这个文件输入*.txt 意思就是忽略所有以.txt结尾的文件<br><a name="Xq2XB"></a></p><h3 id="gitignore模板"><a href="#gitignore模板" class="headerlink" title=".gitignore模板"></a>.gitignore模板</h3><p><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><br><a name="YPr6V"></a></p><h1 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h1><p>使用分支可以把工作从开发主线上分离，以免影响开发主线，对于社会化协作的项目来说，分支提供了很好的代码隔离的功能，核心开发者们可以借助对比分支的方式对新加入的代码进行审核，并在其中挑选出有用的分支，合并到主分支当中以确保项目的健康稳定。<br><a name="VfJbq"></a></p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>git branch  会显示当前库中的分支，当前使用的分支会以*开头标注<br />git branch -a  查看远程分支(显示所有分支)<br><a name="Wz0jd"></a></p><h2 id="创建、切换、修改、删除分支"><a href="#创建、切换、修改、删除分支" class="headerlink" title="创建、切换、修改、删除分支"></a>创建、切换、修改、删除分支</h2><p>创建：<br />使用 git init 命令会自动创建一个 master 分支 <br />git branch 分支名 创建一个新的分支<br />切换<br />git checkout 分支名可以切换分支(新建分支并不会直接切换到新建的那个分支，需要用到这个命令来切换)  <br />切换分支时必须谨慎地关注工作目录中文件的变化，切换分支的同时会将工作目录更改为不同分支对应的目录<br />修改<br />git branch -m 分支名 新分支名   修改分支的名字<br />删除<br />git branch  -d 分支名  删除某一个分支<br />git branch -D 分支名  强制删除一个还没有合并的分支<br><a name="sD2UH"></a></p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>首先 git checkout 到想要并入的分支然后再使用merge命令合并<br />命令： git merge &lt;想要使其合并到当前分支的那个分支名&gt;<br><a name="zhoMR"></a></p><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>假如一个主分支分出来的两个分支对同一文件进行了编辑，那么合并这两个分支时就会产生合并冲突。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669103436797-8f350751-23dc-4dc3-8476-ad418c152eee.png#averageHue=%233c3c3c&clientId=ud3c6b9f0-5404-4&from=paste&height=448&id=u7034298f&originHeight=403&originWidth=974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=329736&status=done&style=none&taskId=ueef31e00-da71-45c9-a3f2-2ba4307c0a1&title=&width=1082.2222508913212" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669103718823-24e88be4-6372-4477-9434-a47e735e5f39.png#averageHue=%23f0f0e9&clientId=ud3c6b9f0-5404-4&from=paste&height=227&id=u5ba6dfa7&originHeight=204&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91357&status=done&style=none&taskId=ua6731bae-0932-402d-81bb-052a2938c2e&title=&width=668.8889066083937" alt="image.png"><br />处理完有冲突的文件后，使用git add 重新添加这个文件进行提交即可解决冲突<br><a name="rJwqJ"></a></p><h1 id="协作开发中的分支架构"><a href="#协作开发中的分支架构" class="headerlink" title="协作开发中的分支架构"></a>协作开发中的分支架构</h1><p><a name="HgevY"></a></p><h2 id="协作项目中的分支规则"><a href="#协作项目中的分支规则" class="headerlink" title="协作项目中的分支规则"></a>协作项目中的分支规则</h2><p>根据分支存在的生命周期长短不同，大致上将分支分为长期分支，和短期分支两种<br />长期分支是指一直存在的分支，短期分支指的是用完即销毁的分支<br />短期分支可以将问题集中化，一个分支只解决一个问题，非常适合用作单一特性的开发，或明确的bug修复等这样的短期工作<br />长期分支更加适合解决整个项目运行过程中一直需要应对的问题，比如存放当前可运行的最终代码，或者临时存放需要测试的代码等<br><a name="EZcOq"></a></p><h2 id="适合协作的分支架构"><a href="#适合协作的分支架构" class="headerlink" title="适合协作的分支架构"></a>适合协作的分支架构</h2><p>master 分支是版本库初始化时自动被创建出来的分支，项目中所有的分支都来源于这个分支。<br />master分支来管理发布后的最终代码，在除了初始化阶段外的任何时候，master分支上的代码都应当是稳定和可用的。<br />dev分支是用来维护整个开发的进程的，所有的特征分支（短期分支，针对某一项进行开发）都需要从这个分支开始，并最终合并回这个分支。<br />当任务创建出来之后，特征分支就可以随时被创建出来，开发者们在特征分支上不断的提交更新，直到完成开发工作，最终将特性分支合并到dev分支上并删掉原有的特性分支，当dev分支上的代码已经达到了可用的阶段时即可进入发布，发布的目的是将开发完成的代码打包成一个可以直接使用的软件。<br />发布阶段可以从dev分支创建一个短期的release分支或是将dev分支合并到一个长期的release分支上进行测试和编译，测试中的修改可以继续在这个分支上进行，但是当发布完成后一定要将所有的修改合并回dev分支，并将最终的代码合并到master分支上。<br />当发现master分支上的代码，存在紧急的bug的时候，则需要临时创建一个hotfix分支来快速的修复，hotfix分支和特征分支一样，也应当是短期的分支，当bug修复之后，即需要尽快的将其合并到master和dev上以保持代码的可靠性。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669111005370-b3bc1eae-cb77-4d9e-93a6-d0b1e95788e1.png#averageHue=%23b0afae&clientId=u833f77fa-b51c-4&from=paste&height=857&id=u8c75defb&originHeight=771&originWidth=1480&originalType=binary&ratio=1&rotation=0&showTitle=false&size=285161&status=done&style=none&taskId=uaf727463-7844-4fd8-9484-5fdc2d357e4&title=&width=1644.4444880073465" alt="image.png"><br><a name="IxvAr"></a></p><h2 id="远程分支操作"><a href="#远程分支操作" class="headerlink" title="远程分支操作"></a>远程分支操作</h2><p>如果想要为本地自己 init 的git库添加远程库则可以使用这个命令：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669111802352-9c5513fc-daea-4527-b108-2ab22a2c85aa.png#averageHue=%23e0e0e0&clientId=u833f77fa-b51c-4&from=paste&height=141&id=wWycq&originHeight=127&originWidth=681&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29794&status=done&style=none&taskId=u000266d7-1c59-4c10-8ac9-5be16200bf3&title=&width=756.6666867114885" alt="image.png"></p><p>git  remote -v  查看当前版本库的远程库<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669107337652-fcb15e05-d5f0-4fca-9786-8b5ce348d521.png#averageHue=%230b0705&clientId=u833f77fa-b51c-4&from=paste&height=61&id=u880605ef&originHeight=55&originWidth=532&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3281&status=done&style=none&taskId=u8a6268ce-38d6-49b4-9a26-2c02e8eeb9b&title=&width=591.1111267702083" alt="image.png">  fetch是下载，push是上传<br />git remote add  &lt;git库名字&gt; &lt;git库路径&gt;  可以额外添加远程分支<br />在远程库被添加之后，本地仓库中则会同时出现本地的分支和远程的分支，那些存在于远程库中的分支并不会将本地的分支覆盖或与之自动的合并，而是会以远程分支的形式存在<br />远程分支以远程库的名称作为名称空间并以斜杠作为连接符与原本的分支名连接<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669112698223-efe49e5b-4b2b-4fa7-9dc5-2daf96b01a08.png#averageHue=%234c3325&clientId=u833f77fa-b51c-4&from=paste&height=336&id=u16bd6dfa&originHeight=302&originWidth=917&originalType=binary&ratio=1&rotation=0&showTitle=false&size=169845&status=done&style=none&taskId=udb7a5350-78c1-418c-988a-4c1b142d5bd&title=&width=1018.8889158802275" alt="image.png"><br />远程分支其实也存在于本地的版本库当中。与本地分支不同，远程分支并不能直接被修改，它的功能是用于与远程库中相同的分支进行信息同步，远程分支中的信息一般和远程库中保持一致，当远程库有新的更新时可以使用git fetch命令更新本地仓库的远程分支。<br /><strong>从远程库拉取新代码：</strong><br />例如当远程库origin发生了更多的操作而导致与本地库不同时则可以使用，git fetch origin命令从远程库origin中同步更新所有的远程分支信息。更新完远程分支信息之后则可以使用git merge 命令将其合并到对应的本地分支上。<br />也可以通过 git pull &lt;远程库名&gt; &lt;分支名&gt; 来一步到位同步远程库的远程分支到当前的分支，这里举例就是将origin远程库的new_test分支合并到当前的new_test分支<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669112832693-cbfc834e-4491-4d0d-8e22-7497d85db3a7.png#averageHue=%2347432a&clientId=u833f77fa-b51c-4&from=paste&height=158&id=u01768d09&originHeight=142&originWidth=999&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110225&status=done&style=none&taskId=u6b8849d3-78ff-473b-9471-38a887ea550&title=&width=1110.000029404959" alt="image.png"><br />git branch -vv 来查看本地分支与远程分支之间的关联 关系<br />如果本地分支与远程分支之间已经建立了关系，则更新时就可以直接省略远程库名和分支名，直接写为 git pull<br />将远程分支同步到本地：git checkout origin&#x2F;remote_branch  这样本地就会自动创建一个 remote_branch分支并与origin&#x2F;remote_branch关联<br /> 当修改了本地分支后，如果希望将其推送到远程库中时，则可以通过 git push  origin 分支名 将当前活动的本地分支推送到远程库上的同名分支上去，如果远程的同名分支不存在则会被新建出来。</p><p><a name="czXKA"></a></p><h1 id="Git常用命令以及注意事项"><a href="#Git常用命令以及注意事项" class="headerlink" title="Git常用命令以及注意事项"></a>Git常用命令以及注意事项</h1><p>将本地的代码上传到github的流程：<a href="https://cloud.tencent.com/developer/article/1648509">https://cloud.tencent.com/developer/article/1648509</a><br />git clone 把远程库克隆到本地进行开发<br />git branch 创建一个要添加修改的分支（一个公司的，一个家里的）<br />git push origin + 你现在的分支名   向远程库推送自己的更新   (vscode有插件可以用vscode来推送)<br />git pull –rebase origin master  更新远程主分支的内容到本地<br><a name="is5A4"></a></p><h2 id="vscode-结合-git的使用说明："><a href="#vscode-结合-git的使用说明：" class="headerlink" title="vscode 结合 git的使用说明："></a>vscode 结合 git的使用说明：</h2><p><a href="https://blog.l0v0.com/posts/94ffdbdf.html">https://blog.l0v0.com/posts/94ffdbdf.html</a><br /><a href="https://blog.l0v0.com/posts/a91a4c58.html">https://blog.l0v0.com/posts/a91a4c58.html</a><br><a name="prTdb"></a></p><h2 id="使用SSH来传输"><a href="#使用SSH来传输" class="headerlink" title="使用SSH来传输"></a>使用SSH来传输</h2><p><a href="https://blog.csdn.net/qq_38163309/article/details/105335097">https://blog.csdn.net/qq_38163309&#x2F;article&#x2F;details&#x2F;105335097</a><br /><a href="https://www.bilibili.com/video/BV1EE41157ro/?spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1EE41157ro/?spm_id_from&#x3D;333.1007.top_right_bar_window_history.content.click</a><br><a name="lDoBO"></a></p><h2 id="Git常用命令汇总"><a href="#Git常用命令汇总" class="headerlink" title="Git常用命令汇总"></a>Git常用命令汇总</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669141756421-248ed107-f546-4217-8b43-b07992da53f7.png#averageHue=%23d5cac1&clientId=u8964c6e1-bf9f-4&from=paste&height=552&id=ua4edb5a1&originHeight=552&originWidth=872&originalType=binary&ratio=1&rotation=0&showTitle=false&size=158354&status=done&style=none&taskId=u513d86e8-3365-44f3-8782-1c3a42caab5&title=&width=872" alt="image.png"><br><a name="WyD7T"></a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669141951237-6197a90e-22b0-41f4-890a-22b819adca3f.png#averageHue=%23ededec&clientId=u8964c6e1-bf9f-4&from=paste&height=652&id=u398dc4fe&originHeight=652&originWidth=1526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=275541&status=done&style=none&taskId=ua3431058-5efb-4678-85dc-33fcc6f2a46&title=&width=1526" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识与其他开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisualStudio的使用</title>
      <link href="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-VisualStudio%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-VisualStudio%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="egV9D"></a># 好用的快捷键alt+shift+o 全局搜索<br />alt+shift+f 查找引用<br />alt + o 在cpp和头文件之间相互跳转<br />ctrl +a + k + f 全选代码使代码变得整洁<a name="RWb6C"></a># Visual Assist番茄助手首先推荐一个符号搜索插件 Visual Assist 也称番茄助手，下载安装方法自行搜索。<a name="vMyYY"></a>## 禁用使用中文注释时提示拼写错误的问题![image.png](https://cdn.nlark.com/yuque/0/2023/png/2623605/1693216885933-989fe0c4-d03c-417e-b4dd-e945a5c17d56.png#averageHue=%23f1edea&clientId=uc9bedbdb-4582-4&from=paste&height=192&id=ufae31f36&originHeight=192&originWidth=728&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13247&status=done&style=none&taskId=u3b89b7f3-2f06-47fb-a329-cfc0db170b6&title=&width=728)<a name="FkjeK"></a>## <p><a name="z2Iwm"></a></p><h2 id="好用的使用方法"><a href="#好用的使用方法" class="headerlink" title="好用的使用方法"></a>好用的使用方法</h2><p><a name="o5I7N"></a></p><h3 id="快速在cpp中创建头文件中声明的函数定义"><a href="#快速在cpp中创建头文件中声明的函数定义" class="headerlink" title="快速在cpp中创建头文件中声明的函数定义"></a>快速在cpp中创建头文件中声明的函数定义</h3><p>在头文件中选择自己声明的函数名称，然后右键后点击Create Implementation即可快速在cpp中生成定义。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1693216147386-36de503f-be6c-427f-b799-9667ddbf1336.png#averageHue=%236f9070&clientId=uc9bedbdb-4582-4&from=paste&height=308&id=u6ebc902a&originHeight=308&originWidth=1156&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46765&status=done&style=none&taskId=u9b52cbd7-5696-4e0a-9d6b-997a5b74c84&title=&width=1156" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识与其他开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisualStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方UE5python教程</title>
      <link href="/2023/08/29/UE%E5%BC%80%E5%8F%91-%E5%AE%98%E6%96%B9UE5python%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/29/UE%E5%BC%80%E5%8F%91-%E5%AE%98%E6%96%B9UE5python%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="LHv42"></a># 官网PythonAPI教程教程链接[https://dev.epicgames.com/community/learning/courses/wk4/an-in-depth-look-at-using-python-for-game-development/vymW/an-in-depth-look-at-using-python-for-game-development-introduction](https://dev.epicgames.com/community/learning/courses/wk4/an-in-depth-look-at-using-python-for-game-development/vymW/an-in-depth-look-at-using-python-for-game-development-introduction)<a name="QOSV4"></a>## 获得路径下的所有文件路径def listAssetPaths(path='/Game'):<br />    assetPaths = unreal.EditorAssetLibrary.list_assets(path)<br />    for assetPath in assetPaths: print(assetPath)<a name="nDCRa"></a>## EditorUtilityLibrary和EditorActorSubsystemEditorUtilityLibrary可以让我们获取和内容浏览器有关的功能<br />EditorActorSubsystem可以可以提供和世界大纲视图有关的功能（这个类在UE5里面有，UE4.27里面没有）<br />EditorLevelLibrary 和 EditorActorSubsystem具有差不多的功能，UE4.27可以用这个来尝试代替EditorActorSubsystem<a name="fwq2A"></a>### EditorUtilityLibrary方法：get_selected_assets (获取选择的资产)<br />举例：<br /># 输出选择的资产的对象信息<br />def getSelectionContentBrowser():<br />    selectAssets = unreal.EditorUtilityLibrary.get_selected_assets()<br />    for selectAsset in selectAssets: print(selectAsset)<a name="DN8Px"></a>### EditorActorSubsystem（这个类在UE5里面有，UE4.27里面没有）方法：<br />get_all_level_actors(获取关卡中的所有ACtor)  ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1659084287467-26cef784-fa57-4d54-8cc8-1aa7956ac394.png#clientId=u8fad6bab-0b86-4&from=paste&height=170&id=u128d9fb9&originHeight=170&originWidth=1099&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94871&status=done&style=none&taskId=ua1a325d8-2de6-4628-9b27-3a4fc16920b&title=&width=1099)官方文档上面虽然没有参数需要，但是在使用的时候会发现这个方法需要接受一个参数。解决这个问题有两种方法，第一种：在类名后面加括号<br />第二种：![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1659084800653-dfeca916-20c0-4f22-9ce7-3180eddab54a.png#clientId=u8fad6bab-0b86-4&from=paste&height=173&id=u345728e2&originHeight=173&originWidth=1506&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110930&status=done&style=none&taskId=ucbb5a5f7-6189-4bcf-94e9-bff659c4f5b&title=&width=1506)  EAS是变量名无需深究<p>get_selected_level_actors(获取选择的关卡actor)<br><a name="zgiY2"></a></p><h3 id="EditorLevelLibrary（4-27可以使用的和EditorActorSubSystem差不多功能的类）（UE5虽然也能使用但是将要废弃这个类）"><a href="#EditorLevelLibrary（4-27可以使用的和EditorActorSubSystem差不多功能的类）（UE5虽然也能使用但是将要废弃这个类）" class="headerlink" title="EditorLevelLibrary（4.27可以使用的和EditorActorSubSystem差不多功能的类）（UE5虽然也能使用但是将要废弃这个类）"></a>EditorLevelLibrary（4.27可以使用的和EditorActorSubSystem差不多功能的类）（UE5虽然也能使用但是将要废弃这个类）</h3><p>方法：get_all_level_actors(获取关卡中的所有ACtor)  同样是获取关卡中的所有ACtor经过测试4.27版本的UE使用这个类是不需要参数传递的，EditorActorSubsystem的这个方法需要传递参数。<br><a name="Himck"></a></p><h2 id="按类组织资产"><a href="#按类组织资产" class="headerlink" title="按类组织资产"></a>按类组织资产</h2><p><a name="UTtHB"></a></p><h3 id="EditorAssetLibrary"><a href="#EditorAssetLibrary" class="headerlink" title="EditorAssetLibrary"></a>EditorAssetLibrary</h3><p>方法：find_asset_data(asset_path)→AssetData   接受资产路径返回资产的数据，类型为AssetData。什么是AssetData类型：AssetData类型存取了资产的各种信息，可以直接print AssetData类型的变量可以发现它是一个字典。这个类型也自带一些方法，比如获取资产的名字，长名，资产的类型，判断是否加载等。<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/AssetData.html#unreal.AssetData">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/AssetData.html#unreal.AssetData</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据类型列举物体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAssetClass</span>(<span class="params">classType</span>):</span><br><span class="line">    assetPaths = unreal.EditorAssetLibrary.list_assets(<span class="string">&#x27;/Game/MyAsset&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(assetPaths)</span><br><span class="line">    assets = []</span><br><span class="line">    <span class="keyword">for</span> assetPath <span class="keyword">in</span> assetPaths:</span><br><span class="line">        assetData = unreal.EditorAssetLibrary.find_asset_data(assetPath)</span><br><span class="line">        assetClass = assetData.asset_class</span><br><span class="line">        <span class="keyword">if</span> assetClass == classType:</span><br><span class="line">            assets.append(assetData.get_export_text_name())</span><br><span class="line">    <span class="keyword">for</span> asset <span class="keyword">in</span> assets: <span class="built_in">print</span>(asset)</span><br></pre></td></tr></table></figure><p><a name="YUoDU"></a></p><h2 id="获取特定类的信息"><a href="#获取特定类的信息" class="headerlink" title="获取特定类的信息"></a>获取特定类的信息</h2><p>首先看到这一节可以明确的感知到，UEPython中有很多自定义的类型，然后这些类型都有属于自己的函数，因此帮助文档很重要。<br />staticMesh，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659319581581-f014ee27-7437-4f39-82d5-d7baa423fc60.png#clientId=udfa48b04-83fd-4&from=paste&height=829&id=u7b24a215&originHeight=829&originWidth=1141&originalType=binary&ratio=1&rotation=0&showTitle=false&size=835848&status=done&style=none&taskId=ue86b33e8-7ec2-4636-8a0b-aecb69c38d7&title=&width=1141" alt="image.png">编辑器属性就是这种类型的可调节的属性，我们可以通过staticMesh类型的对象中的get_editor_property方法来获取这些属性<br />它们都继承自_ObjectBase<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659319635544-9dbd8ad7-1777-45b5-9743-5bf5798f49da.png#clientId=udfa48b04-83fd-4&from=paste&height=566&id=ua3616151&originHeight=566&originWidth=1217&originalType=binary&ratio=1&rotation=0&showTitle=false&size=331996&status=done&style=none&taskId=ud882f472-031f-49ec-b64d-e408fefff7d&title=&width=1217" alt="image.png">所以对象也可以使用这些方法，例如get_name</p><p><a name="Naaq6"></a></p><h3 id="StaticMesh的AssetImportData与lod-group属性"><a href="#StaticMesh的AssetImportData与lod-group属性" class="headerlink" title="StaticMesh的AssetImportData与lod_group属性"></a>StaticMesh的AssetImportData与lod_group属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据类型列举物体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAssetClass</span>(<span class="params">classType</span>):</span><br><span class="line">    assetPaths = unreal.EditorAssetLibrary.list_assets(<span class="string">&#x27;/Game&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(assetPaths)</span></span><br><span class="line">    assets = []</span><br><span class="line">    <span class="keyword">for</span> assetPath <span class="keyword">in</span> assetPaths:</span><br><span class="line">        assetData = unreal.EditorAssetLibrary.find_asset_data(assetPath)</span><br><span class="line">        assetClass = assetData.asset_class</span><br><span class="line">        <span class="keyword">if</span> assetClass == classType:</span><br><span class="line">            assets.append(assetData.get_asset())</span><br><span class="line">    <span class="comment"># for asset in assets: print(asset)</span></span><br><span class="line">    <span class="keyword">return</span> assets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取静态网格体的信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshData</span>():</span><br><span class="line">    staticMeshs = getAssetClass(<span class="string">&#x27;StaticMesh&#x27;</span>)  <span class="comment"># 获取所有类型为StaticMesh的对象</span></span><br><span class="line">    <span class="keyword">for</span> staticMesh <span class="keyword">in</span> staticMeshs:</span><br><span class="line">        <span class="comment"># assetImportData = staticMesh.get_editor_property(&#x27;asset_import_data&#x27;)  # 获取静态网格体对象的编辑器中的导入信息的属性</span></span><br><span class="line">        <span class="comment"># fbxFilePath = assetImportData.extract_filenames()  # 得到导入信息属性中的fbx路径</span></span><br><span class="line">        <span class="comment"># print(fbxFilePath)</span></span><br><span class="line">        <span class="comment"># print(staticMesh.get_editor_property(&#x27;lod_group&#x27;))</span></span><br><span class="line">        <span class="comment"># print(staticMesh.get_num_lods())</span></span><br><span class="line">        <span class="comment"># 如果静态网个体对象的lod组的属性为None并且lod数量只有一个时将lod组的属性改为LargeProp</span></span><br><span class="line">        <span class="keyword">if</span> staticMesh.get_editor_property(<span class="string">&#x27;lod_group&#x27;</span>) == <span class="string">&#x27;None&#x27;</span>:  </span><br><span class="line">            <span class="keyword">if</span> staticMesh.get_num_lods() == <span class="number">1</span>:</span><br><span class="line">                staticMesh.set_editor_property(<span class="string">&#x27;lod_group&#x27;</span>, <span class="string">&#x27;LargeProp&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="MDGTB"></a></p><h2 id="获取staticMesh的lod数据"><a href="#获取staticMesh的lod数据" class="headerlink" title="获取staticMesh的lod数据"></a>获取staticMesh的lod数据</h2><p>先提一下名词解释，这里使用的方法除了利用了lod的索引外还利用了分段的索引，通过观看教程理解分段的意义：首先我们的目的是获取这里模型的三角形的数量<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659333726131-b93a1f65-9139-48dc-b96f-22467c908786.png#clientId=u061bcdf3-168e-4&from=paste&height=164&id=u8c1da1d1&originHeight=164&originWidth=340&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50872&status=done&style=none&taskId=u8c0d6aea-b569-4a81-8d54-bea8b6511dd&title=&width=340" alt="image.png">，当切换一个LOD时分段数量跟材质球的数量是相同的，也就是说分段的意思是当前LOD对应的模型的组成数量。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659333895148-76182373-68d5-49fe-b9c8-04b6dd1f395f.png#clientId=u061bcdf3-168e-4&from=paste&height=574&id=uf15cd6ae&originHeight=574&originWidth=1414&originalType=binary&ratio=1&rotation=0&showTitle=false&size=756463&status=done&style=none&taskId=uec2be367-4886-4f68-89d8-c818ac4af7a&title=&width=1414" alt="image.png"><br />涉及到的类与方法：<br />ProceduralMeshLibrary:get_section_from_static_mesh<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659333594626-58600156-f861-4320-b964-3450ce611c1c.png#clientId=u061bcdf3-168e-4&from=paste&height=292&id=u2c801b66&originHeight=292&originWidth=802&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34735&status=done&style=none&taskId=u826093ec-2f28-4aeb-9d33-02d08cb55db&title=&width=802" alt="image.png"><a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ProceduralMeshLibrary.html?highlight=proceduralmeshlibrary#unreal.ProceduralMeshLibrary">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ProceduralMeshLibrary.html?highlight=proceduralmeshlibrary#unreal.ProceduralMeshLibrary</a><br />得到的数据经过输出可以看出来得到的是一个元组，元组里面有多个数组元素组成，有意向可以遍历这些数组来观察数组中的内容。因为我们需要得到三角形的数量遍历三角形的数据后发现官方输出了很多重复的数据，当我们把数组的长度除以3以后才能够得到我们需要的正确的三角形的数量。<br />“很多数值是重复的 我想这是因为输出了 和每个三角形有关的所有顶点 之所以这么认为是因为 如果让这个数字 这个长度 我们可以生成它 然后除以3 得到的结果 就是我们想要的数据 这是个窍门 只是个小窍门 只要让这个数组的长度除以3”这是官方教程的原话</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659335064023-274d427c-338b-4f40-b02c-a491dfa0f306.png#clientId=u061bcdf3-168e-4&from=paste&height=145&id=ua07f9194&originHeight=145&originWidth=1483&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54381&status=done&style=none&taskId=u668471d1-fcb7-41d2-992c-37dcd0eb4a6&title=&width=1483" alt="image.png"><br />StaticMesh: get_num_sections(lod)得到模型的lod对应的分段数<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/StaticMesh.html?highlight=staticmesh#unreal.StaticMesh.get_num_sections">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/StaticMesh.html?highlight=staticmesh#unreal.StaticMesh.get_num_sections</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据类型列举物体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAssetClass</span>(<span class="params">classType</span>):</span><br><span class="line">    assetPaths = unreal.EditorAssetLibrary.list_assets(<span class="string">&#x27;/Game&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(assetPaths)</span></span><br><span class="line">    assets = []</span><br><span class="line">    <span class="keyword">for</span> assetPath <span class="keyword">in</span> assetPaths:</span><br><span class="line">        assetData = unreal.EditorAssetLibrary.find_asset_data(assetPath)</span><br><span class="line">        assetClass = assetData.asset_class</span><br><span class="line">        <span class="keyword">if</span> assetClass == classType:</span><br><span class="line">            assets.append(assetData.get_asset())</span><br><span class="line">    <span class="comment"># for asset in assets: print(asset)</span></span><br><span class="line">    <span class="keyword">return</span> assets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取静态网格体的lod信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshLODData</span>():</span><br><span class="line">    staticMeshs = getAssetClass(<span class="string">&#x27;StaticMesh&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> staticMesh <span class="keyword">in</span> staticMeshs:</span><br><span class="line">        staticMeshTriCount = []  <span class="comment"># 负责记录模型的三角形数量</span></span><br><span class="line">        numLODs = staticMesh.get_num_lods()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numLODs):</span><br><span class="line">            LODTriCount = <span class="number">0</span>  <span class="comment"># 记录当前LOD的三角形数量</span></span><br><span class="line">            numSections = staticMesh.get_num_sections(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(numSections):  <span class="comment"># 遍历LOD对应的分段得到LOD对应的三角形数量</span></span><br><span class="line">                <span class="comment"># 得到静态网格体对应的分段信息</span></span><br><span class="line">                sectionData = unreal.ProceduralMeshLibrary.get_section_from_static_mesh(staticMesh, i, j)</span><br><span class="line">                sectionTriCount = (<span class="built_in">len</span>(sectionData[<span class="number">1</span>]) / <span class="number">3</span>)  <span class="comment"># 把数组的长度除以3以后才能够得到我们需要的正确的三角形的数量。</span></span><br><span class="line">                LODTriCount += sectionTriCount</span><br><span class="line">            staticMeshTriCount.append(LODTriCount)  <span class="comment"># 记录LOD对应的三角形数量</span></span><br><span class="line">        staticMeshReductions = [<span class="number">100</span>] <span class="comment"># 负责记录模型的LOD对应的三角形百分比</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, numLODs):</span><br><span class="line">            staticMeshReductions.append(<span class="built_in">int</span>(staticMeshTriCount[i]/staticMeshTriCount[<span class="number">0</span>]*<span class="number">100</span>))</span><br><span class="line">        <span class="built_in">print</span>(staticMesh.get_name())</span><br><span class="line">        <span class="built_in">print</span>(staticMeshTriCount)</span><br><span class="line">        <span class="built_in">print</span>(staticMeshReductions)</span><br></pre></td></tr></table></figure><p><a name="d3ZVW"></a></p><h2 id="获取关卡中的模型以及出现的数量"><a href="#获取关卡中的模型以及出现的数量" class="headerlink" title="获取关卡中的模型以及出现的数量"></a>获取关卡中的模型以及出现的数量</h2><p>因为是要获取实例化的数量也即获取关卡中存在的Actor，因此要使用EditorLevelLibrary中的方法<br />在这里获得到了个小知识点，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659411906430-17ee0b86-6584-4501-9741-c49697d67a53.png#clientId=u0faa6e17-c546-4&from=paste&height=109&id=u5b3be5bc&originHeight=109&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22409&status=done&style=none&taskId=uc4643842-8510-4db1-8fb4-5b3347b3ffd&title=&width=581" alt="image.png">当我们将内容浏览器中的资产拖入到关卡中，ue会自动将其变成staticMeshActor类型，因此找到关卡中出现的Actor以后还需要找到这个Acotr对应的组件，然后再根据组件找到对应的静态网格体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取关卡中的模型以及出现的次数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshInstanceCounts</span>():</span><br><span class="line">    levelActors = unreal.EditorLevelLibrary().get_all_level_actors()  <span class="comment"># 获取关卡中的所有Actor</span></span><br><span class="line"></span><br><span class="line">    staticMeshActors = []  <span class="comment"># 负责记录所有staticMeshActor的名字</span></span><br><span class="line">    staticMeshActorCounts = []  <span class="comment"># 负责记录所有Actor在关卡中出现的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> levelActor <span class="keyword">in</span> levelActors:</span><br><span class="line">        <span class="keyword">if</span> (levelActor.get_class().get_name()) == <span class="string">&#x27;StaticMeshActor&#x27;</span>:</span><br><span class="line">            staticMeshComponent = levelActor.static_mesh_component  <span class="comment"># 得到这个Actor的组件</span></span><br><span class="line">            staticMesh = staticMeshComponent.static_mesh  <span class="comment"># 得到这个组件对应的静态网格体</span></span><br><span class="line">            staticMeshActors.append(staticMesh.get_name())</span><br><span class="line"></span><br><span class="line">    processedActors = []  <span class="comment"># 用来记录场景中的所有staticMeshActor但是不会出现相同的名字</span></span><br><span class="line">    <span class="keyword">for</span> staticMeshActor <span class="keyword">in</span> staticMeshActors:</span><br><span class="line">        <span class="keyword">if</span> staticMeshActor <span class="keyword">not</span> <span class="keyword">in</span> processedActors:</span><br><span class="line">            actorCounts = (staticMeshActor, staticMeshActors.count(staticMeshActor))  <span class="comment"># 元组，负责记录actor以及对应的关卡出现数量</span></span><br><span class="line">            staticMeshActorCounts.append(actorCounts)</span><br><span class="line">            processedActors.append(staticMeshActor)</span><br><span class="line">    <span class="comment"># key=lambda a: a[1]  的意思是按照列表中的元素中的第二项进行排列，在这里是按照actor出现的次数进行排序</span></span><br><span class="line">    staticMeshActorCounts.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> staticMeshActorCounts: <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><a name="OVQyH"></a></p><h2 id="LOD视图的开启与介绍"><a href="#LOD视图的开启与介绍" class="headerlink" title="LOD视图的开启与介绍"></a>LOD视图的开启与介绍</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659411854494-ea279754-5f26-4577-a656-800fc51c9852.png#clientId=u0faa6e17-c546-4&from=paste&height=546&id=u7fcc843f&originHeight=546&originWidth=1486&originalType=binary&ratio=1&rotation=0&showTitle=false&size=845097&status=done&style=none&taskId=u678fdc5d-9d6d-48b8-8d8b-d20c60ce339&title=&width=1486" alt="image.png"><br />白色代表LOD0，红色代表LOD1，依次往后是绿色蓝色</p><p><a name="mfxpo"></a></p><h2 id="获取关卡中的模型名字以及对应的在场景中的LOD1的三角形数量"><a href="#获取关卡中的模型名字以及对应的在场景中的LOD1的三角形数量" class="headerlink" title="获取关卡中的模型名字以及对应的在场景中的LOD1的三角形数量"></a>获取关卡中的模型名字以及对应的在场景中的LOD1的三角形数量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取静态网格体的lod信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshLODData</span>():</span><br><span class="line">    staticMeshs = getAssetClass(<span class="string">&#x27;StaticMesh&#x27;</span>)</span><br><span class="line">    staticMeshLODData = []</span><br><span class="line">    <span class="keyword">for</span> staticMesh <span class="keyword">in</span> staticMeshs:</span><br><span class="line">        staticMeshTriCount = []  <span class="comment"># 负责记录模型的三角形数量</span></span><br><span class="line">        numLODs = staticMesh.get_num_lods()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numLODs):</span><br><span class="line">            LODTriCount = <span class="number">0</span>  <span class="comment"># 记录当前LOD的三角形数量</span></span><br><span class="line">            numSections = staticMesh.get_num_sections(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(numSections):  <span class="comment"># 遍历LOD对应的分段得到LOD对应的三角形数量</span></span><br><span class="line">                <span class="comment"># 得到静态网格体对应的分段信息</span></span><br><span class="line">                sectionData = unreal.ProceduralMeshLibrary.get_section_from_static_mesh(staticMesh, i, j)</span><br><span class="line">                sectionTriCount = (<span class="built_in">len</span>(sectionData[<span class="number">1</span>]) / <span class="number">3</span>)  <span class="comment"># 把数组的长度除以3以后才能够得到我们需要的正确的三角形的数量。</span></span><br><span class="line">                LODTriCount += sectionTriCount</span><br><span class="line">            staticMeshTriCount.append(LODTriCount)  <span class="comment"># 记录LOD对应的三角形数量</span></span><br><span class="line">        staticMeshReductions = [<span class="number">100</span>]  <span class="comment"># 负责记录模型的LOD对应的三角形百分比</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, numLODs):</span><br><span class="line">            staticMeshReductions.append(<span class="built_in">int</span>(staticMeshTriCount[i] / staticMeshTriCount[<span class="number">0</span>] * <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># print(staticMesh.get_name())</span></span><br><span class="line">        <span class="comment"># print(staticMeshTriCount)</span></span><br><span class="line">        <span class="comment"># print(staticMeshReductions)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            LODData = (staticMesh.get_name(), staticMeshTriCount[<span class="number">1</span>])  <span class="comment"># 之所以try是因为有的模型只有LOD0,把只有LOD0的过滤掉</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        staticMeshLODData.append(LODData)</span><br><span class="line">    <span class="keyword">return</span> staticMeshLODData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取关卡中的模型以及出现的次数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshInstanceCounts</span>():</span><br><span class="line">    levelActors = unreal.EditorLevelLibrary().get_all_level_actors()  <span class="comment"># 获取关卡中的所有Actor</span></span><br><span class="line"></span><br><span class="line">    staticMeshActors = []  <span class="comment"># 负责记录所有staticMeshActor的名字</span></span><br><span class="line">    staticMeshActorCounts = []  <span class="comment"># 负责记录所有Actor在关卡中出现的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> levelActor <span class="keyword">in</span> levelActors:</span><br><span class="line">        <span class="keyword">if</span> (levelActor.get_class().get_name()) == <span class="string">&#x27;StaticMeshActor&#x27;</span>:</span><br><span class="line">            staticMeshComponent = levelActor.static_mesh_component  <span class="comment"># 得到这个Actor的组件</span></span><br><span class="line">            staticMesh = staticMeshComponent.static_mesh  <span class="comment"># 得到这个组件对应的静态网格体</span></span><br><span class="line">            staticMeshActors.append(staticMesh.get_name())</span><br><span class="line"></span><br><span class="line">    processedActors = []  <span class="comment"># 用来记录场景中的所有staticMeshActor但是不会出现相同的名字</span></span><br><span class="line">    <span class="keyword">for</span> staticMeshActor <span class="keyword">in</span> staticMeshActors:</span><br><span class="line">        <span class="keyword">if</span> staticMeshActor <span class="keyword">not</span> <span class="keyword">in</span> processedActors:</span><br><span class="line">            actorCounts = (staticMeshActor, staticMeshActors.count(staticMeshActor))  <span class="comment"># 元组，负责记录actor以及对应的关卡出现数量</span></span><br><span class="line">            staticMeshActorCounts.append(actorCounts)</span><br><span class="line">            processedActors.append(staticMeshActor)</span><br><span class="line">    <span class="comment"># key=lambda a: a[1]  的意思是按照列表中的元素中的第二项进行排列，在这里是按照actor出现的次数进行排序</span></span><br><span class="line">    staticMeshActorCounts.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># for item in staticMeshActorCounts: print(item)</span></span><br><span class="line"></span><br><span class="line">    LODData = getStaticMeshLODData()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for item in LODData: print(item)</span></span><br><span class="line"></span><br><span class="line">    aggregateTriCounts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(staticMeshActorCounts)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(LODData)):</span><br><span class="line">            <span class="keyword">if</span> staticMeshActorCounts[i][<span class="number">0</span>] == LODData[j][<span class="number">0</span>]:</span><br><span class="line">                aggregateTriCount = (staticMeshActorCounts[i][<span class="number">0</span>],staticMeshActorCounts[i][<span class="number">1</span>] * LODData[j][<span class="number">1</span>])</span><br><span class="line">                aggregateTriCounts.append(aggregateTriCount)</span><br><span class="line"></span><br><span class="line">    aggregateTriCounts.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">1</span>], reverse=<span class="literal">True</span>)  <span class="comment"># 存取场景中的actor的mesh名字以及对应的场景中的所有mesh的LOD1的三角形数量</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> aggregateTriCounts: <span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="aFWsp"></a></p><h2 id="dir-与help-，材质实例"><a href="#dir-与help-，材质实例" class="headerlink" title="dir()与help()，材质实例"></a>dir()与help()，材质实例</h2><p>当知道一个类的名字以后，如果想要得到这个类对应的所有方法，可以通过dir()函数来得到，并且有的方法官方文档可能没有。<br />例如如果想知道StaticMeshComponent的方法可以通过：<br />for item in dir(unreal.StaticMeshComponent): print (item)<br />得到类对应的所有方法，并且可以通过搜索得到对应的方法，知道方法的名字后可以使用help()函数来得到方法的细节：help(unreal.StaticMeshComponent.get_num_materials)<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661837162153-7f3ce4f5-898a-4cfa-b9b4-edcf8d6d1ad8.png#clientId=u12196a95-624c-4&from=paste&height=719&id=udf236356&originHeight=719&originWidth=490&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31349&status=done&style=none&taskId=u7d0944a4-abd2-4d3e-81d1-b68722fd1f9&title=&width=490" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661837204405-a5c9f43a-a01c-48a8-9c60-596eac11bb39.png#clientId=u12196a95-624c-4&from=paste&height=322&id=ubcfb26de&originHeight=322&originWidth=611&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49628&status=done&style=none&taskId=u16026c1d-52ea-4f44-bc33-1b56414123b&title=&width=611" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661837351487-3280c32f-1feb-49bb-8055-80d26ac7d865.png#clientId=u12196a95-624c-4&from=paste&height=88&id=u3bd793ef&originHeight=88&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10778&status=done&style=none&taskId=ud66a72e0-288c-4bfc-9949-898bdd5e323&title=&width=481" alt="image.png"><br />将场景中的所有模型的材质更改为&#x2F;Game&#x2F;python&#x2F;MI_test这个材质实例<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661838603634-35cbd362-12e3-4908-83e7-1f54783a6f72.png#clientId=u12196a95-624c-4&from=paste&height=637&id=u456e4338&originHeight=637&originWidth=1337&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1314449&status=done&style=none&taskId=u69fc4f34-9d6b-4779-9b6d-59b33d9fb2f&title=&width=1337" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">returnMaterialInformationSMC</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    levelActors =</span> unreal.<span class="built_in">EditorLevelLibrary</span>().<span class="built_in">get_all_level_actors</span>()</span><br><span class="line">    testMat = unreal.EditorAssetLibrary.<span class="built_in">find_asset_data</span>(<span class="string">&#x27;/Game/python/MI_test&#x27;</span>).<span class="built_in">get_asset</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> levelActor in levelActors:</span><br><span class="line">        <span class="keyword">if</span> (levelActor.<span class="built_in">get_class</span>().<span class="built_in">get_name</span>()) == <span class="string">&#x27;StaticMeshActor&#x27;</span>:</span><br><span class="line">            staticMeshComponent = levelActor.static_mesh_component</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(staticMeshComponent.<span class="built_in">get_num_materials</span>()):</span><br><span class="line">                staticMeshComponent.<span class="built_in">set_material</span>(i, testMat)</span><br></pre></td></tr></table></figure><p><a name="hfBFP"></a></p><h2 id="使用关卡蓝图更改模型材质"><a href="#使用关卡蓝图更改模型材质" class="headerlink" title="使用关卡蓝图更改模型材质"></a>使用关卡蓝图更改模型材质</h2><p>根据场景中的staticmesh的material数量决定使用不同的材质实例，只在运行游戏时启用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661843448805-260ec193-cd73-4fd1-9c12-601af3fa30cc.png#clientId=u12196a95-624c-4&from=paste&height=1410&id=u739a9ddf&originHeight=1410&originWidth=2701&originalType=binary&ratio=1&rotation=0&showTitle=false&size=680063&status=done&style=none&taskId=ub1dbbe98-555a-43d7-971f-13c89b67a0e&title=&width=2701" alt="Northwood-EventGraph.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661843508233-41e09606-7efb-463d-86fe-20c5fb196f0c.png#clientId=u12196a95-624c-4&from=paste&height=906&id=u2b8c6d2f&originHeight=906&originWidth=1684&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2535471&status=done&style=none&taskId=udab98c93-ba35-4bd0-85c7-d61b8e17ec4&title=&width=1684" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEPython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>油管与B站uepython教程</title>
      <link href="/2023/08/29/UE%E5%BC%80%E5%8F%91-%E6%B2%B9%E7%AE%A1%E4%B8%8EB%E7%AB%99uepython%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/29/UE%E5%BC%80%E5%8F%91-%E6%B2%B9%E7%AE%A1%E4%B8%8EB%E7%AB%99uepython%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="g4ESd"></a># 油管uepython教程<a name="tlpxM"></a>## 在UE中的python初始配置可以看看这个文章[https://www.yumefx.com/?p=3211](https://www.yumefx.com/?p=3211)<a name="WYDR1"></a>### 插件的选择找到scripting启用这三个<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1655819812634-a0e15b6f-5e64-459a-97f8-4c12f0c1895d.png#clientId=u0d521281-290c-4&errorMessage=unknown%20error&from=paste&height=851&id=uaec1a435&originHeight=851&originWidth=1458&originalType=binary&ratio=1&rotation=0&showTitle=false&size=151187&status=error&style=none&taskId=ubfd903d6-416e-4774-b8c2-3022ffcc8fc&title=&width=1458)<a name="pu3hS"></a>### 项目设置![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1655978185249-1579d6af-b989-4157-b733-991feb125622.png#clientId=ue8ca9c13-c3c0-4&errorMessage=unknown%20error&from=paste&height=346&id=u733583c2&originHeight=346&originWidth=1177&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26571&status=error&style=none&taskId=u9c8861d7-0598-4631-a733-6d30d9a2c14&title=&width=1177)<br />第一个 startup scripts 中填写的是，当启动UE时自动加载的脚本的路径<br />第二个Additional paths 中填写的是 当在UE中使用import模块时 import的额外搜索路径<a name="Ouc7j"></a>## 使用python导入资产<a name="R7ckW"></a>### 导入贴图和音频用到的类：<br />[https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetImportTask.html](https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetImportTask.html)<br />[https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html](https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html)<br />首先先了解一下引擎中的文件路径：这里内容的路径为/Game,因此假如要在内容下创建一个新的Tex文件夹，那么Tex文件夹的路径就是/Game/Tex<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657100608789-ceeb2279-1791-464f-b2fc-99e3b59453bc.png#clientId=ua4789b34-f786-4&errorMessage=unknown%20error&from=paste&height=58&id=u5e6699ed&originHeight=58&originWidth=133&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3362&status=error&style=none&taskId=u2552f489-6209-44c2-8324-2c59e6fe67b&title=&width=133)<br />在ue的编辑界面中按shitf+回车可以输入多行代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">soundPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Sounds/soundTest.mp3&#x27;</span></span><br><span class="line">texPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Texture/test_ORM3.png&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">importMyAssets</span>():  <span class="comment"># 创建导入任务并执行导入</span></span><br><span class="line">    texture_task = buildImportTask(texPath, <span class="string">&#x27;/Game/Textures&#x27;</span>)  <span class="comment"># 通过buildImportTask函数创建一个AssetImportTask对象</span></span><br><span class="line">    sound_task = buildImportTask(soundPath, <span class="string">&#x27;/Game/Sounds&#x27;</span>)  <span class="comment"># 同理</span></span><br><span class="line">    executeImportTasks([texture_task, sound_task])  <span class="comment"># 执行导入操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildImportTask</span>(<span class="params">filename, destination_path</span>):  <span class="comment"># 构建导入任务</span></span><br><span class="line">    task = unreal.AssetImportTask()</span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;automated&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 设置为True后就不会弹出对话框，就是将其设置为自动化</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 可选的要导入的自定义名称，当属性为空时就按照文件名称命名</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_path&#x27;</span>, destination_path)  <span class="comment"># 导入的资源在引擎中的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;filename&#x27;</span>, filename)  <span class="comment"># 要导入的资源在电脑磁盘上的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;replace_existing&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 是否要覆盖资产</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;save&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 导入后保存</span></span><br><span class="line">    <span class="keyword">return</span> task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeImportTasks</span>(<span class="params">tasks</span>):  <span class="comment"># 执行导入任务</span></span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)  <span class="comment"># 通过这行代码将在buildImportTask函数中创建的task对象进行导入</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> task.get_editor_property(<span class="string">&#x27;imported_object_paths&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Imported: %s&#x27;</span> % path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="m5PmG"></a>### 导入静态网格体和骨骼网格体用到的类：<br />[https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxImportUI.html](https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxImportUI.html)<br />[https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxMeshImportData.html](https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxMeshImportData.html)<br />[https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxStaticMeshImportData.html](https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxStaticMeshImportData.html)<br />[https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxSkeletalMeshImportData.html](https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxSkeletalMeshImportData.html)<br />我用的4.26版本的UE，使用这个代码没有办法导入骨骼体，代码已经反复检查几遍了没发现问题。教程中用的是4.21版本的UE。  后来测试后发现是可以的，应该是之前的资产有问题，后来测试用的小白人fbx2018的是可以导入进来的。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">soundPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Sounds/soundTest.mp3&#x27;</span></span><br><span class="line">texPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Texture/test_ORM3.png&#x27;</span></span><br><span class="line">static_mesh_fbx = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/StaticMeshes/sphere.fbx&#x27;</span></span><br><span class="line">skeletal_mesh_fbx = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Skeletal/woman.fbx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">importMyAssets</span>():  <span class="comment"># 创建导入任务并执行导入</span></span><br><span class="line">    <span class="comment"># texture_task = buildImportTask(texPath, &#x27;/Game/Textures&#x27;)  # 通过buildImportTask函数创建一个AssetImportTask对象</span></span><br><span class="line">    <span class="comment"># sound_task = buildImportTask(soundPath, &#x27;/Game/Sounds&#x27;)  # 同理</span></span><br><span class="line">    <span class="comment"># executeImportTasks([texture_task, sound_task])  # 执行导入操作</span></span><br><span class="line">    static_mesh_task = buildImportTask(static_mesh_fbx, <span class="string">&#x27;/Game/StaticMeshes&#x27;</span>, buildStaticMeshImportOptions())</span><br><span class="line">    skeletal_mesh_task = buildImportTask(skeletal_mesh_fbx, <span class="string">&#x27;/Game/SkeletalMeshes&#x27;</span>, buildSkeletalMeshImportOptions())</span><br><span class="line">    executeImportTasks([static_mesh_task, skeletal_mesh_task])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetImportTask.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildImportTask</span>(<span class="params">filename, destination_path, options=<span class="literal">None</span></span>):  <span class="comment"># 构建导入任务</span></span><br><span class="line">    task = unreal.AssetImportTask()</span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;automated&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 设置为True后就不会弹出对话框，就是将其设置为自动化</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 可选的要导入的自定义名称，当属性为空时就按照文件名称命名</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_path&#x27;</span>, destination_path)  <span class="comment"># 导入的资源在引擎中的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;filename&#x27;</span>, filename)  <span class="comment"># 要导入的资源在电脑磁盘上的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;replace_existing&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 是否要覆盖资产</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;save&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 导入后保存</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;options&#x27;</span>, options)  <span class="comment"># 当导入fbx这种资产需要额外的导入选项，需要创建FbxImportUI对象来传递</span></span><br><span class="line">    <span class="keyword">return</span> task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeImportTasks</span>(<span class="params">tasks</span>):  <span class="comment"># 执行导入任务</span></span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)  <span class="comment"># 通过这行代码将在buildImportTask函数中创建的task对象进行导入</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> task.get_editor_property(<span class="string">&#x27;imported_object_paths&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Imported: %s&#x27;</span> % path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildStaticMeshImportOptions</span>():</span><br><span class="line">    options = unreal.FbxImportUI()</span><br><span class="line">    <span class="comment"># unreal.FbxImportUI</span></span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_mesh&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_textures&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_materials&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_as_skeletal&#x27;</span>, <span class="literal">False</span>)  <span class="comment"># Static Mesh</span></span><br><span class="line">    <span class="comment"># unreal.FbxMeshImportData</span></span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;import_uniform_scale&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="comment"># unreal.FbxStaticMeshImportData</span></span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;combine_meshes&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;generate_lightmap_u_vs&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;auto_generate_collision&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildSkeletalMeshImportOptions</span>():</span><br><span class="line">    options = unreal.FbxImportUI()</span><br><span class="line">    <span class="comment"># unreal.FbxImportUI</span></span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_mesh&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_textures&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_materials&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_as_skeletal&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># Skeletal Mesh</span></span><br><span class="line">    <span class="comment"># unreal.FbxMeshImportData</span></span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_uniform_scale&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="comment"># unreal.FbxSkeletalMeshImportData</span></span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_morph_targets&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;update_skeleton_reference_pose&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="VWzOM"></a>### 导入动画跟导入静态网格体差不多，就是导入动画时的额外设置略有不同，并且创建任务需要使用导入动画的设置时需要指定动画依赖的骨骼的路径。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildAnimationImportOptions</span>(<span class="params">skeleton_path</span>):</span><br><span class="line">    options = unreal.FbxImportUI()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否导入动画</span></span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_animations&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 导入骨架的位置</span></span><br><span class="line">    options.skeleton = unreal.load_asset(skeleton_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置动画序列的内容</span></span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;import_uniform_scale&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动画的长度</span></span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;animation_length&#x27;</span>,</span><br><span class="line">                                                          unreal.FBXAnimationLengthImportType.FBXALIT_EXPORTED_TIME)</span><br><span class="line">    <span class="comment"># 去掉冗余的关键帧</span></span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;remove_redundant_keys&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeImportTasks</span>(<span class="params">tasks</span>):  <span class="comment"># 执行导入任务</span></span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)  <span class="comment"># 通过这行代码将在buildImportTask函数中创建的task对象进行导入</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> task.get_editor_property(<span class="string">&#x27;imported_object_paths&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Imported: %s&#x27;</span> % path)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">importMyAssets</span>():  <span class="comment"># 创建导入任务并执行导入</span></span><br><span class="line">    animation_fbx = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Animation/Animation.fbx&#x27;</span></span><br><span class="line">    animation_fbx_task = buildImportTask(animation_fbx, <span class="string">&#x27;/Game/Animations&#x27;</span>, buildStaticMeshImportOptions(<span class="string">&#x27;/Game/SkeletalMeshes/man_Skeleton&#x27;</span>))</span><br><span class="line">    executeImportTasks([animation_fbx_task])</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="NZzHf"></a>### 创建、复制、删除、重命名资产和文件夹这些东西可以直接复制到UE的代码编辑框中执行看看效果<br />针对资产编辑器中的内容都要使用unreal.EditorAssetLibrary中的方法，例如创建复制删除重命名文件夹，复制删除重命名资产，判段资产是否存在。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDirectory</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.make_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duplicateDirectory</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorAssetLibrary.duplicate_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>,</span><br><span class="line">                                                         <span class="string">&#x27;/Game/MyAsset/MyNewDirectory_Duplicated&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteDirectory</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.delete_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">renameDirectory</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorAssetLibrary.rename_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory_Duplicated&#x27;</span>,</span><br><span class="line">                                                      <span class="string">&#x27;/Game/MyAsset/MyNewDirectory_Renamed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duplicateAsset</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorAssetLibrary.duplicate_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3&#x27;</span>,</span><br><span class="line">                                                     <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_duplicate&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteAsset</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.delete_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断资产是否存在</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">assetExist</span>():</span><br><span class="line">    <span class="built_in">print</span>(unreal.EditorAssetLibrary.does_asset_exist(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line">    <span class="built_in">print</span>(unreal.EditorAssetLibrary.does_asset_exist(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_duplicate&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">renameAsset</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.rename_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_duplicate&#x27;</span>,</span><br><span class="line">                                           <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示复制资产提示框</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duplicateAssetDialog</span>(<span class="params">show_dialog=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">if</span> show_dialog:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().duplicate_asset_with_dialog(<span class="string">&#x27;test_ORM3_Duplicated&#x27;</span>,</span><br><span class="line">                                                                               <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>,</span><br><span class="line">                                                                               unreal.load_asset(</span><br><span class="line">                                                                                   <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().duplicate_asset(<span class="string">&#x27;test_ORM3_Duplicated&#x27;</span>, <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>,</span><br><span class="line">                                                                   unreal.load_asset(</span><br><span class="line">                                                                       <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示重命名提示框</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">renameAssetDialog</span>(<span class="params">show_dialog=<span class="literal">True</span></span>):</span><br><span class="line">    first_rename_data = unreal.AssetRenameData(unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>),</span><br><span class="line">                                               <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>, <span class="string">&#x27;test_ORM3_Renamed_2&#x27;</span>)</span><br><span class="line">    second_rename_data = unreal.AssetRenameData(unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Duplicated&#x27;</span>),</span><br><span class="line">                                                <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>, <span class="string">&#x27;test_ORM3_Duplicated_Renamed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> show_dialog:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().rename_assets_with_dialog([first_rename_data, second_rename_data])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().rename_assets([first_rename_data, second_rename_data])</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="PpzFb"></a>## 使用python调用C++函数![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657180848774-09e0c281-f9ff-4319-8543-572f2578bf66.png#clientId=u05c02e16-dea5-4&errorMessage=unknown%20error&from=paste&height=1055&id=uc2993bf1&originHeight=1055&originWidth=1694&originalType=binary&ratio=1&rotation=0&showTitle=false&size=464364&status=error&style=none&taskId=ub4686a20-e257-4b92-8c09-42873fc6f90&title=&width=1694)<br />取名字为ZFunctions![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657181259643-9ffac0ff-7d24-4cec-b669-1c639a650814.png#clientId=u05c02e16-dea5-4&errorMessage=unknown%20error&from=paste&height=426&id=u3724a30b&originHeight=426&originWidth=1294&originalType=binary&ratio=1&rotation=0&showTitle=false&size=236790&status=error&style=none&taskId=ufa38904a-fc3f-41d5-9673-5d2f3346b54&title=&width=1294)<br />创建这个类以后，UE会自动编译打开VisualStudio。![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657181358854-4381aeec-353e-4adf-b83b-df6db40f2d58.png#clientId=u05c02e16-dea5-4&errorMessage=unknown%20error&from=paste&height=56&id=u6d9a0b40&originHeight=56&originWidth=280&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3120&status=error&style=none&taskId=u829356b5-6591-486c-975e-1e13799faf8&title=&width=280)<br />ZFunctions.h文件内容：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ZFunctions.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UZFunctions : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable) <span class="comment">// 将函数暴露给蓝图</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CalledFromPython</span><span class="params">(FString InputString)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>ZFunctions.cpp文件内容：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ZFunctions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UZFunctions::CalledFromPython</span><span class="params">(FString InputString)</span> </span>&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), *InputString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>内容写好后就可以<br />然后我们可以在编辑器中通过<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">sorted</span><span class="params">(dir(unreal))</span>:</span></span><br><span class="line"><span class="function">print (x)</span></span><br></pre></td></tr></table></figure>打印出目前UE项目中所有的类。<br />可以在输出中找到![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657182694150-31ce542e-d3cb-4b0e-a93b-6c225785a350.png#clientId=u05c02e16-dea5-4&errorMessage=unknown%20error&from=paste&height=145&id=u2a52dbed&originHeight=145&originWidth=313&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8849&status=error&style=none&taskId=ufa7c4b05-c548-4d88-9499-f68a1155c1e&title=&width=313)那就可以使用了。<br />然后我们可以在编辑器中通过<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">sorted</span><span class="params">(dir(unreal.ZFunctions))</span>:</span></span><br><span class="line"><span class="function">print (x)</span></span><br></pre></td></tr></table></figure>打印出ZFunctions中的所有方法。<br />可以找到刚才定义的方法：![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657183307392-331af0d3-d301-40f4-a2a0-98c7462fc9be.png#clientId=u05c02e16-dea5-4&errorMessage=unknown%20error&from=paste&height=34&id=u421c198a&originHeight=34&originWidth=188&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2734&status=error&style=none&taskId=u21569621-69ee-42c7-80a6-99daa375831&title=&width=188) 可以发现我们明明写的是CalledFromPython，但是UE会自动将命名更改为called_from_python<br />然后我们就可以在UE中使用这个方法了<br />通过代码 unreal.ZFunctions.called_from_python('11111')<br />会使用这个方法的功能，让UE打印一个UE_LOG<br />UE_LOG(LogTemp, Error, TEXT("%s"), *InputString)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657183613159-578d21d4-7ccc-4af3-b559-eacbac054041.png#clientId=u05c02e16-dea5-4&errorMessage=unknown%20error&from=paste&height=39&id=u0407f35d&originHeight=39&originWidth=453&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5632&status=error&style=none&taskId=u05975b26-9e44-47a8-955a-cc3ea483de2&title=&width=453)<a name="WPpVr"></a>## 改变文件夹的颜色要想修改文件夹的颜色依然需要使用C++，只不过可以通过python语句调用C++函数来实现简单的批量操作...<br />因此依然通过继承Blueprint  Fuction Library 类来创建我们的自定义类。取名为CppLib<a name="wCOD1"></a>### CppLib.h<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><a name="UvDZx"></a>### CppLib.cpp<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="W75gc"></a>### 写完c++后可以通过蓝图调用函数![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657531899356-6d006729-9afd-4c8d-97fa-7e4c83175f8d.png#clientId=uc78214b9-d920-4&errorMessage=unknown%20error&from=paste&height=698&id=u8d7183c3&originHeight=698&originWidth=1749&originalType=binary&ratio=1&rotation=0&showTitle=false&size=152825&status=error&style=none&taskId=ufda12786-170b-4acb-949b-2e9b50aaa76&title=&width=1749)<br />勾选自定义事件的 Call In Editor 就可以在外面手动点击触发自定义事件了。![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657531961768-a20a0216-2c47-4822-b19d-a691543d9ee1.png#clientId=uc78214b9-d920-4&errorMessage=unknown%20error&from=paste&height=624&id=uf50a7119&originHeight=624&originWidth=610&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58905&status=error&style=none&taskId=ud772c6cb-8db3-4fb6-8261-c2ea8d3d472&title=&width=610)如果是已经存在的文件夹路径，那么点击按钮后不会立刻改变文件夹的颜色，需要重新启动才能够发现改变。不存在的文件夹路径，当创建好对应的文件夹后，文件夹会自动改变颜色。<a name="oHHlX"></a>### python调用函数实现批量更改<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># import folderColor as fc</span></span><br><span class="line"><span class="meta"># from imp import reload</span></span><br><span class="line"><span class="meta"># reload(fc)</span></span><br><span class="line"><span class="meta"># fc.generateColoredDirectories()</span></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">generateColoredDirectories</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">    for x in range(<span class="number">100</span>, <span class="number">400</span>):</span></span><br><span class="line"><span class="function">        dir_path =</span> <span class="string">&#x27;/Game/PythonGenerated/&#x27;</span> + <span class="built_in">str</span>(x)</span><br><span class="line">        linear_color = <span class="built_in">getGradientColor</span>(x)</span><br><span class="line">        unreal.CppLib.<span class="built_in">set_folder_color</span>(dir_path, linear_color)</span><br><span class="line">        unreal.EditorAssetLibrary.<span class="built_in">make_directory</span>(dir_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">getGradientColor</span>(x):</span><br><span class="line">    x = x - <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">100</span>:</span><br><span class="line">        r = <span class="number">1.0</span> - x / <span class="number">100.0</span></span><br><span class="line">        g = <span class="number">0.0</span> + x / <span class="number">100.0</span></span><br><span class="line">        b = <span class="number">0.0</span></span><br><span class="line">    elif x &lt; <span class="number">200</span>:</span><br><span class="line">        r = <span class="number">0.0</span></span><br><span class="line">        g = <span class="number">1.0</span> - (x - <span class="number">100</span>) / <span class="number">100.0</span></span><br><span class="line">        b = <span class="number">0.0</span> + (x - <span class="number">100</span>) / <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = <span class="number">0.0</span> + (x - <span class="number">200</span>) / <span class="number">100.0</span></span><br><span class="line">        g = <span class="number">0.0</span></span><br><span class="line">        b = <span class="number">1.0</span> - (x - <span class="number">200</span>) / <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">return</span> unreal.<span class="built_in">LinearColor</span>(r, g, b, <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>效果：![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1657534605188-5fd07b83-fbb3-4314-a553-0d49666f707e.png#clientId=uc78214b9-d920-4&errorMessage=unknown%20error&from=paste&height=434&id=ud7d21ee3&originHeight=434&originWidth=2058&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136042&status=error&style=none&taskId=u862795a0-5e66-40c1-a790-af9d4d9819b&title=&width=2058)<a name="yacQ4"></a>## 如何使用c++和Python打开和关闭资产python 只能打开资产，关闭资产需要通过C++来实现。<a name="UIkJl"></a>### 先看python如何打开资产<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="comment"># 在ue中执行的调用命令</span></span><br><span class="line"><span class="comment"># from imp import reload</span></span><br><span class="line"><span class="comment"># import openAssets_10 as oa</span></span><br><span class="line"><span class="comment"># reload(oa)</span></span><br><span class="line"><span class="comment"># oa.openAssets()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openAssets</span>():</span><br><span class="line">    assets = [unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Sounds/soundTest&#x27;</span>),</span><br><span class="line">              unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/light_setAOVs&#x27;</span>),</span><br><span class="line">              unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/light_createShot&#x27;</span>),</span><br><span class="line">              unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/light_importLight&#x27;</span>)]</span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().open_editor_for_assets(assets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义的C++类中的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAllOpenedAssets</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.CppLib.get_assets_opened_in_editor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closeAssets</span>():</span><br><span class="line">    assets = getAllOpenedAssets()</span><br><span class="line">    unreal.CppLib.close_editor_for_assets(assets)</span><br></pre></td></tr></table></figure><a name="HUW7O"></a>### UE中模块修改![image.png](https://cdn.nlark.com/yuque/0/2022/png/2623605/1659002804160-678071e2-135e-4dff-9291-df6ea04cb85e.png#clientId=u88952200-365e-4&errorMessage=unknown%20error&from=paste&height=583&id=uc0dc5e8a&originHeight=583&originWidth=324&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20749&status=error&style=none&taskId=u71ae05de-611d-40ba-86c3-3f49a71bef2&title=&width=324)这个.Build.cs格式的是当前项目的模块<br />进入这个模块需要修改：<br />主要是增加了一项："UnrealEd"<p><a name="JrJq3"></a></p><h3 id="CPlusPlusTest-Build-cs"><a href="#CPlusPlusTest-Build-cs" class="headerlink" title="CPlusPlusTest.Build.cs"></a>CPlusPlusTest.Build.cs</h3><p>首先说明一下这里的CPlusPlusTest是ue4.27中创建的项目名<br />在原有的基础上新增了”UnrealEd”<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659003281786-9ec3ec8a-52f6-43de-969b-357743238a21.png#clientId=u88952200-365e-4&errorMessage=unknown%20error&from=paste&height=527&id=u4e1a4527&originHeight=527&originWidth=2030&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92636&status=error&style=none&taskId=u602760b9-d2f1-40d6-9760-60ca217cda8&title=&width=2030" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPlusPlusTest</span> : ModuleRules</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CPlusPlusTest</span><span class="params">(ReadOnlyTargetRules Target)</span> : base(Target)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line"></span><br><span class="line">PublicDependencyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>, <span class="string">&quot;HeadMountedDisplay&quot;</span>, <span class="string">&quot;UnrealEd&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="IxqdD"></a></p><h3 id="CppLib-h"><a href="#CppLib-h" class="headerlink" title="CppLib.h"></a>CppLib.h</h3><p>在上一节的基础上 新增了两个函数：<br />CloseEditorForAssets<br />GetAssetsOpendInEditor</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;UObject*&gt; <span class="title">GetAssetsOpenedInEditor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="YAVAV"></a></p><h3 id="CppLib-cpp"><a href="#CppLib-cpp" class="headerlink" title="CppLib.cpp"></a>CppLib.cpp</h3><p>这里除了定义函数功能还有个要注意的是要include “Editor.h”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/UnrealEd/Public/Toolkits/AssetEditorManager.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line"><span class="keyword">for</span> (UObject* Asset : Assets) &#123;</span><br><span class="line">AssetEditorSubsystem-&gt;<span class="built_in">CloseAllEditorsForAsset</span>(Asset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;UObject*&gt; <span class="title">UCppLib::GetAssetsOpenedInEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;<span class="built_in">GetAllEditedAssets</span>();</span><br><span class="line"><span class="keyword">return</span> EditedAssets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="mq42D"></a></p><h3 id="在UE中进行调用"><a href="#在UE中进行调用" class="headerlink" title="在UE中进行调用"></a>在UE中进行调用</h3><p>from imp import reload<br />import openAssets_10 as oa<br />reload(oa)<br />oa.openAssets()# 打开资产<br />oa.closeAssets()# 关闭资产<br />oa.getAllOpenedAssets()#得到当前打开的资产的信息（需要用一个变量来接受它，是一个列表）<br><a name="KycrD"></a></p><h2 id="使用Python和C-选择内容浏览器的资产"><a href="#使用Python和C-选择内容浏览器的资产" class="headerlink" title="使用Python和C ++选择内容浏览器的资产"></a>使用Python和C ++选择内容浏览器的资产</h2><p><a name="Nghfs"></a></p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>使用python来选择有弊端，就是它不能选择文件夹以及关卡，因此还要介绍通过C++如何选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="comment"># from imp import reload</span></span><br><span class="line"><span class="comment"># import selectAssets_11 as sa</span></span><br><span class="line"><span class="comment"># reload(sa)</span></span><br><span class="line"><span class="comment"># sa.showAssetsInContentBrowser()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showAssetsInContentBrowser</span>():</span><br><span class="line">    paths = [<span class="string">&#x27;/Game/MyAsset/Sounds/SoundTest&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;/Game/MyAsset/Textures/light_setAOVs&#x27;</span>]</span><br><span class="line">    unreal.EditorAssetLibrary.sync_browser_to_objects(paths)</span><br></pre></td></tr></table></figure><p><a name="Eu4Sv"></a></p><h3 id="CPlusPlusTest-Build-cs-1"><a href="#CPlusPlusTest-Build-cs-1" class="headerlink" title="CPlusPlusTest.Build.cs"></a>CPlusPlusTest.Build.cs</h3><p>又新增了这三个，因为.cpp用到了Module<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659063963423-a412bbf8-0b53-46af-b1dd-7d79fe83847f.png#clientId=u765cde32-d8a7-4&errorMessage=unknown%20error&from=paste&height=241&id=u5e93f960&originHeight=241&originWidth=1013&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78968&status=error&style=none&taskId=u8231aafe-0b3a-498c-80ca-6d9b767c64a&title=&width=1013" alt="image.png">  最后的EditorWidgets不添加的话编译不了，教程中没有加这个，UE4.27，VS2019需要加EditorWidgets，加了以后就可以用了<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659071465975-e002a595-a779-4c77-b83a-343028d3efd2.png#clientId=u765cde32-d8a7-4&errorMessage=unknown%20error&from=paste&height=252&id=u6df4cf01&originHeight=252&originWidth=1590&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27687&status=error&style=none&taskId=u2ffc3186-426c-469f-b854-54204f052d9&title=&width=1590" alt="image.png"><br><a name="O69Kh"></a></p><h3 id="CppLib-h-1"><a href="#CppLib-h-1" class="headerlink" title="CppLib.h"></a>CppLib.h</h3><p>到现在我才发现在头文件里面写了构造函数后可以通过左边的螺丝刀图标快速创建在源文件中<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659064115807-08559492-b055-410a-ab08-a01ba6e0b0a1.png#clientId=u765cde32-d8a7-4&errorMessage=unknown%20error&from=paste&height=105&id=uc3682901&originHeight=105&originWidth=321&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12833&status=error&style=none&taskId=u4f3b1f25-c1f6-4aca-ba83-1859c310e14&title=&width=321" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>; <span class="comment">// 批量创建文件夹并修改颜色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span></span>; <span class="comment">// 关闭打开的资产的窗口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;UObject*&gt; <span class="title">GetAssetsOpenedInEditor</span><span class="params">()</span></span>; <span class="comment">// 获得已经打开资产窗口的资产的路径字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedAssets</span><span class="params">()</span></span>; <span class="comment">// 获得选择的资产的路径字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedFolders</span><span class="params">()</span></span>; <span class="comment">// 获得选择的文件夹的路径字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的资产</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的文件夹</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="W1fC1"></a></p><h3 id="CppLib-cpp-1"><a href="#CppLib-cpp-1" class="headerlink" title="CppLib.cpp"></a>CppLib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/UnrealEd/Public/Toolkits/AssetEditorManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Public/ContentBrowserModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Private/ScontentBrowser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/AssetRegistry/Public/AssetRegistryModule.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line"><span class="keyword">for</span> (UObject* Asset : Assets) &#123;</span><br><span class="line">AssetEditorSubsystem-&gt;<span class="built_in">CloseAllEditorsForAsset</span>(Asset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;UObject*&gt; <span class="title">UCppLib::GetAssetsOpenedInEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;<span class="built_in">GetAllEditedAssets</span>();</span><br><span class="line"><span class="keyword">return</span> EditedAssets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedAssets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">TArray&lt;FAssetData&gt; SelectedAssets;</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedAssets</span>(SelectedAssets);</span><br><span class="line">TArray&lt;FString&gt; Result;</span><br><span class="line"><span class="keyword">for</span> (FAssetData&amp; AssetData : SelectedAssets) &#123;</span><br><span class="line">Result.<span class="built_in">Add</span>(AssetData.PackageName.<span class="built_in">ToString</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedFolders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedFolders</span>(SelectedFolders);</span><br><span class="line"><span class="keyword">return</span> SelectedFolders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">FAssetRegistryModule&amp; AssetRegistryModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetRegistryModule&gt;(<span class="string">&quot;AssetRegistry&quot;</span>);</span><br><span class="line">TArray&lt;FName&gt; PathsName;</span><br><span class="line"><span class="keyword">for</span> (FString Path : Paths) &#123;</span><br><span class="line">PathsName.<span class="built_in">Add</span>(*Path);</span><br><span class="line">&#125;</span><br><span class="line">FARFilter AssetFilter;</span><br><span class="line">AssetFilter.PackageNames = PathsName;</span><br><span class="line">TArray&lt;FAssetData&gt; AssetDatas;</span><br><span class="line">AssetRegistryModule.<span class="built_in">Get</span>().<span class="built_in">GetAssets</span>(AssetFilter, AssetDatas);</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToAssets</span>(AssetDatas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToFolders</span>(Paths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="vAd5P"></a></p><h2 id="如何用Python显示缓慢的任务进度"><a href="#如何用Python显示缓慢的任务进度" class="headerlink" title="如何用Python显示缓慢的任务进度"></a>如何用Python显示缓慢的任务进度</h2><p>执行循环的过程的同时显示进度：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659079195804-be1a6f84-5236-4712-95d1-5eaf4518c3cd.png#clientId=u765cde32-d8a7-4&errorMessage=unknown%20error&from=paste&height=166&id=u12c81568&originHeight=166&originWidth=859&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29624&status=error&style=none&taskId=u05ec8549-fa39-408c-8a5d-d38cf9c9741&title=&width=859" alt="image.png"><br><a name="w8RHJ"></a></p><h3 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># from imp import reload</span></span><br><span class="line"><span class="comment"># import showSlowTasksProgression_12 as test</span></span><br><span class="line"><span class="comment"># reload(test)</span></span><br><span class="line"><span class="comment"># test.executeSlowTask()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeSlowTask</span>():</span><br><span class="line">    quantity_steps_in_slow_task = <span class="number">10000</span></span><br><span class="line">    <span class="keyword">with</span> unreal.ScopedSlowTask(quantity_steps_in_slow_task, <span class="string">&#x27;My Slow Task Text ...&#x27;</span>) <span class="keyword">as</span> slow_task:</span><br><span class="line">        slow_task.make_dialog(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(quantity_steps_in_slow_task):</span><br><span class="line">            <span class="keyword">if</span> slow_task.should_cancel():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            slow_task.enter_progress_frame(<span class="number">1</span>, <span class="string">&#x27;My Slow Task Text ...&#x27;</span> + <span class="built_in">str</span>(x) + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(quantity_steps_in_slow_task))</span><br><span class="line">            <span class="comment"># Execute slow logic</span></span><br><span class="line">            deferredSpawnActor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deferredSpawnActor</span>():</span><br><span class="line">    world = unreal.EditorLevelLibrary.get_editor_world()</span><br><span class="line">    actor_class = unreal.EditorAssetLibrary.load_blueprint_class(<span class="string">&#x27;/Game/MyBluePrint/BPActor&#x27;</span>)</span><br><span class="line">    actor_location = unreal.Vector(random.uniform(<span class="number">0.0</span>, <span class="number">2000.0</span>), random.uniform(<span class="number">0.0</span>, <span class="number">2000.0</span>), <span class="number">0.0</span>)</span><br><span class="line">    actor_rotation = unreal.Rotator(random.uniform(<span class="number">0.0</span>, <span class="number">360.0</span>), random.uniform(<span class="number">0.0</span>, <span class="number">360.0</span>), random.uniform(<span class="number">0.0</span>, <span class="number">360.0</span>))</span><br><span class="line">    actor_scale = unreal.Vector(random.uniform(<span class="number">0.1</span>, <span class="number">2.0</span>), random.uniform(<span class="number">0.1</span>, <span class="number">2.0</span>), random.uniform(<span class="number">0.1</span>, <span class="number">2.0</span>))</span><br><span class="line">    actor_transform = unreal.Transform(actor_location, actor_rotation, actor_scale)</span><br><span class="line">    <span class="comment"># actor = unreal.GameplayStatics.begin_deferred_actor_spawn_from_class(world, actor_class, actor_transform)</span></span><br><span class="line">    <span class="comment"># unreal.GameplayStatics.finish_spawning_actor(actor, actor_transform)</span></span><br><span class="line">    actor = unreal.CppLib.get_actor(world, actor_class, actor_transform)</span><br><span class="line">    unreal.CppLib.set_actor(actor,actor_transform)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="FhjgO"></a></p><h3 id="CppLib-h-2"><a href="#CppLib-h-2" class="headerlink" title="CppLib.h"></a>CppLib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>; <span class="comment">// 批量创建文件夹并修改颜色</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span></span>; <span class="comment">// 关闭打开的资产的窗口</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> TArray&lt;UObject*&gt; <span class="title">GetAssetsOpenedInEditor</span><span class="params">()</span></span>; <span class="comment">// 获得已经打开资产窗口的资产的路径字符串列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedAssets</span><span class="params">()</span></span>; <span class="comment">// 获得选择的资产的路径字符串列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedFolders</span><span class="params">()</span></span>; <span class="comment">// 获得选择的文件夹的路径字符串列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的资产</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的文件夹</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> AActor* <span class="title">GetActor</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject,TSubclassOf&lt; AActor &gt; ActorClass,<span class="type">const</span> FTransform&amp; SpawnTransform)</span></span>; <span class="comment">// 获取ActorBP</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">setActor</span><span class="params">(<span class="keyword">class</span> AActor* Actor,<span class="type">const</span> FTransform&amp; SpawnTransform)</span></span>; <span class="comment">// 创建AcotrBP</span></span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="JryYA"></a></p><h3 id="CppLib-cpp-2"><a href="#CppLib-cpp-2" class="headerlink" title="CppLib.cpp"></a>CppLib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/UnrealEd/Public/Toolkits/AssetEditorManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Public/ContentBrowserModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Private/ScontentBrowser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/AssetRegistry/Public/AssetRegistryModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Engine/Classes/Kismet/GameplayStatics.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">    GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;</span><br><span class="line">    UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">    <span class="keyword">for</span> (UObject* Asset : Assets) &#123;</span><br><span class="line">        AssetEditorSubsystem-&gt;<span class="built_in">CloseAllEditorsForAsset</span>(Asset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;UObject*&gt; <span class="title">UCppLib::GetAssetsOpenedInEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">    TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;<span class="built_in">GetAllEditedAssets</span>();</span><br><span class="line">    <span class="keyword">return</span> EditedAssets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedAssets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    TArray&lt;FAssetData&gt; SelectedAssets;</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedAssets</span>(SelectedAssets);</span><br><span class="line">    TArray&lt;FString&gt; Result;</span><br><span class="line">    <span class="keyword">for</span> (FAssetData&amp; AssetData : SelectedAssets) &#123;</span><br><span class="line">        Result.<span class="built_in">Add</span>(AssetData.PackageName.<span class="built_in">ToString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedFolders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedFolders</span>(SelectedFolders);</span><br><span class="line">    <span class="keyword">return</span> SelectedFolders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    FAssetRegistryModule&amp; AssetRegistryModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetRegistryModule&gt;(<span class="string">&quot;AssetRegistry&quot;</span>);</span><br><span class="line">    TArray&lt;FName&gt; PathsName;</span><br><span class="line">    <span class="keyword">for</span> (FString Path : Paths) &#123;</span><br><span class="line">        PathsName.<span class="built_in">Add</span>(*Path);</span><br><span class="line">    &#125;</span><br><span class="line">    FARFilter AssetFilter;</span><br><span class="line">    AssetFilter.PackageNames = PathsName;</span><br><span class="line">    TArray&lt;FAssetData&gt; AssetDatas;</span><br><span class="line">    AssetRegistryModule.<span class="built_in">Get</span>().<span class="built_in">GetAssets</span>(AssetFilter, AssetDatas);</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToAssets</span>(AssetDatas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToFolders</span>(Paths);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">AActor* <span class="title">UCppLib::GetActor</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject, TSubclassOf&lt;AActor&gt; ActorClass, <span class="type">const</span> FTransform&amp; SpawnTransform)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UGameplayStatics::<span class="built_in">BeginDeferredActorSpawnFromClass</span>(WorldContextObject, ActorClass, SpawnTransform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::setActor</span><span class="params">(AActor* Actor, <span class="type">const</span> FTransform&amp; SpawnTransform)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UGameplayStatics::<span class="built_in">FinishSpawningActor</span>(Actor, SpawnTransform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ywGiE"></a></p><h2 id="打印类的所有属性"><a href="#打印类的所有属性" class="headerlink" title="打印类的所有属性"></a>打印类的所有属性</h2><p><a name="ToiOf"></a></p><h3 id="Cpplib-h"><a href="#Cpplib-h" class="headerlink" title="Cpplib.h"></a>Cpplib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="type">static</span> TArray&lt;FString&gt;<span class="built_in">GetAllProperties</span>(UClass* Class);  <span class="comment">//获取类的所有属性</span></span><br></pre></td></tr></table></figure><p><a name="Zvf6B"></a></p><h3 id="Cpplib-cpp"><a href="#Cpplib-cpp" class="headerlink" title="Cpplib.cpp"></a>Cpplib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetAllProperties</span><span class="params">(UClass* Class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray&lt;FString&gt; Ret;</span><br><span class="line"><span class="keyword">if</span> (Class != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (TFieldIterator&lt;UProperty&gt; <span class="built_in">It</span>(Class); It; ++It) &#123;</span><br><span class="line">UProperty* Property = *It;</span><br><span class="line"><span class="keyword">if</span> (Property-&gt;<span class="built_in">HasAnyPropertyFlags</span>(EPropertyFlags::CPF_Edit)) &#123;</span><br><span class="line">Ret.<span class="built_in">Add</span>(Property-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">TArray</span>&lt;FString&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="p9fCp"></a></p><h3 id="python-2"><a href="#python-2" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAllProperties</span>(<span class="params">object_class</span>):</span><br><span class="line">    <span class="keyword">return</span> unreal.CppLib.get_all_properties(object_class)  <span class="comment"># 通过自定义C++的类中的函数，得到所有属性的字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printAllProperties</span>():</span><br><span class="line">    obj = unreal.Actor()  <span class="comment"># 将打印actor类型的所有属性</span></span><br><span class="line">    object_class = obj.get_class()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> getAllProperties(object_class):</span><br><span class="line">        y = x</span><br><span class="line">        <span class="comment"># while循环的作用是为了对齐字符串</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(y) &lt; <span class="number">42</span>:</span><br><span class="line">            y = <span class="string">&#x27; &#x27;</span> + y</span><br><span class="line">        <span class="built_in">print</span>(y + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(obj.get_editor_property(x)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ABily"></a></p><h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662010703000-8b4963c7-8191-4200-9333-ddecc3455391.png#clientId=u22a16aa5-3892-4&errorMessage=unknown%20error&from=paste&height=559&id=u9b275170&originHeight=559&originWidth=979&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110690&status=error&style=none&taskId=u296b7b42-73fd-42fe-9c35-1f927f96924&title=&width=979" alt="image.png"><br><a name="taWQV"></a></p><h2 id="一次性执行多个cmd命令"><a href="#一次性执行多个cmd命令" class="headerlink" title="一次性执行多个cmd命令"></a>一次性执行多个cmd命令</h2><p><a name="tIQjq"></a></p><h3 id="CppLib-h-3"><a href="#CppLib-h-3" class="headerlink" title="CppLib.h"></a>CppLib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ExecuteConsoleCommand</span><span class="params">(FString ConsoleCmd)</span></span>; <span class="comment">//执行多行命令行</span></span><br></pre></td></tr></table></figure><p><a name="nVxcr"></a></p><h3 id="CppLib-cpp-3"><a href="#CppLib-cpp-3" class="headerlink" title="CppLib.cpp"></a>CppLib.cpp</h3><p>需要#include “Editor.h”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::ExecuteConsoleCommand</span><span class="params">(FString ConsoleCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (GEditor) &#123;</span><br><span class="line">UWorld* World = GEditor-&gt;<span class="built_in">GetEditorWorldContext</span>().<span class="built_in">World</span>();</span><br><span class="line"><span class="keyword">if</span> (World) &#123;</span><br><span class="line">GEditor-&gt;<span class="built_in">Exec</span>(World, *ConsoleCmd, *GLog);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="kAYMM"></a></p><h3 id="python-3"><a href="#python-3" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeConsoleCommand</span>():</span><br><span class="line">    console_cmd = [<span class="string">&#x27;r.ScreenPercentage 0.1&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;r.Color.Max 6&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;stat fps&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;stat unit&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> console_cmd:</span><br><span class="line">        unreal.CppLib.execute_console_command(x)</span><br></pre></td></tr></table></figure><p><a name="jqYhG"></a></p><h2 id="选择场景中的actor与清除选择"><a href="#选择场景中的actor与清除选择" class="headerlink" title="选择场景中的actor与清除选择"></a>选择场景中的actor与清除选择</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_selected_actors</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorLevelLibrary.get_selected_level_actors()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_selected_actors_EXAMPLE</span>():</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> get_selected_actors():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_actors</span>(<span class="params">actors_to_select=[]</span>):</span><br><span class="line">    unreal.EditorLevelLibrary.set_selected_level_actors(actors_to_select)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_actors_EXAMPLE</span>():</span><br><span class="line">    all_actors = unreal.EditorLevelLibrary.get_all_level_actors()</span><br><span class="line">    actors_to_select = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(all_actors)):</span><br><span class="line">        actors_to_select.append(all_actors[x])</span><br><span class="line">    select_actors(actors_to_select)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_actor_selection_EXAMPLE</span>():</span><br><span class="line">    select_actors()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="mW84U"></a></p><h2 id="生成默认资源（材质粒子关卡等）"><a href="#生成默认资源（材质粒子关卡等）" class="headerlink" title="生成默认资源（材质粒子关卡等）"></a>生成默认资源（材质粒子关卡等）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建基础资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_generic_asset</span>(<span class="params">asset_path=<span class="string">&#x27;&#x27;</span>, unique_name=<span class="literal">True</span>, asset_class=<span class="literal">None</span>, asset_factory=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> unique_name:  <span class="comment"># 如果命名冲突的话会自动生成一个新的唯一的路径名字(后缀加数字)</span></span><br><span class="line">        asset_path, asset_name = unreal.AssetToolsHelpers.get_asset_tools().create_unique_asset_name(</span><br><span class="line">            base_package_name=asset_path, suffix=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> unreal.EditorAssetLibrary.does_asset_exist(asset_path=asset_path):</span><br><span class="line">        path = asset_path.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        name = asset_path.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> unreal.AssetToolsHelpers.get_asset_tools().create_asset(</span><br><span class="line">            asset_name=name,</span><br><span class="line">            package_path=path,</span><br><span class="line">            asset_class=asset_class,</span><br><span class="line">            factory=asset_factory</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> unreal.load_asset(asset_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用创建基础资产的举例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_generic_asset_EXAMPLE</span>():</span><br><span class="line">    base_path = <span class="string">&#x27;/Game/GenericAssets/&#x27;</span></span><br><span class="line">    generic_assets = [</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;sequence&#x27;</span>,</span><br><span class="line">            unreal.LevelSequence,</span><br><span class="line">            unreal.LevelSequenceFactoryNew()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;material&#x27;</span>,</span><br><span class="line">            unreal.Material,</span><br><span class="line">            unreal.MaterialFactoryNew()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">            unreal.World,</span><br><span class="line">            unreal.WorldFactory()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;particle_system&#x27;</span>,</span><br><span class="line">            unreal.ParticleSystem,</span><br><span class="line">            unreal.ParticleSystemFactoryNew()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;paper_flipbook&#x27;</span>,</span><br><span class="line">            unreal.PaperFlipbook,</span><br><span class="line">            unreal.PaperFlipbookFactory()</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> asset <span class="keyword">in</span> generic_assets:</span><br><span class="line">        <span class="built_in">print</span>(create_generic_asset(asset[<span class="number">0</span>], <span class="literal">True</span>, asset[<span class="number">1</span>], asset[<span class="number">2</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="qpNWT"></a></p><h2 id="在蓝图中使用python"><a href="#在蓝图中使用python" class="headerlink" title="在蓝图中使用python"></a>在蓝图中使用python</h2><p>在4.25版本之前的ue中需要用c++添加蓝图节点但是在新版本已经内置了能在蓝图中使用python的节点。但是无法在运行时可用的蓝图类（例如直接从 <strong>Actor</strong> 派生的类）中使用此方法。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662020863952-4b2f949c-5fa1-4fd2-a215-cb7b1022281e.png#clientId=u22a16aa5-3892-4&errorMessage=unknown%20error&from=paste&height=108&id=u57ca3ead&originHeight=108&originWidth=321&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14297&status=error&style=none&taskId=ua8e75acd-6305-48ec-b2d7-8a9fe9078f6&title=&width=321" alt="image.png"><br><a name="wWH8n"></a></p><h1 id="B站搬运Udemy教程"><a href="#B站搬运Udemy教程" class="headerlink" title="B站搬运Udemy教程"></a>B站搬运Udemy教程</h1><p>链接：<a href="https://www.bilibili.com/video/BV1GY4y1s7qM?p=8&spm_id_from=pageDriver&vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1GY4y1s7qM?p=8&spm_id_from&#x3D;pageDriver&amp;vd_source&#x3D;b1de3fe38e887eb40fc55a5485724480</a><br /><a href="https://www.bilibili.com/video/BV18q4y1X7DH?p=11&vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV18q4y1X7DH?p=11&vd_source&#x3D;b1de3fe38e887eb40fc55a5485724480</a><br />这两个教程链接内容是一样的，但是有的教程链接中的内容可能有点损坏，互补一下。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663053942549-57973196-eff2-418d-a600-2a293b1f5040.png#clientId=ue9ce22a4-2e2e-4&errorMessage=unknown%20error&from=paste&height=178&id=ue78a2402&originHeight=178&originWidth=209&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35533&status=error&style=none&taskId=u1a865568-c0b5-4975-b5d3-97ee5e65145&title=&width=209" alt="image.png"></p><p><a name="u403x"></a></p><h2 id="P10工厂和资产创造"><a href="#P10工厂和资产创造" class="headerlink" title="P10工厂和资产创造"></a>P10工厂和资产创造</h2><p>什么是工厂：当我们需要创建一个资产的时候（蓝图，声音，关卡等），我们就需要去工厂去取（factory），因此我们需要先找到对应的工厂：<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/LevelFactory.html">LevelFactory</a>，<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/BlueprintFactory.html">BlueprintFactory</a>等。<br />以创建蓝图举例：<br />创建工厂对象相当于点击这些：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663056902672-816725d5-0293-46a5-bbef-68c4cfeda9f5.png#clientId=ua74dfa99-2388-4&errorMessage=unknown%20error&from=paste&height=632&id=u82702c01&originHeight=632&originWidth=216&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33231&status=error&style=none&taskId=u182c88b2-bc5b-42e1-a89b-335b71af25b&title=&width=216" alt="image.png"></p><p>创建完工厂后（点击后）需要选择继承的类<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663056967314-be14bd41-e4ad-4cbf-824a-6be26d61a8a1.png#clientId=ua74dfa99-2388-4&errorMessage=unknown%20error&from=paste&height=743&id=u8a06f157&originHeight=743&originWidth=544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98896&status=error&style=none&taskId=ue20e6a4d-6f9c-4763-9eb4-4bbfa2f4259&title=&width=544" alt="image.png"><br />初始设置完成后开始创造资产，创造资产需要使用unreal.AssetToolsHelpers.get_asset_tools()<br />利用这个工具中的create_asset方法创建。<br />创建完后用unreal.EditorAssetLibrary.save_loaded_asset进行保存<br />代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">blueprintName = <span class="string">&quot;python_create_BP&quot;</span></span><br><span class="line">blueprintPath = <span class="string">&quot;/Game/MyBluePrint&quot;</span></span><br><span class="line"></span><br><span class="line">factory = unreal.BlueprintFactory()</span><br><span class="line">factory.set_editor_property(<span class="string">&quot;ParentClass&quot;</span>, unreal.Actor)</span><br><span class="line"></span><br><span class="line">assetTools = unreal.AssetToolsHelpers.get_asset_tools()</span><br><span class="line">myFancyNewAssetFile = assetTools.create_asset(blueprintName, blueprintPath, <span class="literal">None</span>, factory)</span><br><span class="line"></span><br><span class="line">unreal.EditorAssetLibrary.save_loaded_asset(myFancyNewAssetFile)</span><br></pre></td></tr></table></figure><p><a name="x0zPC"></a></p><h2 id="P11制作任务进度条："><a href="#P11制作任务进度条：" class="headerlink" title="P11制作任务进度条："></a>P11制作任务进度条：</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663060403285-f485f6df-06a3-4c80-8f52-fc9c526f60c0.png#clientId=ua74dfa99-2388-4&errorMessage=unknown%20error&from=paste&height=133&id=uc0d5f7e7&originHeight=133&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7070&status=error&style=none&taskId=u6fc3c721-c9d7-46ef-80dd-352a5047316&title=&width=648" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">totalFrames = <span class="number">1000000</span></span><br><span class="line">textDisplay = <span class="string">&quot;i love python, an i guess i&#x27;ll be using this for a while!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(totalFrames, textDisplay) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(totalFrames):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.log(<span class="string">&quot;one step!!!!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><a name="b21xj"></a></p><h2 id="P12综合案例：批量创建继承自actor的蓝图资产（带进度条）"><a href="#P12综合案例：批量创建继承自actor的蓝图资产（带进度条）" class="headerlink" title="P12综合案例：批量创建继承自actor的蓝图资产（带进度条）"></a>P12综合案例：批量创建继承自actor的蓝图资产（带进度条）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">totalRequiredBlueprints = <span class="number">20</span></span><br><span class="line">newAssetName = <span class="string">&quot;BP_pythonMade_%d&quot;</span></span><br><span class="line">createdAssetsPath = <span class="string">&quot;/Game/TestStuff&quot;</span></span><br><span class="line">slowTaskDisplayText = <span class="string">&quot;Createing new assets.....&quot;</span></span><br><span class="line"></span><br><span class="line">factory = unreal.BlueprintFactory()</span><br><span class="line">factory.set_editor_property(<span class="string">&quot;ParentClass&quot;</span>, unreal.Actor)</span><br><span class="line"></span><br><span class="line">assetTools = unreal.AssetToolsHelpers.get_asset_tools()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(totalRequiredBlueprints, slowTaskDisplayText) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(totalRequiredBlueprints):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        newAsset = assetTools.create_asset(newAssetName % (x), createdAssetsPath, <span class="literal">None</span>, factory)</span><br><span class="line">        unreal.EditorAssetLibrary.save_loaded_asset(newAsset)</span><br><span class="line">        unreal.log(<span class="string">&quot;Just created an asset BP_PythonMade_%d via PYTHON API&quot;</span> % (x))</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="E5UPW"></a></p><h2 id="P13-根据选择的资产创建Actor-在关卡中的都叫actor"><a href="#P13-根据选择的资产创建Actor-在关卡中的都叫actor" class="headerlink" title="P13 根据选择的资产创建Actor(在关卡中的都叫actor)"></a>P13 根据选择的资产创建Actor(在关卡中的都叫actor)</h2><p>教程上的获取选择的资产是这样：<br />@unreal.uclass()<br />class MyEditorUtility(unreal.GlobalEditorUtilityBase):<br />    pass</p><p>selectedAssets &#x3D; MyEditorUtility().get_selected_assets()<br />但是官网教程有教可以通过这样获取选择的资产：<br />selectedAssets &#x3D; unreal.EditorUtilityLibrary.get_selected_assets()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">actorsCount = <span class="number">50</span></span><br><span class="line">slowTaskDisplayText = <span class="string">&quot;Spawning actors in the level.....&quot;</span></span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(actorsCount, slowTaskDisplayText) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(actorsCount):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.EditorLevelLibrary.spawn_actor_from_object(selectedAssets[<span class="number">0</span>], unreal.Vector(<span class="number">1.0</span>+x*<span class="number">100</span>, <span class="number">1.0</span>+x*<span class="number">100</span>, <span class="number">30.0</span>),  unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">10.0</span>*x))</span><br><span class="line">        unreal.log(<span class="string">&quot;Just added an actor to the level!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a name="XtLCO"></a></p><h2 id="P15修改选择的资产或者actor的属性"><a href="#P15修改选择的资产或者actor的属性" class="headerlink" title="P15修改选择的资产或者actor的属性"></a>P15修改选择的资产或者actor的属性</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663135564986-6b21ac2f-abd0-4932-a01d-b3a0984e89f0.png#clientId=u2c683694-c481-4&errorMessage=unknown%20error&from=paste&height=378&id=uf92eda78&originHeight=378&originWidth=2305&originalType=binary&ratio=1&rotation=0&showTitle=false&size=259521&status=error&style=none&taskId=ubcce0a4d-a366-4670-a268-197dd9edee4&title=&width=2305" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663135493400-bab6c656-b4d8-41bf-b30a-15bd0ab1b0db.png#clientId=u2c683694-c481-4&errorMessage=unknown%20error&from=paste&height=418&id=u7ab464ca&originHeight=418&originWidth=472&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28019&status=error&style=none&taskId=u6eb5e81a-b64f-41db-b98c-33cf6616fe7&title=&width=472" alt="image.png"><br />例如如果我们要修改这些属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> selectedAsset <span class="keyword">in</span> selectedAssets:</span><br><span class="line">    selectedAsset.set_editor_property(<span class="string">&quot;BlueprintDisplayName&quot;</span>, <span class="string">&quot;Some BP&quot;</span>)</span><br><span class="line">    selectedAsset.set_editor_property(<span class="string">&quot;BlueprintCategory&quot;</span>, <span class="string">&quot;Collectable&quot;</span>)</span><br><span class="line">    selectedAsset.set_editor_property(<span class="string">&quot;BlueprintDescription&quot;</span>, <span class="string">&quot;This is a blueprint generated by Python or something&quot;</span>)</span><br><span class="line"></span><br><span class="line">selectedActors = unreal.EditorLevelLibrary.get_selected_level_actors()</span><br><span class="line"><span class="keyword">for</span> actor <span class="keyword">in</span> selectedActors:</span><br><span class="line">    actor.set_editor_property(<span class="string">&quot;canRotate&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">    actor.set_editor_property(<span class="string">&quot;bHidden&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    actor.set_editor_property(<span class="string">&quot;SpriteScale&quot;</span>, <span class="number">7.5</span>)</span><br></pre></td></tr></table></figure><p>其中bHidden和SpriteScale对应的是ActorHiddenInGame和EditorBillboardScale<br />之所以使用的不是ue编辑器显示的界面名字是因为ue源码中设置的这些是编辑器中显示的名字，实际上源码中使用的变量名字并不是这些，并且bHidden在ue中显示的是名字是ActorHiddenInGame而且看起来是布尔变量，但是源码中实际上是int类型的名字叫bHidden。<br />那么如何在源码中查找真正的变量名字与类型呢？<br />首先我们需要UE的源码版，这我具体也不清楚，也不知道具体啥区别，具体名词定义是什么，我胡乱弄的，VS,C++都不太会，有时间系统学习一下。<br />例如这里设置actor的属性，我们就可以去Actor.h文件中搜索ue界面编辑器中显示的名字，然后就可以查找出来真正的名字与类型。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663225180561-c530c9ec-dd16-48f7-8259-85e0e4a71ede.png#clientId=ueac702c7-aad3-4&errorMessage=unknown%20error&from=paste&height=1214&id=u1544bd73&originHeight=1214&originWidth=3437&originalType=binary&ratio=1&rotation=0&showTitle=false&size=408022&status=error&style=none&taskId=ua187c3b2-5425-48b5-a5b6-fd3c22603e2&title=&width=3437" alt="image.png"><br><a name="evWjm"></a></p><h2 id="P16-python与蓝图的结合"><a href="#P16-python与蓝图的结合" class="headerlink" title="P16 python与蓝图的结合"></a><br />P16 python与蓝图的结合</h2><p>把P12的功能做成一个带UI的工具：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150571998-5f5deac5-591b-4ab2-bd80-7690ed71f044.png#clientId=u2c683694-c481-4&errorMessage=unknown%20error&from=paste&height=200&id=u75eda6c1&originHeight=200&originWidth=584&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21438&status=error&style=none&taskId=u6a8d9efc-4497-4c5f-bf99-b06cc6c4a2a&title=&width=584" alt="image.png"><br />其中滑块与文本之间可以通过函数进行绑定：<br />在UI编辑器中选择文本控件：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150642231-c9236cc6-f52f-41a1-9967-e40c33db75bd.png#clientId=u2c683694-c481-4&errorMessage=unknown%20error&from=paste&height=84&id=u7ecbe491&originHeight=84&originWidth=1217&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7777&status=error&style=none&taskId=ua94a5c18-8902-4582-ad52-1833ec1f8a4&title=&width=1217" alt="image.png">在text处进行绑定：<br />参考：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150677829-f9671f11-a34e-41d9-b565-0aff32be9f0c.png#clientId=u2c683694-c481-4&errorMessage=unknown%20error&from=paste&height=384&id=u42e0dfe8&originHeight=384&originWidth=1265&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93090&status=error&style=none&taskId=uffde632b-5fe1-47ca-943f-c4ecc154a5e&title=&width=1265" alt="image.png"><br />python在蓝图节点中使用：<br />步骤：使用FormatText节点，节点中使用花括号框住的变量会自动产生引脚，为引脚传递数值配合python代码使用executePythonCommand节点执行。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150698315-ca5c5d83-c521-43ab-b632-359171aae0ca.png#clientId=u2c683694-c481-4&errorMessage=unknown%20error&from=paste&height=707&id=u395b52ea&originHeight=707&originWidth=1709&originalType=binary&ratio=1&rotation=0&showTitle=false&size=170315&status=error&style=none&taskId=u141b2d81-9c0a-45e2-bde4-9f73a053767&title=&width=1709" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line">actorsCount = <span class="built_in">int</span>(&#123;actorsCount&#125;)</span><br><span class="line">rotationStep = <span class="built_in">int</span>(&#123;rotationStep&#125;)</span><br><span class="line">positionOffset = &#123;positionOffset&#125;</span><br><span class="line">slowTaskDisplayText = <span class="string">&quot;Spawning actors in the level....&quot;</span></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(actorsCount, slowTaskDisplayText) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(actorsCount):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.EditorLevelLibrary.spawn_actor_from_object(selectedAssets[<span class="number">0</span>],unreal.Vector(positionOffset * i, positionOffset * i, <span class="number">30.0</span>), unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, rotationStep * i))</span><br><span class="line">        unreal.log(<span class="string">&quot;Just added an actor to the level!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a name="lh29O"></a></p><h2 id="P19-清理动画序列的修改"><a href="#P19-清理动画序列的修改" class="headerlink" title="P19 清理动画序列的修改"></a>P19 清理动画序列的修改</h2><p>清理动画序列的这些：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663230536696-b7ad4db0-2360-4f31-9505-93e2de6ace26.png#clientId=ueac702c7-aad3-4&errorMessage=unknown%20error&from=paste&height=929&id=u5bcafe5b&originHeight=929&originWidth=1872&originalType=binary&ratio=1&rotation=0&showTitle=false&size=981489&status=error&style=none&taskId=u1201cab3-2bad-4287-8d1f-dcfeb4abae8&title=&width=1872" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> asset <span class="keyword">in</span> selectedAssets:</span><br><span class="line">    asset.modify(<span class="literal">True</span>)</span><br><span class="line">    unreal.AnimationLibrary.remove_all_animation_notify_tracks(asset)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不懂教程为什么要这样写<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663230739632-4fbabd10-0237-4f9f-a0b6-6fc6f78ada35.png#clientId=ueac702c7-aad3-4&errorMessage=unknown%20error&from=paste&height=543&id=u262d67d0&originHeight=543&originWidth=782&originalType=binary&ratio=1&rotation=0&showTitle=false&size=174522&status=error&style=none&taskId=u33d17a86-ffd7-447c-806b-8d0b86506e7&title=&width=782" alt="image.png"><br><a name="PYMbD"></a></p><h2 id="P20-清理未使用的资产"><a href="#P20-清理未使用的资产" class="headerlink" title="P20 清理未使用的资产"></a>P20 清理未使用的资产</h2><p>使用后将无法撤回，看看就好，并且如果资产过多会直接崩溃。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">workingPath = <span class="string">&quot;/Game&quot;</span></span><br><span class="line"></span><br><span class="line">allAssets = unreal.EditorAssetLibrary.<span class="built_in">list_assets</span>(workingPath)</span><br><span class="line"></span><br><span class="line">processingAssetPath = <span class="string">&quot;&quot;</span></span><br><span class="line">allAssetsCount = <span class="built_in">len</span>(allAssets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (allAssetsCount &gt; <span class="number">0</span>):</span><br><span class="line">    with unreal.<span class="built_in">ScopedSlowTask</span>(allAssetsCount, processingAssetPath) as ST:</span><br><span class="line">        ST.<span class="built_in">make_dialog</span>(True)</span><br><span class="line">        <span class="keyword">for</span> asset in allAssets:</span><br><span class="line">            processingAssetPath = asset</span><br><span class="line">            deps = unreal.EditorAssetLibrary.<span class="built_in">find_package_referencers_for_asset</span>(asset)  # 寻找资产的依赖项</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(deps)&lt;=<span class="number">0</span>):</span><br><span class="line">                unreal.<span class="built_in">log</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Deleteing &gt;&gt;&gt;&gt;&gt; %s&quot;</span> % asset)</span><br><span class="line">                unreal.EditorAssetLibrary.<span class="built_in">delete_asset</span>(asset)</span><br><span class="line">            <span class="keyword">if</span> ST.<span class="built_in">should_cancel</span>():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            ST.<span class="built_in">enter_progress_frame</span>(<span class="number">1</span>, processingAssetPath)</span><br></pre></td></tr></table></figure><p><a name="ZMWsY"></a></p><h2 id="P21-批量创建材质实例"><a href="#P21-批量创建材质实例" class="headerlink" title="P21 批量创建材质实例"></a>P21 批量创建材质实例</h2><p>这里值得注意的是，使用get_path_name得到的是path.name格式的字符串，因此如果仅仅需要path则需要替换字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">totalRequiredInstances = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">newAssetName = <span class="string">&quot;&quot;</span></span><br><span class="line">sourceAssetPath = <span class="string">&quot;&quot;</span></span><br><span class="line">createdAssetsPath = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.<span class="built_in">get_selected_assets</span>()</span><br><span class="line"></span><br><span class="line">factor = unreal.<span class="built_in">MaterialInstanceConstantFactoryNew</span>()</span><br><span class="line"></span><br><span class="line">assetTools = unreal.AssetToolsHelpers.<span class="built_in">get_asset_tools</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> selectedAsset in selectedAssets:</span><br><span class="line">    newAssetName = selectedAsset.<span class="built_in">get_name</span>() + <span class="string">&quot;_%s_%d&quot;</span></span><br><span class="line">    sourceAssetPath = selectedAsset.<span class="built_in">get_path_name</span>()  # /Game/MyTools/NewMaterial.NewMaterial</span><br><span class="line">    createdAssetsPath = sourceAssetPath.<span class="built_in">replace</span>(selectedAsset.<span class="built_in">get_name</span>(), <span class="string">&quot;-&quot;</span>)  # /Game/MyTools/-.-</span><br><span class="line">    createdAssetsPath = createdAssetsPath.<span class="built_in">replace</span>(<span class="string">&quot;-.-&quot;</span>, <span class="string">&quot;&quot;</span>)  # /Game/MyTools/</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x in <span class="built_in">range</span>(totalRequiredInstances):</span><br><span class="line">        newAsset = assetTools.<span class="built_in">create_asset</span>(newAssetName % (<span class="string">&quot;inst&quot;</span>, x + <span class="number">1</span>), createdAssetsPath, None, factor)</span><br><span class="line">        unreal.MaterialEditingLibrary.<span class="built_in">set_material_instance_parent</span>(newAsset, selectedAsset)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEPython </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
